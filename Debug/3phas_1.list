
C:\Users\erikv\Documents\3phas\3phas_1\Debug\3phas_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003790  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003bc0  08003bc0  00013bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003bcc  08003bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000008  20000000  08003bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001070  20000008  08003bd8  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001078  08003bd8  00021078  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013d8f  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002f26  00000000  00000000  00033dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000d191  00000000  00000000  00036ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f30  00000000  00000000  00043e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001668  00000000  00000000  00044db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000080c5  00000000  00000000  00046418  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000058f8  00000000  00000000  0004e4dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00053dd5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002f38  00000000  00000000  00053e54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000008 	.word	0x20000008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003908 	.word	0x08003908

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	08003908 	.word	0x08003908

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97e 	b.w	80004e4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460e      	mov	r6, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9d08      	ldr	r5, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d150      	bne.n	80002b2 <__udivmoddi4+0xb2>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96c      	bls.n	80002f0 <__udivmoddi4+0xf0>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0420 	rsb	r4, lr, #32
 8000224:	fa20 f404 	lsr.w	r4, r0, r4
 8000228:	fa01 f60e 	lsl.w	r6, r1, lr
 800022c:	ea44 0c06 	orr.w	ip, r4, r6
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800023c:	0c22      	lsrs	r2, r4, #16
 800023e:	fbbc f0f9 	udiv	r0, ip, r9
 8000242:	fa1f f887 	uxth.w	r8, r7
 8000246:	fb09 c610 	mls	r6, r9, r0, ip
 800024a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800024e:	fb00 f308 	mul.w	r3, r0, r8
 8000252:	42b3      	cmp	r3, r6
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x6a>
 8000256:	19f6      	adds	r6, r6, r7
 8000258:	f100 32ff 	add.w	r2, r0, #4294967295
 800025c:	f080 8122 	bcs.w	80004a4 <__udivmoddi4+0x2a4>
 8000260:	42b3      	cmp	r3, r6
 8000262:	f240 811f 	bls.w	80004a4 <__udivmoddi4+0x2a4>
 8000266:	3802      	subs	r0, #2
 8000268:	443e      	add	r6, r7
 800026a:	1af6      	subs	r6, r6, r3
 800026c:	b2a2      	uxth	r2, r4
 800026e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000272:	fb09 6613 	mls	r6, r9, r3, r6
 8000276:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800027a:	fb03 f808 	mul.w	r8, r3, r8
 800027e:	45a0      	cmp	r8, r4
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x96>
 8000282:	19e4      	adds	r4, r4, r7
 8000284:	f103 32ff 	add.w	r2, r3, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x2a0>
 800028c:	45a0      	cmp	r8, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x2a0>
 8000292:	3b02      	subs	r3, #2
 8000294:	443c      	add	r4, r7
 8000296:	ebc8 0404 	rsb	r4, r8, r4
 800029a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	2d00      	cmp	r5, #0
 80002a2:	d062      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a4:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a8:	2300      	movs	r3, #0
 80002aa:	602c      	str	r4, [r5, #0]
 80002ac:	606b      	str	r3, [r5, #4]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d907      	bls.n	80002c6 <__udivmoddi4+0xc6>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	d055      	beq.n	8000366 <__udivmoddi4+0x166>
 80002ba:	2100      	movs	r1, #0
 80002bc:	e885 0041 	stmia.w	r5, {r0, r6}
 80002c0:	4608      	mov	r0, r1
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	f040 8090 	bne.w	80003f0 <__udivmoddi4+0x1f0>
 80002d0:	42b3      	cmp	r3, r6
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xda>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb66 0603 	sbc.w	r6, r6, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	46b4      	mov	ip, r6
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d040      	beq.n	800036a <__udivmoddi4+0x16a>
 80002e8:	e885 1010 	stmia.w	r5, {r4, ip}
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	b912      	cbnz	r2, 80002f8 <__udivmoddi4+0xf8>
 80002f2:	2701      	movs	r7, #1
 80002f4:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f8:	fab7 fe87 	clz	lr, r7
 80002fc:	f1be 0f00 	cmp.w	lr, #0
 8000300:	d135      	bne.n	800036e <__udivmoddi4+0x16e>
 8000302:	1bf3      	subs	r3, r6, r7
 8000304:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000312:	0c22      	lsrs	r2, r4, #16
 8000314:	fb08 3610 	mls	r6, r8, r0, r3
 8000318:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800031c:	fb0c f300 	mul.w	r3, ip, r0
 8000320:	42b3      	cmp	r3, r6
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19f6      	adds	r6, r6, r7
 8000326:	f100 32ff 	add.w	r2, r0, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42b3      	cmp	r3, r6
 800032e:	f200 80ce 	bhi.w	80004ce <__udivmoddi4+0x2ce>
 8000332:	4610      	mov	r0, r2
 8000334:	1af6      	subs	r6, r6, r3
 8000336:	b2a2      	uxth	r2, r4
 8000338:	fbb6 f3f8 	udiv	r3, r6, r8
 800033c:	fb08 6613 	mls	r6, r8, r3, r6
 8000340:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000344:	fb0c fc03 	mul.w	ip, ip, r3
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b5 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 800035a:	4613      	mov	r3, r2
 800035c:	ebcc 0404 	rsb	r4, ip, r4
 8000360:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000364:	e79c      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000366:	4629      	mov	r1, r5
 8000368:	4628      	mov	r0, r5
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0120 	rsb	r1, lr, #32
 8000372:	fa06 f30e 	lsl.w	r3, r6, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f901 	lsr.w	r9, r0, r1
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	40ce      	lsrs	r6, r1
 8000384:	ea49 0903 	orr.w	r9, r9, r3
 8000388:	fbb6 faf8 	udiv	sl, r6, r8
 800038c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000390:	fb08 661a 	mls	r6, r8, sl, r6
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800039c:	fb0a f20c 	mul.w	r2, sl, ip
 80003a0:	429a      	cmp	r2, r3
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1be>
 80003a8:	19db      	adds	r3, r3, r7
 80003aa:	f10a 31ff 	add.w	r1, sl, #4294967295
 80003ae:	f080 8087 	bcs.w	80004c0 <__udivmoddi4+0x2c0>
 80003b2:	429a      	cmp	r2, r3
 80003b4:	f240 8084 	bls.w	80004c0 <__udivmoddi4+0x2c0>
 80003b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80003bc:	443b      	add	r3, r7
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fa1f f989 	uxth.w	r9, r9
 80003c4:	fbb3 f1f8 	udiv	r1, r3, r8
 80003c8:	fb08 3311 	mls	r3, r8, r1, r3
 80003cc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80003d0:	fb01 f60c 	mul.w	r6, r1, ip
 80003d4:	429e      	cmp	r6, r3
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0x1e8>
 80003d8:	19db      	adds	r3, r3, r7
 80003da:	f101 32ff 	add.w	r2, r1, #4294967295
 80003de:	d26b      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 80003e0:	429e      	cmp	r6, r3
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 80003e4:	3902      	subs	r1, #2
 80003e6:	443b      	add	r3, r7
 80003e8:	1b9b      	subs	r3, r3, r6
 80003ea:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80003ee:	e78e      	b.n	800030e <__udivmoddi4+0x10e>
 80003f0:	f1c1 0e20 	rsb	lr, r1, #32
 80003f4:	fa22 f40e 	lsr.w	r4, r2, lr
 80003f8:	408b      	lsls	r3, r1
 80003fa:	4323      	orrs	r3, r4
 80003fc:	fa20 f70e 	lsr.w	r7, r0, lr
 8000400:	fa06 f401 	lsl.w	r4, r6, r1
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	fa26 f60e 	lsr.w	r6, r6, lr
 800040c:	433c      	orrs	r4, r7
 800040e:	fbb6 f9fc 	udiv	r9, r6, ip
 8000412:	0c27      	lsrs	r7, r4, #16
 8000414:	fb0c 6619 	mls	r6, ip, r9, r6
 8000418:	fa1f f883 	uxth.w	r8, r3
 800041c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000420:	fb09 f708 	mul.w	r7, r9, r8
 8000424:	42b7      	cmp	r7, r6
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	fa00 fa01 	lsl.w	sl, r0, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x242>
 8000430:	18f6      	adds	r6, r6, r3
 8000432:	f109 30ff 	add.w	r0, r9, #4294967295
 8000436:	d241      	bcs.n	80004bc <__udivmoddi4+0x2bc>
 8000438:	42b7      	cmp	r7, r6
 800043a:	d93f      	bls.n	80004bc <__udivmoddi4+0x2bc>
 800043c:	f1a9 0902 	sub.w	r9, r9, #2
 8000440:	441e      	add	r6, r3
 8000442:	1bf6      	subs	r6, r6, r7
 8000444:	b2a0      	uxth	r0, r4
 8000446:	fbb6 f4fc 	udiv	r4, r6, ip
 800044a:	fb0c 6614 	mls	r6, ip, r4, r6
 800044e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000452:	fb04 f808 	mul.w	r8, r4, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x26a>
 800045a:	18ff      	adds	r7, r7, r3
 800045c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000460:	d228      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d926      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 8000466:	3c02      	subs	r4, #2
 8000468:	441f      	add	r7, r3
 800046a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800046e:	ebc8 0707 	rsb	r7, r8, r7
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	4644      	mov	r4, r8
 800047a:	464e      	mov	r6, r9
 800047c:	d314      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	d029      	beq.n	80004d4 <__udivmoddi4+0x2d4>
 8000480:	b365      	cbz	r5, 80004dc <__udivmoddi4+0x2dc>
 8000482:	ebba 0304 	subs.w	r3, sl, r4
 8000486:	eb67 0706 	sbc.w	r7, r7, r6
 800048a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800048e:	40cb      	lsrs	r3, r1
 8000490:	40cf      	lsrs	r7, r1
 8000492:	ea4e 0303 	orr.w	r3, lr, r3
 8000496:	e885 0088 	stmia.w	r5, {r3, r7}
 800049a:	2100      	movs	r1, #0
 800049c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a0:	4613      	mov	r3, r2
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x96>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6e0      	b.n	800026a <__udivmoddi4+0x6a>
 80004a8:	ebb8 0402 	subs.w	r4, r8, r2
 80004ac:	eb69 0603 	sbc.w	r6, r9, r3
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7e5      	b.n	8000480 <__udivmoddi4+0x280>
 80004b4:	4604      	mov	r4, r0
 80004b6:	e7d8      	b.n	800046a <__udivmoddi4+0x26a>
 80004b8:	4611      	mov	r1, r2
 80004ba:	e795      	b.n	80003e8 <__udivmoddi4+0x1e8>
 80004bc:	4681      	mov	r9, r0
 80004be:	e7c0      	b.n	8000442 <__udivmoddi4+0x242>
 80004c0:	468a      	mov	sl, r1
 80004c2:	e77c      	b.n	80003be <__udivmoddi4+0x1be>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e748      	b.n	800035c <__udivmoddi4+0x15c>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443e      	add	r6, r7
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x134>
 80004d4:	45c2      	cmp	sl, r8
 80004d6:	d3e7      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80004d8:	463e      	mov	r6, r7
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x280>
 80004dc:	4629      	mov	r1, r5
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_InitTick+0x24>)
 80004ea:	4a09      	ldr	r2, [pc, #36]	; (8000510 <HAL_InitTick+0x28>)
 80004ec:	681b      	ldr	r3, [r3, #0]
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004ee:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004f0:	fba2 2303 	umull	r2, r3, r2, r3
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f4:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004f6:	0998      	lsrs	r0, r3, #6
 80004f8:	f000 f87c 	bl	80005f4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80004fc:	4621      	mov	r1, r4
 80004fe:	2200      	movs	r2, #0
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f832 	bl	800056c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000508:	2000      	movs	r0, #0
 800050a:	bd10      	pop	{r4, pc}
 800050c:	20000004 	.word	0x20000004
 8000510:	10624dd3 	.word	0x10624dd3

08000514 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000516:	2003      	movs	r0, #3
 8000518:	f000 f816 	bl	8000548 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051c:	200f      	movs	r0, #15
 800051e:	f7ff ffe3 	bl	80004e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000522:	f003 f879 	bl	8003618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000526:	2000      	movs	r0, #0
 8000528:	bd08      	pop	{r3, pc}
 800052a:	bf00      	nop

0800052c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800052c:	4a02      	ldr	r2, [pc, #8]	; (8000538 <HAL_IncTick+0xc>)
 800052e:	6813      	ldr	r3, [r2, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000d28 	.word	0x20000d28

0800053c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800053c:	4b01      	ldr	r3, [pc, #4]	; (8000544 <HAL_GetTick+0x8>)
 800053e:	6818      	ldr	r0, [r3, #0]
}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000d28 	.word	0x20000d28

08000548 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800054a:	68d1      	ldr	r1, [r2, #12]
 800054c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000550:	400b      	ands	r3, r1
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000552:	0200      	lsls	r0, r0, #8
 8000554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000558:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800055c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000560:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000562:	60d3      	str	r3, [r2, #12]
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <HAL_NVIC_SetPriority+0x68>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000574:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000576:	f1c3 0507 	rsb	r5, r3, #7
 800057a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800057c:	f103 0404 	add.w	r4, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000580:	bf28      	it	cs
 8000582:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000584:	2c06      	cmp	r4, #6
 8000586:	d918      	bls.n	80005ba <HAL_NVIC_SetPriority+0x4e>
 8000588:	3b03      	subs	r3, #3
 800058a:	2401      	movs	r4, #1
 800058c:	409c      	lsls	r4, r3
 800058e:	3c01      	subs	r4, #1
 8000590:	4022      	ands	r2, r4

  return (
 8000592:	2401      	movs	r4, #1
 8000594:	40ac      	lsls	r4, r5
 8000596:	3c01      	subs	r4, #1
 8000598:	4021      	ands	r1, r4
 800059a:	fa01 f303 	lsl.w	r3, r1, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800059e:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80005a0:	ea42 0203 	orr.w	r2, r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80005a4:	db0c      	blt.n	80005c0 <HAL_NVIC_SetPriority+0x54>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005aa:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005ae:	0112      	lsls	r2, r2, #4
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005b6:	bc30      	pop	{r4, r5}
 80005b8:	4770      	bx	lr
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ba:	2200      	movs	r2, #0
 80005bc:	4613      	mov	r3, r2
 80005be:	e7e8      	b.n	8000592 <HAL_NVIC_SetPriority+0x26>
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_NVIC_SetPriority+0x6c>)
 80005c2:	f000 000f 	and.w	r0, r0, #15
 80005c6:	0112      	lsls	r2, r2, #4
 80005c8:	4403      	add	r3, r0
 80005ca:	b2d2      	uxtb	r2, r2
 80005cc:	761a      	strb	r2, [r3, #24]
 80005ce:	bc30      	pop	{r4, r5}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00
 80005d8:	e000ecfc 	.word	0xe000ecfc

080005dc <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005dc:	f000 011f 	and.w	r1, r0, #31
 80005e0:	2301      	movs	r3, #1
 80005e2:	0940      	lsrs	r0, r0, #5
 80005e4:	4a02      	ldr	r2, [pc, #8]	; (80005f0 <HAL_NVIC_EnableIRQ+0x14>)
 80005e6:	408b      	lsls	r3, r1
 80005e8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005f4:	3801      	subs	r0, #1
 80005f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005fa:	d20e      	bcs.n	800061a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005fe:	b410      	push	{r4}
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	4c08      	ldr	r4, [pc, #32]	; (8000624 <HAL_SYSTICK_Config+0x30>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000602:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	20f0      	movs	r0, #240	; 0xf0
 8000606:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800060a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800060e:	4610      	mov	r0, r2
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000612:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000618:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800061a:	2001      	movs	r0, #1
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000e010 	.word	0xe000e010
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800062a:	6813      	ldr	r3, [r2, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800062c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800062e:	bf0c      	ite	eq
 8000630:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000634:	f023 0304 	bicne.w	r3, r3, #4
 8000638:	6013      	str	r3, [r2, #0]
 800063a:	4770      	bx	lr
 800063c:	e000e010 	.word	0xe000e010

08000640 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000640:	2800      	cmp	r0, #0
 8000642:	d04b      	beq.n	80006dc <HAL_DMA_Init+0x9c>
 8000644:	4603      	mov	r3, r0
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000646:	4a2f      	ldr	r2, [pc, #188]	; (8000704 <HAL_DMA_Init+0xc4>)
 8000648:	6800      	ldr	r0, [r0, #0]
 800064a:	4290      	cmp	r0, r2
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800064c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800064e:	d941      	bls.n	80006d4 <HAL_DMA_Init+0x94>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000650:	4a2d      	ldr	r2, [pc, #180]	; (8000708 <HAL_DMA_Init+0xc8>)
 8000652:	492e      	ldr	r1, [pc, #184]	; (800070c <HAL_DMA_Init+0xcc>)
    hdma->DmaBaseAddress = DMA2;
 8000654:	4c2e      	ldr	r4, [pc, #184]	; (8000710 <HAL_DMA_Init+0xd0>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000656:	689f      	ldr	r7, [r3, #8]
 8000658:	68de      	ldr	r6, [r3, #12]
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 800065a:	641c      	str	r4, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800065c:	4402      	add	r2, r0
 800065e:	fba1 1202 	umull	r1, r2, r1, r2
 8000662:	0912      	lsrs	r2, r2, #4
 8000664:	0092      	lsls	r2, r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000666:	f103 0114 	add.w	r1, r3, #20
 800066a:	691c      	ldr	r4, [r3, #16]
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800066c:	645a      	str	r2, [r3, #68]	; 0x44
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800066e:	c926      	ldmia	r1, {r1, r2, r5}
 8000670:	433e      	orrs	r6, r7
 8000672:	4326      	orrs	r6, r4
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000674:	2402      	movs	r4, #2
 8000676:	f883 4025 	strb.w	r4, [r3, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800067a:	430e      	orrs	r6, r1

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800067c:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800067e:	6a1c      	ldr	r4, [r3, #32]
 8000680:	4332      	orrs	r2, r6
 8000682:	4315      	orrs	r5, r2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000684:	f421 42ff 	bic.w	r2, r1, #32640	; 0x7f80
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000688:	432c      	orrs	r4, r5

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800068a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800068e:	4322      	orrs	r2, r4
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000690:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000694:	6002      	str	r2, [r0, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000696:	d010      	beq.n	80006ba <HAL_DMA_Init+0x7a>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000698:	4a1e      	ldr	r2, [pc, #120]	; (8000714 <HAL_DMA_Init+0xd4>)
 800069a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800069c:	4291      	cmp	r1, r2
 800069e:	d01f      	beq.n	80006e0 <HAL_DMA_Init+0xa0>
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 80006a0:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <HAL_DMA_Init+0xd8>)
 80006a2:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80006a4:	6814      	ldr	r4, [r2, #0]
 80006a6:	200f      	movs	r0, #15
 80006a8:	40a8      	lsls	r0, r5
 80006aa:	ea24 0000 	bic.w	r0, r4, r0
 80006ae:	6010      	str	r0, [r2, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex));
 80006b0:	6859      	ldr	r1, [r3, #4]
 80006b2:	6810      	ldr	r0, [r2, #0]
 80006b4:	40a9      	lsls	r1, r5
 80006b6:	4301      	orrs	r1, r0
 80006b8:	6011      	str	r1, [r2, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80006ba:	2000      	movs	r0, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80006bc:	2201      	movs	r2, #1
  hdma->XferHalfCpltCallback = NULL;
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006be:	63d8      	str	r0, [r3, #60]	; 0x3c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80006c0:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80006c2:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80006c4:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80006c6:	6398      	str	r0, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80006c8:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80006cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
}
 80006d0:	bcf0      	pop	{r4, r5, r6, r7}
 80006d2:	4770      	bx	lr

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80006d4:	4a11      	ldr	r2, [pc, #68]	; (800071c <HAL_DMA_Init+0xdc>)
 80006d6:	490d      	ldr	r1, [pc, #52]	; (800070c <HAL_DMA_Init+0xcc>)
    hdma->DmaBaseAddress = DMA1;
 80006d8:	4c0e      	ldr	r4, [pc, #56]	; (8000714 <HAL_DMA_Init+0xd4>)
 80006da:	e7bc      	b.n	8000656 <HAL_DMA_Init+0x16>
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80006dc:	2001      	movs	r0, #1
 80006de:	4770      	bx	lr
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 80006e0:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80006e2:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 80006e6:	200f      	movs	r0, #15
 80006e8:	40a8      	lsls	r0, r5
 80006ea:	ea24 0000 	bic.w	r0, r4, r0
 80006ee:	f8c2 00a8 	str.w	r0, [r2, #168]	; 0xa8

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex));
 80006f2:	6859      	ldr	r1, [r3, #4]
 80006f4:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
 80006f8:	40a9      	lsls	r1, r5
 80006fa:	4301      	orrs	r1, r0
 80006fc:	f8c2 10a8 	str.w	r1, [r2, #168]	; 0xa8
 8000700:	e7db      	b.n	80006ba <HAL_DMA_Init+0x7a>
 8000702:	bf00      	nop
 8000704:	40020407 	.word	0x40020407
 8000708:	bffdfbf8 	.word	0xbffdfbf8
 800070c:	cccccccd 	.word	0xcccccccd
 8000710:	40020400 	.word	0x40020400
 8000714:	40020000 	.word	0x40020000
 8000718:	400204a8 	.word	0x400204a8
 800071c:	bffdfff8 	.word	0xbffdfff8

08000720 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000720:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000722:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8000726:	2c01      	cmp	r4, #1
 8000728:	d00c      	beq.n	8000744 <HAL_DMA_Start_IT+0x24>

  if(HAL_DMA_STATE_READY == hdma->State)
 800072a:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800072e:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8000730:	b2e4      	uxtb	r4, r4
 8000732:	42ac      	cmp	r4, r5

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000734:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000738:	d006      	beq.n	8000748 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800073a:	2300      	movs	r3, #0
 800073c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000740:	2002      	movs	r0, #2
 8000742:	bdf0      	pop	{r4, r5, r6, r7, pc}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000744:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8000746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000748:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hdma);

  if(HAL_DMA_STATE_READY == hdma->State)
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800074a:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800074c:	2600      	movs	r6, #0
  __HAL_LOCK(hdma);

  if(HAL_DMA_STATE_READY == hdma->State)
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800074e:	f880 7025 	strb.w	r7, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000752:	63c6      	str	r6, [r0, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000754:	682e      	ldr	r6, [r5, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000756:	6c07      	ldr	r7, [r0, #64]	; 0x40
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000758:	f026 0e01 	bic.w	lr, r6, #1
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800075c:	6c46      	ldr	r6, [r0, #68]	; 0x44
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800075e:	f8c5 e000 	str.w	lr, [r5]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000762:	40b4      	lsls	r4, r6

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000764:	6886      	ldr	r6, [r0, #8]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000766:	607c      	str	r4, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000768:	606b      	str	r3, [r5, #4]
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800076a:	6b03      	ldr	r3, [r0, #48]	; 0x30

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800076c:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800076e:	bf0b      	itete	eq
 8000770:	60aa      	streq	r2, [r5, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000772:	60a9      	strne	r1, [r5, #8]
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000774:	60e9      	streq	r1, [r5, #12]
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000776:	60ea      	strne	r2, [r5, #12]
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000778:	b14b      	cbz	r3, 800078e <HAL_DMA_Start_IT+0x6e>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800077a:	682b      	ldr	r3, [r5, #0]
 800077c:	f043 030e 	orr.w	r3, r3, #14
 8000780:	602b      	str	r3, [r5, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000782:	682b      	ldr	r3, [r5, #0]
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	602b      	str	r3, [r5, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 800078a:	2000      	movs	r0, #0
 800078c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800078e:	682b      	ldr	r3, [r5, #0]
 8000790:	f023 0304 	bic.w	r3, r3, #4
 8000794:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000796:	682b      	ldr	r3, [r5, #0]
 8000798:	f043 030a 	orr.w	r3, r3, #10
 800079c:	602b      	str	r3, [r5, #0]
 800079e:	e7f0      	b.n	8000782 <HAL_DMA_Start_IT+0x62>

080007a0 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80007a0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80007a4:	2a02      	cmp	r2, #2
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80007a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80007a8:	d003      	beq.n	80007b2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007aa:	2204      	movs	r2, #4
 80007ac:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 80007ae:	2001      	movs	r0, #1
 80007b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007b2:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007b4:	6c41      	ldr	r1, [r0, #68]	; 0x44
    status = HAL_ERROR;
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007b6:	6814      	ldr	r4, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007b8:	6c07      	ldr	r7, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80007ba:	6b86      	ldr	r6, [r0, #56]	; 0x38
    status = HAL_ERROR;
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007bc:	f024 040e 	bic.w	r4, r4, #14
 80007c0:	6014      	str	r4, [r2, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80007c2:	6814      	ldr	r4, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007c4:	2501      	movs	r5, #1
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80007c6:	f024 0401 	bic.w	r4, r4, #1
 80007ca:	6014      	str	r4, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007cc:	fa05 f101 	lsl.w	r1, r5, r1

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007d0:	2400      	movs	r4, #0
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007d2:	6079      	str	r1, [r7, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80007d4:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007d8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80007dc:	b116      	cbz	r6, 80007e4 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 80007de:	47b0      	blx	r6
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 80007e0:	4620      	mov	r0, r4
 80007e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007e4:	4630      	mov	r0, r6
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80007e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080007e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80007e8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80007ea:	6c05      	ldr	r5, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80007ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80007ee:	6829      	ldr	r1, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80007f0:	6804      	ldr	r4, [r0, #0]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80007f2:	2304      	movs	r3, #4
 80007f4:	4093      	lsls	r3, r2
 80007f6:	4219      	tst	r1, r3
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
 80007f8:	6826      	ldr	r6, [r4, #0]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80007fa:	d00d      	beq.n	8000818 <HAL_DMA_IRQHandler+0x30>
 80007fc:	0777      	lsls	r7, r6, #29
 80007fe:	d50b      	bpl.n	8000818 <HAL_DMA_IRQHandler+0x30>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000800:	6822      	ldr	r2, [r4, #0]
 8000802:	0692      	lsls	r2, r2, #26
 8000804:	d403      	bmi.n	800080e <HAL_DMA_IRQHandler+0x26>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000806:	6822      	ldr	r2, [r4, #0]
 8000808:	f022 0204 	bic.w	r2, r2, #4
 800080c:	6022      	str	r2, [r4, #0]
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800080e:	6b02      	ldr	r2, [r0, #48]	; 0x30
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8000810:	606b      	str	r3, [r5, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000812:	b1c2      	cbz	r2, 8000846 <HAL_DMA_IRQHandler+0x5e>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8000814:	bcf0      	pop	{r4, r5, r6, r7}
    __HAL_UNLOCK(hdma);

    if(hdma->XferCpltCallback != NULL)
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000816:	4710      	bx	r2
        hdma->XferHalfCpltCallback(hdma);
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000818:	2302      	movs	r3, #2
 800081a:	4093      	lsls	r3, r2
 800081c:	4219      	tst	r1, r3
 800081e:	d014      	beq.n	800084a <HAL_DMA_IRQHandler+0x62>
 8000820:	07b7      	lsls	r7, r6, #30
 8000822:	d512      	bpl.n	800084a <HAL_DMA_IRQHandler+0x62>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000824:	6822      	ldr	r2, [r4, #0]
 8000826:	0692      	lsls	r2, r2, #26
 8000828:	d406      	bmi.n	8000838 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800082a:	6822      	ldr	r2, [r4, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800082c:	2101      	movs	r1, #1
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800082e:	f022 020a 	bic.w	r2, r2, #10
 8000832:	6022      	str	r2, [r4, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000834:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if(hdma->XferCpltCallback != NULL)
 8000838:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 800083a:	606b      	str	r3, [r5, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800083c:	2300      	movs	r3, #0
 800083e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000842:	2a00      	cmp	r2, #0
 8000844:	d1e6      	bne.n	8000814 <HAL_DMA_IRQHandler+0x2c>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8000846:	bcf0      	pop	{r4, r5, r6, r7}
 8000848:	4770      	bx	lr
      hdma->XferCpltCallback(hdma);
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800084a:	2308      	movs	r3, #8
 800084c:	4093      	lsls	r3, r2
 800084e:	420b      	tst	r3, r1
 8000850:	d0f9      	beq.n	8000846 <HAL_DMA_IRQHandler+0x5e>
 8000852:	0733      	lsls	r3, r6, #28
 8000854:	d5f7      	bpl.n	8000846 <HAL_DMA_IRQHandler+0x5e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000856:	6821      	ldr	r1, [r4, #0]
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8000858:	6b46      	ldr	r6, [r0, #52]	; 0x34
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800085a:	2301      	movs	r3, #1
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800085c:	f021 010e 	bic.w	r1, r1, #14

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000860:	fa03 f202 	lsl.w	r2, r3, r2

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000864:	2700      	movs	r7, #0
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000866:	6021      	str	r1, [r4, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000868:	606a      	str	r2, [r5, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800086a:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800086c:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000870:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8000874:	2e00      	cmp	r6, #0
 8000876:	d0e6      	beq.n	8000846 <HAL_DMA_IRQHandler+0x5e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000878:	4633      	mov	r3, r6
    }
  }
  return;
}
 800087a:	bcf0      	pop	{r4, r5, r6, r7}
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800087c:	4718      	bx	r3
 800087e:	bf00      	nop

08000880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000880:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000882:	6809      	ldr	r1, [r1, #0]
 8000884:	2900      	cmp	r1, #0
 8000886:	f000 80c6 	beq.w	8000a16 <HAL_GPIO_Init+0x196>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800088a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800088e:	f8df e194 	ldr.w	lr, [pc, #404]	; 8000a24 <HAL_GPIO_Init+0x1a4>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000892:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000894:	2500      	movs	r5, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000896:	f04f 0801 	mov.w	r8, #1
 800089a:	e070      	b.n	800097e <HAL_GPIO_Init+0xfe>
 800089c:	ea4f 0945 	mov.w	r9, r5, lsl #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80008a0:	2303      	movs	r3, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a2:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80008a6:	fa03 f309 	lsl.w	r3, r3, r9
 80008aa:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008ac:	f004 0b03 	and.w	fp, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80008b0:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008b4:	fa0b fb09 	lsl.w	fp, fp, r9
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b8:	3f01      	subs	r7, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008ba:	ea4b 0a0a 	orr.w	sl, fp, sl
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008be:	2f01      	cmp	r7, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 80008c0:	f8c0 a000 	str.w	sl, [r0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c4:	f240 808b 	bls.w	80009de <HAL_GPIO_Init+0x15e>
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008c8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80008ca:	f8dc 2008 	ldr.w	r2, [ip, #8]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80008ce:	403b      	ands	r3, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80008d0:	fa02 f209 	lsl.w	r2, r2, r9
 80008d4:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 80008d6:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008d8:	00e3      	lsls	r3, r4, #3
 80008da:	d54c      	bpl.n	8000976 <HAL_GPIO_Init+0xf6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008dc:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <HAL_GPIO_Init+0x198>)
 80008de:	4a4e      	ldr	r2, [pc, #312]	; (8000a18 <HAL_GPIO_Init+0x198>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6613      	str	r3, [r2, #96]	; 0x60
 80008e8:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80008ea:	f025 0203 	bic.w	r2, r5, #3
 80008ee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80008fa:	9301      	str	r3, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008fc:	f005 0303 	and.w	r3, r5, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000900:	9f01      	ldr	r7, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8000902:	6897      	ldr	r7, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	f04f 090f 	mov.w	r9, #15
 800090a:	fa09 f903 	lsl.w	r9, r9, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800090e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000912:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000916:	d079      	beq.n	8000a0c <HAL_GPIO_Init+0x18c>
 8000918:	4f40      	ldr	r7, [pc, #256]	; (8000a1c <HAL_GPIO_Init+0x19c>)
 800091a:	42b8      	cmp	r0, r7
 800091c:	d078      	beq.n	8000a10 <HAL_GPIO_Init+0x190>
 800091e:	4f40      	ldr	r7, [pc, #256]	; (8000a20 <HAL_GPIO_Init+0x1a0>)
 8000920:	42b8      	cmp	r0, r7
 8000922:	bf0c      	ite	eq
 8000924:	2702      	moveq	r7, #2
 8000926:	2707      	movne	r7, #7
 8000928:	fa07 f303 	lsl.w	r3, r7, r3
 800092c:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 8000930:	6093      	str	r3, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000932:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8000936:	43f2      	mvns	r2, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000938:	03e7      	lsls	r7, r4, #15
        {
          temp |= iocurrent;
 800093a:	bf4c      	ite	mi
 800093c:	4333      	orrmi	r3, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
        temp &= ~((uint32_t)iocurrent);
 800093e:	4013      	andpl	r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8000940:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR1;
 8000944:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000948:	03a7      	lsls	r7, r4, #14
        {
          temp |= iocurrent;
 800094a:	bf4c      	ite	mi
 800094c:	4333      	orrmi	r3, r6
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;

        temp = EXTI->EMR1;
        temp &= ~((uint32_t)iocurrent);
 800094e:	4013      	andpl	r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8000950:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000954:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000958:	02e7      	lsls	r7, r4, #11
        {
          temp |= iocurrent;
 800095a:	bf4c      	ite	mi
 800095c:	4333      	orrmi	r3, r6
        }
        EXTI->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~((uint32_t)iocurrent);
 800095e:	4013      	andpl	r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8000960:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR1;
 8000964:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000968:	02a4      	lsls	r4, r4, #10
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
 800096a:	bf54      	ite	pl
 800096c:	ea02 0603 	andpl.w	r6, r2, r3
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000970:	431e      	orrmi	r6, r3
        }
        EXTI->FTSR1 = temp;
 8000972:	f8ce 600c 	str.w	r6, [lr, #12]
      }
    }
    
    position++;
 8000976:	3501      	adds	r5, #1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000978:	fa31 f305 	lsrs.w	r3, r1, r5
 800097c:	d043      	beq.n	8000a06 <HAL_GPIO_Init+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800097e:	fa08 f205 	lsl.w	r2, r8, r5

    if(iocurrent)
 8000982:	ea12 0601 	ands.w	r6, r2, r1
 8000986:	d0f6      	beq.n	8000976 <HAL_GPIO_Init+0xf6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000988:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800098c:	f024 0710 	bic.w	r7, r4, #16
 8000990:	2f02      	cmp	r7, #2
 8000992:	d183      	bne.n	800089c <HAL_GPIO_Init+0x1c>
 8000994:	ea4f 0ad5 	mov.w	sl, r5, lsr #3
 8000998:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800099c:	f005 0707 	and.w	r7, r5, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80009a0:	f8da 3020 	ldr.w	r3, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80009a4:	00bf      	lsls	r7, r7, #2
 80009a6:	f04f 090f 	mov.w	r9, #15
 80009aa:	fa09 fb07 	lsl.w	fp, r9, r7
 80009ae:	ea23 090b 	bic.w	r9, r3, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80009b2:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80009b6:	40bb      	lsls	r3, r7
 80009b8:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->AFR[position >> 3] = temp;
 80009bc:	f8ca 3020 	str.w	r3, [sl, #32]
 80009c0:	ea4f 0945 	mov.w	r9, r5, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80009c4:	2303      	movs	r3, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80009c8:	fa03 f309 	lsl.w	r3, r3, r9
 80009cc:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009ce:	f004 0a03 	and.w	sl, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80009d2:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009d4:	fa0a fa09 	lsl.w	sl, sl, r9
 80009d8:	ea4a 0707 	orr.w	r7, sl, r7
      GPIOx->MODER = temp;
 80009dc:	6007      	str	r7, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009de:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80009e0:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2));
 80009e4:	f8dc 700c 	ldr.w	r7, [ip, #12]
 80009e8:	fa07 f709 	lsl.w	r7, r7, r9
 80009ec:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80009f0:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80009f4:	f3c4 1a00 	ubfx	sl, r4, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009f8:	ea27 0702 	bic.w	r7, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80009fc:	4652      	mov	r2, sl
 80009fe:	40aa      	lsls	r2, r5
 8000a00:	433a      	orrs	r2, r7
        GPIOx->OTYPER = temp;
 8000a02:	6042      	str	r2, [r0, #4]
 8000a04:	e760      	b.n	80008c8 <HAL_GPIO_Init+0x48>
      }
    }
    
    position++;
  }
}
 8000a06:	b003      	add	sp, #12
 8000a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e78d      	b.n	800092c <HAL_GPIO_Init+0xac>
 8000a10:	fa08 f303 	lsl.w	r3, r8, r3
 8000a14:	e78a      	b.n	800092c <HAL_GPIO_Init+0xac>
 8000a16:	4770      	bx	lr
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	48000400 	.word	0x48000400
 8000a20:	48000800 	.word	0x48000800
 8000a24:	40010400 	.word	0x40010400

08000a28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a28:	b90a      	cbnz	r2, 8000a2e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a2a:	6281      	str	r1, [r0, #40]	; 0x28
 8000a2c:	4770      	bx	lr
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a2e:	6181      	str	r1, [r0, #24]
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000a34:	4b02      	ldr	r3, [pc, #8]	; (8000a40 <HAL_PWREx_GetVoltageRange+0xc>)
 8000a36:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8000a38:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40007000 	.word	0x40007000

08000a44 <HAL_PWREx_ControlVoltageScaling>:
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a44:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000a48:	d00e      	beq.n	8000a68 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000a4a:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 8000a4c:	6813      	ldr	r3, [r2, #0]
 8000a4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a56:	d005      	beq.n	8000a64 <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a58:	6813      	ldr	r3, [r2, #0]
 8000a5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8000a64:	2000      	movs	r0, #0
 8000a66:	4770      	bx	lr
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a68:	4911      	ldr	r1, [pc, #68]	; (8000ab0 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 8000a6a:	680b      	ldr	r3, [r1, #0]
 8000a6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a74:	d0f6      	beq.n	8000a64 <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a76:	6808      	ldr	r0, [r1, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000a7a:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <HAL_PWREx_ControlVoltageScaling+0x74>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a7c:	f420 60c0 	bic.w	r0, r0, #1536	; 0x600
 8000a80:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8000a84:	6008      	str	r0, [r1, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8c:	0c9a      	lsrs	r2, r3, #18
 8000a8e:	2332      	movs	r3, #50	; 0x32
 8000a90:	fb03 f302 	mul.w	r3, r3, r2
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000a94:	b913      	cbnz	r3, 8000a9c <HAL_PWREx_ControlVoltageScaling+0x58>
 8000a96:	e004      	b.n	8000aa2 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	d002      	beq.n	8000aa2 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8000a9c:	694a      	ldr	r2, [r1, #20]
 8000a9e:	0552      	lsls	r2, r2, #21
 8000aa0:	d4fa      	bmi.n	8000a98 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000aa2:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	055b      	lsls	r3, r3, #21
 8000aa8:	d5dc      	bpl.n	8000a64 <HAL_PWREx_ControlVoltageScaling+0x20>
      {
        return HAL_TIMEOUT;
 8000aaa:	2003      	movs	r0, #3
    }
  }
#endif  
  
  return HAL_OK;
}  
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40007000 	.word	0x40007000
 8000ab4:	20000004 	.word	0x20000004
 8000ab8:	431bde83 	.word	0x431bde83

08000abc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000abc:	b530      	push	{r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000abe:	4d20      	ldr	r5, [pc, #128]	; (8000b40 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8000ac0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000ac2:	00db      	lsls	r3, r3, #3
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	4604      	mov	r4, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000ac8:	d51a      	bpl.n	8000b00 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000aca:	f7ff ffb3 	bl	8000a34 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ace:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000ad2:	d027      	beq.n	8000b24 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8000ad4:	2c80      	cmp	r4, #128	; 0x80
 8000ad6:	d82c      	bhi.n	8000b32 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8000ad8:	d02f      	beq.n	8000b3a <RCC_SetFlashLatencyFromMSIRange+0x7e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000ada:	f1a4 0270 	sub.w	r2, r4, #112	; 0x70
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	0952      	lsrs	r2, r2, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000ae4:	4917      	ldr	r1, [pc, #92]	; (8000b44 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8000ae6:	680b      	ldr	r3, [r1, #0]
 8000ae8:	f023 0307 	bic.w	r3, r3, #7
 8000aec:	4313      	orrs	r3, r2
 8000aee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8000af0:	6808      	ldr	r0, [r1, #0]
 8000af2:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000af6:	1a80      	subs	r0, r0, r2
 8000af8:	bf18      	it	ne
 8000afa:	2001      	movne	r0, #1
 8000afc:	b003      	add	sp, #12
 8000afe:	bd30      	pop	{r4, r5, pc}
  {
    vos = HAL_PWREx_GetVoltageRange();
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b00:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b06:	65ab      	str	r3, [r5, #88]	; 0x58
 8000b08:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000b12:	f7ff ff8f 	bl	8000a34 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000b16:	6dab      	ldr	r3, [r5, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b18:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
 8000b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b20:	65ab      	str	r3, [r5, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b22:	d1d7      	bne.n	8000ad4 <RCC_SetFlashLatencyFromMSIRange+0x18>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000b24:	2c80      	cmp	r4, #128	; 0x80
 8000b26:	d906      	bls.n	8000b36 <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000b28:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000b2a:	bf8c      	ite	hi
 8000b2c:	2202      	movhi	r2, #2
 8000b2e:	2201      	movls	r2, #1
 8000b30:	e7d8      	b.n	8000ae4 <RCC_SetFlashLatencyFromMSIRange+0x28>
    }
#else
    if(msirange > RCC_MSIRANGE_8)
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8000b32:	2203      	movs	r2, #3
 8000b34:	e7d6      	b.n	8000ae4 <RCC_SetFlashLatencyFromMSIRange+0x28>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000b36:	2200      	movs	r2, #0
 8000b38:	e7d4      	b.n	8000ae4 <RCC_SetFlashLatencyFromMSIRange+0x28>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	e7d2      	b.n	8000ae4 <RCC_SetFlashLatencyFromMSIRange+0x28>
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40022000 	.word	0x40022000

08000b48 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000b48:	4b3a      	ldr	r3, [pc, #232]	; (8000c34 <HAL_RCC_GetSysClockFreq+0xec>)
 8000b4a:	689a      	ldr	r2, [r3, #8]
 8000b4c:	f012 0f0c 	tst.w	r2, #12
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000b50:	b430      	push	{r4, r5}
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000b52:	d039      	beq.n	8000bc8 <HAL_RCC_GetSysClockFreq+0x80>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000b54:	689a      	ldr	r2, [r3, #8]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000b56:	f002 020c 	and.w	r2, r2, #12
 8000b5a:	2a0c      	cmp	r2, #12
 8000b5c:	d02f      	beq.n	8000bbe <HAL_RCC_GetSysClockFreq+0x76>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000b5e:	4a35      	ldr	r2, [pc, #212]	; (8000c34 <HAL_RCC_GetSysClockFreq+0xec>)
 8000b60:	6893      	ldr	r3, [r2, #8]
 8000b62:	f003 030c 	and.w	r3, r3, #12
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d055      	beq.n	8000c16 <HAL_RCC_GetSysClockFreq+0xce>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000b6a:	6893      	ldr	r3, [r2, #8]
 8000b6c:	f003 030c 	and.w	r3, r3, #12
 8000b70:	2b08      	cmp	r3, #8
 8000b72:	d05c      	beq.n	8000c2e <HAL_RCC_GetSysClockFreq+0xe6>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000b74:	4c2f      	ldr	r4, [pc, #188]	; (8000c34 <HAL_RCC_GetSysClockFreq+0xec>)
 8000b76:	68a1      	ldr	r1, [r4, #8]
 8000b78:	f001 010c 	and.w	r1, r1, #12
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;
 8000b7c:	2000      	movs	r0, #0
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000b7e:	290c      	cmp	r1, #12
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000b80:	4605      	mov	r5, r0
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000b82:	d13d      	bne.n	8000c00 <HAL_RCC_GetSysClockFreq+0xb8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000b84:	68e1      	ldr	r1, [r4, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000b86:	68e2      	ldr	r2, [r4, #12]

    switch (pllsource)
 8000b88:	f001 0103 	and.w	r1, r1, #3

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000b8c:	f3c2 1202 	ubfx	r2, r2, #4, #3

    switch (pllsource)
 8000b90:	2902      	cmp	r1, #2

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000b92:	f102 0301 	add.w	r3, r2, #1

    switch (pllsource)
 8000b96:	d041      	beq.n	8000c1c <HAL_RCC_GetSysClockFreq+0xd4>
 8000b98:	2903      	cmp	r1, #3
 8000b9a:	d033      	beq.n	8000c04 <HAL_RCC_GetSysClockFreq+0xbc>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000b9c:	fbb5 f3f3 	udiv	r3, r5, r3
 8000ba0:	68e2      	ldr	r2, [r4, #12]
 8000ba2:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8000ba6:	fb03 f302 	mul.w	r3, r3, r2
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000baa:	4a22      	ldr	r2, [pc, #136]	; (8000c34 <HAL_RCC_GetSysClockFreq+0xec>)
 8000bac:	68d0      	ldr	r0, [r2, #12]
    sysclockfreq = pllvco/pllr;
 8000bae:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8000bb2:	3001      	adds	r0, #1
 8000bb4:	0040      	lsls	r0, r0, #1
  }

  return sysclockfreq;
}
 8000bb6:	bc30      	pop	{r4, r5}
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
 8000bb8:	fbb3 f0f0 	udiv	r0, r3, r0
  }

  return sysclockfreq;
}
 8000bbc:	4770      	bx	lr
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d1ca      	bne.n	8000b5e <HAL_RCC_GetSysClockFreq+0x16>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <HAL_RCC_GetSysClockFreq+0xec>)
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000bca:	491b      	ldr	r1, [pc, #108]	; (8000c38 <HAL_RCC_GetSysClockFreq+0xf0>)
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	0712      	lsls	r2, r2, #28
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000bd0:	bf54      	ite	pl
 8000bd2:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000bd6:	681b      	ldrmi	r3, [r3, #0]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8000bd8:	4a16      	ldr	r2, [pc, #88]	; (8000c34 <HAL_RCC_GetSysClockFreq+0xec>)
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000bda:	bf54      	ite	pl
 8000bdc:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000be0:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8000be4:	6892      	ldr	r2, [r2, #8]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000be6:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8000bea:	f012 0f0c 	tst.w	r2, #12
 8000bee:	bf0c      	ite	eq
 8000bf0:	4628      	moveq	r0, r5
 8000bf2:	2000      	movne	r0, #0
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000bf4:	4c0f      	ldr	r4, [pc, #60]	; (8000c34 <HAL_RCC_GetSysClockFreq+0xec>)
 8000bf6:	68a1      	ldr	r1, [r4, #8]
 8000bf8:	f001 010c 	and.w	r1, r1, #12
 8000bfc:	290c      	cmp	r1, #12
 8000bfe:	d0c1      	beq.n	8000b84 <HAL_RCC_GetSysClockFreq+0x3c>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }

  return sysclockfreq;
}
 8000c00:	bc30      	pop	{r4, r5}
 8000c02:	4770      	bx	lr
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000c04:	68e0      	ldr	r0, [r4, #12]
 8000c06:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <HAL_RCC_GetSysClockFreq+0xf4>)
 8000c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c0c:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8000c10:	fb02 f300 	mul.w	r3, r2, r0
      break;
 8000c14:	e7c9      	b.n	8000baa <HAL_RCC_GetSysClockFreq+0x62>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000c16:	480a      	ldr	r0, [pc, #40]	; (8000c40 <HAL_RCC_GetSysClockFreq+0xf8>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000c18:	2500      	movs	r5, #0
 8000c1a:	e7eb      	b.n	8000bf4 <HAL_RCC_GetSysClockFreq+0xac>
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;

    switch (pllsource)
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000c1c:	68e0      	ldr	r0, [r4, #12]
 8000c1e:	4908      	ldr	r1, [pc, #32]	; (8000c40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000c20:	fbb1 f2f3 	udiv	r2, r1, r3
 8000c24:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8000c28:	fb02 f300 	mul.w	r3, r2, r0
      break;
 8000c2c:	e7bd      	b.n	8000baa <HAL_RCC_GetSysClockFreq+0x62>
    sysclockfreq = HSI_VALUE;
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <HAL_RCC_GetSysClockFreq+0xf4>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000c30:	2500      	movs	r5, #0
 8000c32:	e7df      	b.n	8000bf4 <HAL_RCC_GetSysClockFreq+0xac>
 8000c34:	40021000 	.word	0x40021000
 8000c38:	08003b90 	.word	0x08003b90
 8000c3c:	007a1200 	.word	0x007a1200
 8000c40:	00f42400 	.word	0x00f42400

08000c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c48:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c4a:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c4c:	06d8      	lsls	r0, r3, #27
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c4e:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c50:	d557      	bpl.n	8000d02 <HAL_RCC_OscConfig+0xbe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000c52:	4bb4      	ldr	r3, [pc, #720]	; (8000f24 <HAL_RCC_OscConfig+0x2e0>)
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	f012 0f0c 	tst.w	r2, #12
 8000c5a:	f040 8157 	bne.w	8000f0c <HAL_RCC_OscConfig+0x2c8>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	0799      	lsls	r1, r3, #30
 8000c62:	d503      	bpl.n	8000c6c <HAL_RCC_OscConfig+0x28>
 8000c64:	69ab      	ldr	r3, [r5, #24]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f000 81c9 	beq.w	8000ffe <HAL_RCC_OscConfig+0x3ba>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c6c:	4bad      	ldr	r3, [pc, #692]	; (8000f24 <HAL_RCC_OscConfig+0x2e0>)
 8000c6e:	6a28      	ldr	r0, [r5, #32]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	0712      	lsls	r2, r2, #28
 8000c74:	bf56      	itet	pl
 8000c76:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8000c7a:	681b      	ldrmi	r3, [r3, #0]
 8000c7c:	091b      	lsrpl	r3, r3, #4
 8000c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c82:	4283      	cmp	r3, r0
 8000c84:	d217      	bcs.n	8000cb6 <HAL_RCC_OscConfig+0x72>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c86:	f7ff ff19 	bl	8000abc <RCC_SetFlashLatencyFromMSIRange>
 8000c8a:	2800      	cmp	r0, #0
 8000c8c:	f040 81b7 	bne.w	8000ffe <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_ERROR;
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c90:	4ba4      	ldr	r3, [pc, #656]	; (8000f24 <HAL_RCC_OscConfig+0x2e0>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	f042 0208 	orr.w	r2, r2, #8
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	6819      	ldr	r1, [r3, #0]
 8000c9c:	6a2a      	ldr	r2, [r5, #32]
 8000c9e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	69e9      	ldr	r1, [r5, #28]
 8000caa:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000cae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	e015      	b.n	8000ce2 <HAL_RCC_OscConfig+0x9e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cb6:	4b9b      	ldr	r3, [pc, #620]	; (8000f24 <HAL_RCC_OscConfig+0x2e0>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	f042 0208 	orr.w	r2, r2, #8
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cc6:	4302      	orrs	r2, r0
 8000cc8:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	69e9      	ldr	r1, [r5, #28]
 8000cce:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000cd2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000cd6:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cd8:	f7ff fef0 	bl	8000abc <RCC_SetFlashLatencyFromMSIRange>
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	f040 818e 	bne.w	8000ffe <HAL_RCC_OscConfig+0x3ba>
            return HAL_ERROR;
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000ce2:	f7ff ff31 	bl	8000b48 <HAL_RCC_GetSysClockFreq>
 8000ce6:	4b8f      	ldr	r3, [pc, #572]	; (8000f24 <HAL_RCC_OscConfig+0x2e0>)
 8000ce8:	498f      	ldr	r1, [pc, #572]	; (8000f28 <HAL_RCC_OscConfig+0x2e4>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	4a8f      	ldr	r2, [pc, #572]	; (8000f2c <HAL_RCC_OscConfig+0x2e8>)
 8000cee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cf2:	5ccb      	ldrb	r3, [r1, r3]
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8000cf8:	200f      	movs	r0, #15
            return HAL_ERROR;
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000cfa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8000cfc:	f7ff fbf4 	bl	80004e8 <HAL_InitTick>
 8000d00:	682b      	ldr	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d02:	07d9      	lsls	r1, r3, #31
 8000d04:	d52f      	bpl.n	8000d66 <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000d06:	4987      	ldr	r1, [pc, #540]	; (8000f24 <HAL_RCC_OscConfig+0x2e0>)
 8000d08:	688a      	ldr	r2, [r1, #8]
 8000d0a:	f002 020c 	and.w	r2, r2, #12
 8000d0e:	2a08      	cmp	r2, #8
 8000d10:	f000 816c 	beq.w	8000fec <HAL_RCC_OscConfig+0x3a8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d14:	688a      	ldr	r2, [r1, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000d16:	f002 020c 	and.w	r2, r2, #12
 8000d1a:	2a0c      	cmp	r2, #12
 8000d1c:	f000 8160 	beq.w	8000fe0 <HAL_RCC_OscConfig+0x39c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d20:	686b      	ldr	r3, [r5, #4]
 8000d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d26:	f000 816e 	beq.w	8001006 <HAL_RCC_OscConfig+0x3c2>
 8000d2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d2e:	f000 81dc 	beq.w	80010ea <HAL_RCC_OscConfig+0x4a6>
 8000d32:	4c7c      	ldr	r4, [pc, #496]	; (8000f24 <HAL_RCC_OscConfig+0x2e0>)
 8000d34:	6822      	ldr	r2, [r4, #0]
 8000d36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d3a:	6022      	str	r2, [r4, #0]
 8000d3c:	6822      	ldr	r2, [r4, #0]
 8000d3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d42:	6022      	str	r2, [r4, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f040 8163 	bne.w	8001010 <HAL_RCC_OscConfig+0x3cc>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d4a:	f7ff fbf7 	bl	800053c <HAL_GetTick>
 8000d4e:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000d50:	e005      	b.n	8000d5e <HAL_RCC_OscConfig+0x11a>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d52:	f7ff fbf3 	bl	800053c <HAL_GetTick>
 8000d56:	1b80      	subs	r0, r0, r6
 8000d58:	2864      	cmp	r0, #100	; 0x64
 8000d5a:	f200 818d 	bhi.w	8001078 <HAL_RCC_OscConfig+0x434>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000d5e:	6823      	ldr	r3, [r4, #0]
 8000d60:	039f      	lsls	r7, r3, #14
 8000d62:	d4f6      	bmi.n	8000d52 <HAL_RCC_OscConfig+0x10e>
 8000d64:	682b      	ldr	r3, [r5, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d66:	079e      	lsls	r6, r3, #30
 8000d68:	d52b      	bpl.n	8000dc2 <HAL_RCC_OscConfig+0x17e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000d6a:	496e      	ldr	r1, [pc, #440]	; (8000f24 <HAL_RCC_OscConfig+0x2e0>)
 8000d6c:	688a      	ldr	r2, [r1, #8]
 8000d6e:	f002 020c 	and.w	r2, r2, #12
 8000d72:	2a04      	cmp	r2, #4
 8000d74:	f000 8160 	beq.w	8001038 <HAL_RCC_OscConfig+0x3f4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d78:	688a      	ldr	r2, [r1, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000d7a:	f002 020c 	and.w	r2, r2, #12
 8000d7e:	2a0c      	cmp	r2, #12
 8000d80:	f000 8154 	beq.w	800102c <HAL_RCC_OscConfig+0x3e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d84:	68eb      	ldr	r3, [r5, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d86:	4c67      	ldr	r4, [pc, #412]	; (8000f24 <HAL_RCC_OscConfig+0x2e0>)
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f000 8117 	beq.w	8000fbc <HAL_RCC_OscConfig+0x378>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d8e:	6823      	ldr	r3, [r4, #0]
 8000d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d94:	6023      	str	r3, [r4, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d96:	f7ff fbd1 	bl	800053c <HAL_GetTick>
 8000d9a:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000d9c:	e005      	b.n	8000daa <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d9e:	f7ff fbcd 	bl	800053c <HAL_GetTick>
 8000da2:	1b80      	subs	r0, r0, r6
 8000da4:	2802      	cmp	r0, #2
 8000da6:	f200 8167 	bhi.w	8001078 <HAL_RCC_OscConfig+0x434>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	4a5d      	ldr	r2, [pc, #372]	; (8000f24 <HAL_RCC_OscConfig+0x2e0>)
 8000dae:	0558      	lsls	r0, r3, #21
 8000db0:	d5f5      	bpl.n	8000d9e <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db2:	6853      	ldr	r3, [r2, #4]
 8000db4:	6929      	ldr	r1, [r5, #16]
 8000db6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000dba:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000dbe:	6053      	str	r3, [r2, #4]
 8000dc0:	682b      	ldr	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dc2:	071a      	lsls	r2, r3, #28
 8000dc4:	d519      	bpl.n	8000dfa <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dc6:	696b      	ldr	r3, [r5, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dc8:	4c56      	ldr	r4, [pc, #344]	; (8000f24 <HAL_RCC_OscConfig+0x2e0>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 80e2 	beq.w	8000f94 <HAL_RCC_OscConfig+0x350>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dd0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ddc:	f7ff fbae 	bl	800053c <HAL_GetTick>
 8000de0:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000de2:	e005      	b.n	8000df0 <HAL_RCC_OscConfig+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de4:	f7ff fbaa 	bl	800053c <HAL_GetTick>
 8000de8:	1b80      	subs	r0, r0, r6
 8000dea:	2802      	cmp	r0, #2
 8000dec:	f200 8144 	bhi.w	8001078 <HAL_RCC_OscConfig+0x434>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000df0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000df4:	079b      	lsls	r3, r3, #30
 8000df6:	d5f5      	bpl.n	8000de4 <HAL_RCC_OscConfig+0x1a0>
 8000df8:	682b      	ldr	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dfa:	0758      	lsls	r0, r3, #29
 8000dfc:	d53f      	bpl.n	8000e7e <HAL_RCC_OscConfig+0x23a>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000dfe:	4b49      	ldr	r3, [pc, #292]	; (8000f24 <HAL_RCC_OscConfig+0x2e0>)
 8000e00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e02:	00d1      	lsls	r1, r2, #3
 8000e04:	f100 813c 	bmi.w	8001080 <HAL_RCC_OscConfig+0x43c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e0e:	659a      	str	r2, [r3, #88]	; 0x58
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e1a:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e1c:	4c44      	ldr	r4, [pc, #272]	; (8000f30 <HAL_RCC_OscConfig+0x2ec>)
 8000e1e:	6823      	ldr	r3, [r4, #0]
 8000e20:	05da      	lsls	r2, r3, #23
 8000e22:	f140 8119 	bpl.w	8001058 <HAL_RCC_OscConfig+0x414>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e26:	68ab      	ldr	r3, [r5, #8]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	f000 8170 	beq.w	800110e <HAL_RCC_OscConfig+0x4ca>
 8000e2e:	2b05      	cmp	r3, #5
 8000e30:	f000 8128 	beq.w	8001084 <HAL_RCC_OscConfig+0x440>
 8000e34:	4c3b      	ldr	r4, [pc, #236]	; (8000f24 <HAL_RCC_OscConfig+0x2e0>)
 8000e36:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000e3a:	f022 0201 	bic.w	r2, r2, #1
 8000e3e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000e42:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000e46:	f022 0204 	bic.w	r2, r2, #4
 8000e4a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8125 	bne.w	800109e <HAL_RCC_OscConfig+0x45a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e54:	f7ff fb72 	bl	800053c <HAL_GetTick>

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e58:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e5c:	4680      	mov	r8, r0

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8000e5e:	e006      	b.n	8000e6e <HAL_RCC_OscConfig+0x22a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e60:	f7ff fb6c 	bl	800053c <HAL_GetTick>
 8000e64:	ebc8 0000 	rsb	r0, r8, r0
 8000e68:	42b8      	cmp	r0, r7
 8000e6a:	f200 8105 	bhi.w	8001078 <HAL_RCC_OscConfig+0x434>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8000e6e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000e72:	0799      	lsls	r1, r3, #30
 8000e74:	d4f4      	bmi.n	8000e60 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	f040 8151 	bne.w	800111e <HAL_RCC_OscConfig+0x4da>
 8000e7c:	682b      	ldr	r3, [r5, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e7e:	069a      	lsls	r2, r3, #26
 8000e80:	d518      	bpl.n	8000eb4 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000e82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000e84:	4c27      	ldr	r4, [pc, #156]	; (8000f24 <HAL_RCC_OscConfig+0x2e0>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 811b 	beq.w	80010c2 <HAL_RCC_OscConfig+0x47e>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000e8c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e98:	f7ff fb50 	bl	800053c <HAL_GetTick>
 8000e9c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8000e9e:	e005      	b.n	8000eac <HAL_RCC_OscConfig+0x268>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000ea0:	f7ff fb4c 	bl	800053c <HAL_GetTick>
 8000ea4:	1b80      	subs	r0, r0, r6
 8000ea6:	2802      	cmp	r0, #2
 8000ea8:	f200 80e6 	bhi.w	8001078 <HAL_RCC_OscConfig+0x434>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8000eac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000eb0:	079b      	lsls	r3, r3, #30
 8000eb2:	d5f5      	bpl.n	8000ea0 <HAL_RCC_OscConfig+0x25c>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000eb4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000eb6:	b32a      	cbz	r2, 8000f04 <HAL_RCC_OscConfig+0x2c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_RCC_OscConfig+0x2e0>)
 8000eba:	6899      	ldr	r1, [r3, #8]
 8000ebc:	f001 010c 	and.w	r1, r1, #12
 8000ec0:	290c      	cmp	r1, #12
 8000ec2:	f000 809c 	beq.w	8000ffe <HAL_RCC_OscConfig+0x3ba>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000ec6:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000ece:	601a      	str	r2, [r3, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000ed0:	f000 812b 	beq.w	800112a <HAL_RCC_OscConfig+0x4e6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	f140 8114 	bpl.w	8001104 <HAL_RCC_OscConfig+0x4c0>
        }

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8000edc:	4c11      	ldr	r4, [pc, #68]	; (8000f24 <HAL_RCC_OscConfig+0x2e0>)
 8000ede:	68e3      	ldr	r3, [r4, #12]
 8000ee0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee8:	60e3      	str	r3, [r4, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eea:	f7ff fb27 	bl	800053c <HAL_GetTick>
 8000eee:	4605      	mov	r5, r0

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000ef0:	e005      	b.n	8000efe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ef2:	f7ff fb23 	bl	800053c <HAL_GetTick>
 8000ef6:	1b40      	subs	r0, r0, r5
 8000ef8:	2802      	cmp	r0, #2
 8000efa:	f200 80bd 	bhi.w	8001078 <HAL_RCC_OscConfig+0x434>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	019b      	lsls	r3, r3, #6
 8000f02:	d4f6      	bmi.n	8000ef2 <HAL_RCC_OscConfig+0x2ae>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000f04:	2000      	movs	r0, #0
}
 8000f06:	b002      	add	sp, #8
 8000f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f0c:	69aa      	ldr	r2, [r5, #24]
 8000f0e:	b372      	cbz	r2, 8000f6e <HAL_RCC_OscConfig+0x32a>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	f042 0201 	orr.w	r2, r2, #1
 8000f16:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000f18:	461c      	mov	r4, r3
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f1a:	f7ff fb0f 	bl	800053c <HAL_GetTick>
 8000f1e:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000f20:	e00e      	b.n	8000f40 <HAL_RCC_OscConfig+0x2fc>
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	08003b78 	.word	0x08003b78
 8000f2c:	20000004 	.word	0x20000004
 8000f30:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f34:	f7ff fb02 	bl	800053c <HAL_GetTick>
 8000f38:	1b80      	subs	r0, r0, r6
 8000f3a:	2802      	cmp	r0, #2
 8000f3c:	f200 809c 	bhi.w	8001078 <HAL_RCC_OscConfig+0x434>

        /* Get timeout */
        tickstart = HAL_GetTick();

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000f40:	6823      	ldr	r3, [r4, #0]
 8000f42:	4a97      	ldr	r2, [pc, #604]	; (80011a0 <HAL_RCC_OscConfig+0x55c>)
 8000f44:	079f      	lsls	r7, r3, #30
 8000f46:	d5f5      	bpl.n	8000f34 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f48:	6813      	ldr	r3, [r2, #0]
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	6811      	ldr	r1, [r2, #0]
 8000f52:	6a2b      	ldr	r3, [r5, #32]
 8000f54:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8000f58:	430b      	orrs	r3, r1
 8000f5a:	6013      	str	r3, [r2, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f5c:	6853      	ldr	r3, [r2, #4]
 8000f5e:	69e9      	ldr	r1, [r5, #28]
 8000f60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f64:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000f68:	6053      	str	r3, [r2, #4]
 8000f6a:	682b      	ldr	r3, [r5, #0]
 8000f6c:	e6c9      	b.n	8000d02 <HAL_RCC_OscConfig+0xbe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	f022 0201 	bic.w	r2, r2, #1
 8000f74:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000f76:	461c      	mov	r4, r3
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f78:	f7ff fae0 	bl	800053c <HAL_GetTick>
 8000f7c:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000f7e:	e004      	b.n	8000f8a <HAL_RCC_OscConfig+0x346>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f80:	f7ff fadc 	bl	800053c <HAL_GetTick>
 8000f84:	1b80      	subs	r0, r0, r6
 8000f86:	2802      	cmp	r0, #2
 8000f88:	d876      	bhi.n	8001078 <HAL_RCC_OscConfig+0x434>

        /* Get timeout */
        tickstart = HAL_GetTick();

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	0798      	lsls	r0, r3, #30
 8000f8e:	d4f7      	bmi.n	8000f80 <HAL_RCC_OscConfig+0x33c>
 8000f90:	682b      	ldr	r3, [r5, #0]
 8000f92:	e6b6      	b.n	8000d02 <HAL_RCC_OscConfig+0xbe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f94:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000f98:	f023 0301 	bic.w	r3, r3, #1
 8000f9c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fa0:	f7ff facc 	bl	800053c <HAL_GetTick>
 8000fa4:	4606      	mov	r6, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000fa6:	e004      	b.n	8000fb2 <HAL_RCC_OscConfig+0x36e>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa8:	f7ff fac8 	bl	800053c <HAL_GetTick>
 8000fac:	1b80      	subs	r0, r0, r6
 8000fae:	2802      	cmp	r0, #2
 8000fb0:	d862      	bhi.n	8001078 <HAL_RCC_OscConfig+0x434>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000fb2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000fb6:	079f      	lsls	r7, r3, #30
 8000fb8:	d4f6      	bmi.n	8000fa8 <HAL_RCC_OscConfig+0x364>
 8000fba:	e71d      	b.n	8000df8 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fbc:	6823      	ldr	r3, [r4, #0]
 8000fbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fc2:	6023      	str	r3, [r4, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc4:	f7ff faba 	bl	800053c <HAL_GetTick>
 8000fc8:	4606      	mov	r6, r0

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000fca:	e004      	b.n	8000fd6 <HAL_RCC_OscConfig+0x392>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fab6 	bl	800053c <HAL_GetTick>
 8000fd0:	1b80      	subs	r0, r0, r6
 8000fd2:	2802      	cmp	r0, #2
 8000fd4:	d850      	bhi.n	8001078 <HAL_RCC_OscConfig+0x434>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000fd6:	6823      	ldr	r3, [r4, #0]
 8000fd8:	0559      	lsls	r1, r3, #21
 8000fda:	d4f7      	bmi.n	8000fcc <HAL_RCC_OscConfig+0x388>
 8000fdc:	682b      	ldr	r3, [r5, #0]
 8000fde:	e6f0      	b.n	8000dc2 <HAL_RCC_OscConfig+0x17e>
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe0:	68ca      	ldr	r2, [r1, #12]
 8000fe2:	f002 0203 	and.w	r2, r2, #3
 8000fe6:	2a03      	cmp	r2, #3
 8000fe8:	f47f ae9a 	bne.w	8000d20 <HAL_RCC_OscConfig+0xdc>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fec:	4a6c      	ldr	r2, [pc, #432]	; (80011a0 <HAL_RCC_OscConfig+0x55c>)
 8000fee:	6812      	ldr	r2, [r2, #0]
 8000ff0:	0392      	lsls	r2, r2, #14
 8000ff2:	f57f aeb8 	bpl.w	8000d66 <HAL_RCC_OscConfig+0x122>
 8000ff6:	686a      	ldr	r2, [r5, #4]
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	f47f aeb4 	bne.w	8000d66 <HAL_RCC_OscConfig+0x122>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000ffe:	2001      	movs	r0, #1
    }
  }
  return HAL_OK;
}
 8001000:	b002      	add	sp, #8
 8001002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001006:	4a66      	ldr	r2, [pc, #408]	; (80011a0 <HAL_RCC_OscConfig+0x55c>)
 8001008:	6813      	ldr	r3, [r2, #0]
 800100a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001010:	f7ff fa94 	bl	800053c <HAL_GetTick>

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001014:	4c62      	ldr	r4, [pc, #392]	; (80011a0 <HAL_RCC_OscConfig+0x55c>)

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001016:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001018:	e004      	b.n	8001024 <HAL_RCC_OscConfig+0x3e0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800101a:	f7ff fa8f 	bl	800053c <HAL_GetTick>
 800101e:	1b80      	subs	r0, r0, r6
 8001020:	2864      	cmp	r0, #100	; 0x64
 8001022:	d829      	bhi.n	8001078 <HAL_RCC_OscConfig+0x434>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001024:	6823      	ldr	r3, [r4, #0]
 8001026:	039b      	lsls	r3, r3, #14
 8001028:	d5f7      	bpl.n	800101a <HAL_RCC_OscConfig+0x3d6>
 800102a:	e69b      	b.n	8000d64 <HAL_RCC_OscConfig+0x120>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800102c:	68ca      	ldr	r2, [r1, #12]
 800102e:	f002 0203 	and.w	r2, r2, #3
 8001032:	2a02      	cmp	r2, #2
 8001034:	f47f aea6 	bne.w	8000d84 <HAL_RCC_OscConfig+0x140>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001038:	4a59      	ldr	r2, [pc, #356]	; (80011a0 <HAL_RCC_OscConfig+0x55c>)
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	0554      	lsls	r4, r2, #21
 800103e:	d502      	bpl.n	8001046 <HAL_RCC_OscConfig+0x402>
 8001040:	68ea      	ldr	r2, [r5, #12]
 8001042:	2a00      	cmp	r2, #0
 8001044:	d0db      	beq.n	8000ffe <HAL_RCC_OscConfig+0x3ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001046:	4956      	ldr	r1, [pc, #344]	; (80011a0 <HAL_RCC_OscConfig+0x55c>)
 8001048:	6928      	ldr	r0, [r5, #16]
 800104a:	684a      	ldr	r2, [r1, #4]
 800104c:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 8001050:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001054:	604a      	str	r2, [r1, #4]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001056:	e6b4      	b.n	8000dc2 <HAL_RCC_OscConfig+0x17e>
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105e:	6023      	str	r3, [r4, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001060:	f7ff fa6c 	bl	800053c <HAL_GetTick>
 8001064:	4607      	mov	r7, r0

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	05db      	lsls	r3, r3, #23
 800106a:	f53f aedc 	bmi.w	8000e26 <HAL_RCC_OscConfig+0x1e2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800106e:	f7ff fa65 	bl	800053c <HAL_GetTick>
 8001072:	1bc0      	subs	r0, r0, r7
 8001074:	2802      	cmp	r0, #2
 8001076:	d9f6      	bls.n	8001066 <HAL_RCC_OscConfig+0x422>
        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001078:	2003      	movs	r0, #3
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800107a:	b002      	add	sp, #8
 800107c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8001080:	2600      	movs	r6, #0
 8001082:	e6cb      	b.n	8000e1c <HAL_RCC_OscConfig+0x1d8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001084:	4b46      	ldr	r3, [pc, #280]	; (80011a0 <HAL_RCC_OscConfig+0x55c>)
 8001086:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800108a:	f042 0204 	orr.w	r2, r2, #4
 800108e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001092:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001096:	f042 0201 	orr.w	r2, r2, #1
 800109a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109e:	f7ff fa4d 	bl	800053c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80010a2:	4c3f      	ldr	r4, [pc, #252]	; (80011a0 <HAL_RCC_OscConfig+0x55c>)

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a4:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a6:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80010aa:	e005      	b.n	80010b8 <HAL_RCC_OscConfig+0x474>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ac:	f7ff fa46 	bl	800053c <HAL_GetTick>
 80010b0:	ebc8 0000 	rsb	r0, r8, r0
 80010b4:	42b8      	cmp	r0, r7
 80010b6:	d8df      	bhi.n	8001078 <HAL_RCC_OscConfig+0x434>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80010b8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80010bc:	0798      	lsls	r0, r3, #30
 80010be:	d5f5      	bpl.n	80010ac <HAL_RCC_OscConfig+0x468>
 80010c0:	e6d9      	b.n	8000e76 <HAL_RCC_OscConfig+0x232>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80010c2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80010c6:	f023 0301 	bic.w	r3, r3, #1
 80010ca:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ce:	f7ff fa35 	bl	800053c <HAL_GetTick>
 80010d2:	4606      	mov	r6, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 80010d4:	e004      	b.n	80010e0 <HAL_RCC_OscConfig+0x49c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010d6:	f7ff fa31 	bl	800053c <HAL_GetTick>
 80010da:	1b80      	subs	r0, r0, r6
 80010dc:	2802      	cmp	r0, #2
 80010de:	d8cb      	bhi.n	8001078 <HAL_RCC_OscConfig+0x434>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 80010e0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80010e4:	079f      	lsls	r7, r3, #30
 80010e6:	d4f6      	bmi.n	80010d6 <HAL_RCC_OscConfig+0x492>
 80010e8:	e6e4      	b.n	8000eb4 <HAL_RCC_OscConfig+0x270>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010ee:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	e785      	b.n	8001010 <HAL_RCC_OscConfig+0x3cc>
           &&
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	f022 0203 	bic.w	r2, r2, #3
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	e6e6      	b.n	8000edc <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110e:	4a24      	ldr	r2, [pc, #144]	; (80011a0 <HAL_RCC_OscConfig+0x55c>)
 8001110:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800111c:	e7bf      	b.n	800109e <HAL_RCC_OscConfig+0x45a>
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800111e:	4a20      	ldr	r2, [pc, #128]	; (80011a0 <HAL_RCC_OscConfig+0x55c>)
 8001120:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001126:	6593      	str	r3, [r2, #88]	; 0x58
 8001128:	e6a8      	b.n	8000e7c <HAL_RCC_OscConfig+0x238>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800112a:	461c      	mov	r4, r3

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112c:	f7ff fa06 	bl	800053c <HAL_GetTick>
 8001130:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001132:	e004      	b.n	800113e <HAL_RCC_OscConfig+0x4fa>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001134:	f7ff fa02 	bl	800053c <HAL_GetTick>
 8001138:	1b80      	subs	r0, r0, r6
 800113a:	2802      	cmp	r0, #2
 800113c:	d89c      	bhi.n	8001078 <HAL_RCC_OscConfig+0x434>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800113e:	6823      	ldr	r3, [r4, #0]
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <HAL_RCC_OscConfig+0x55c>)
 8001142:	0198      	lsls	r0, r3, #6
 8001144:	d4f6      	bmi.n	8001134 <HAL_RCC_OscConfig+0x4f0>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001146:	f105 032c 	add.w	r3, r5, #44	; 0x2c
 800114a:	cbc8      	ldmia	r3, {r3, r6, r7}
 800114c:	6bac      	ldr	r4, [r5, #56]	; 0x38
 800114e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8001150:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001152:	06e4      	lsls	r4, r4, #27
 8001154:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
 8001158:	4323      	orrs	r3, r4
 800115a:	0840      	lsrs	r0, r0, #1
 800115c:	1e74      	subs	r4, r6, #1
 800115e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8001162:	3801      	subs	r0, #1
 8001164:	0849      	lsrs	r1, r1, #1
 8001166:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 800116a:	3901      	subs	r1, #1
 800116c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001170:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001172:	6813      	ldr	r3, [r2, #0]
 8001174:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001178:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800117a:	68d3      	ldr	r3, [r2, #12]
 800117c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001180:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001182:	4614      	mov	r4, r2

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001184:	f7ff f9da 	bl	800053c <HAL_GetTick>
 8001188:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800118a:	e005      	b.n	8001198 <HAL_RCC_OscConfig+0x554>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800118c:	f7ff f9d6 	bl	800053c <HAL_GetTick>
 8001190:	1b40      	subs	r0, r0, r5
 8001192:	2802      	cmp	r0, #2
 8001194:	f63f af70 	bhi.w	8001078 <HAL_RCC_OscConfig+0x434>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	0199      	lsls	r1, r3, #6
 800119c:	d5f6      	bpl.n	800118c <HAL_RCC_OscConfig+0x548>
 800119e:	e6b1      	b.n	8000f04 <HAL_RCC_OscConfig+0x2c0>
 80011a0:	40021000 	.word	0x40021000

080011a4 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 80011a4:	4a56      	ldr	r2, [pc, #344]	; (8001300 <HAL_RCC_ClockConfig+0x15c>)
 80011a6:	6813      	ldr	r3, [r2, #0]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 80011b2:	d20c      	bcs.n	80011ce <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b4:	6813      	ldr	r3, [r2, #0]
 80011b6:	f023 0307 	bic.w	r3, r3, #7
 80011ba:	430b      	orrs	r3, r1
 80011bc:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 80011be:	6813      	ldr	r3, [r2, #0]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	4299      	cmp	r1, r3
 80011c6:	d002      	beq.n	80011ce <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 80011c8:	2001      	movs	r0, #1
 80011ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ce:	6803      	ldr	r3, [r0, #0]
 80011d0:	460c      	mov	r4, r1
 80011d2:	07d9      	lsls	r1, r3, #31
 80011d4:	4605      	mov	r5, r0
 80011d6:	d43d      	bmi.n	8001254 <HAL_RCC_ClockConfig+0xb0>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d8:	0799      	lsls	r1, r3, #30
 80011da:	d506      	bpl.n	80011ea <HAL_RCC_ClockConfig+0x46>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011dc:	4849      	ldr	r0, [pc, #292]	; (8001304 <HAL_RCC_ClockConfig+0x160>)
 80011de:	68aa      	ldr	r2, [r5, #8]
 80011e0:	6881      	ldr	r1, [r0, #8]
 80011e2:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80011e6:	430a      	orrs	r2, r1
 80011e8:	6082      	str	r2, [r0, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 80011ea:	4945      	ldr	r1, [pc, #276]	; (8001300 <HAL_RCC_ClockConfig+0x15c>)
 80011ec:	680a      	ldr	r2, [r1, #0]
 80011ee:	f002 0207 	and.w	r2, r2, #7
 80011f2:	4294      	cmp	r4, r2
 80011f4:	d209      	bcs.n	800120a <HAL_RCC_ClockConfig+0x66>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	680a      	ldr	r2, [r1, #0]
 80011f8:	f022 0207 	bic.w	r2, r2, #7
 80011fc:	4322      	orrs	r2, r4
 80011fe:	600a      	str	r2, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001200:	680a      	ldr	r2, [r1, #0]
 8001202:	f002 0207 	and.w	r2, r2, #7
 8001206:	4294      	cmp	r4, r2
 8001208:	d1de      	bne.n	80011c8 <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120a:	075a      	lsls	r2, r3, #29
 800120c:	d506      	bpl.n	800121c <HAL_RCC_ClockConfig+0x78>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800120e:	483d      	ldr	r0, [pc, #244]	; (8001304 <HAL_RCC_ClockConfig+0x160>)
 8001210:	68ea      	ldr	r2, [r5, #12]
 8001212:	6881      	ldr	r1, [r0, #8]
 8001214:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8001218:	430a      	orrs	r2, r1
 800121a:	6082      	str	r2, [r0, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800121c:	071b      	lsls	r3, r3, #28
 800121e:	d507      	bpl.n	8001230 <HAL_RCC_ClockConfig+0x8c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001220:	4a38      	ldr	r2, [pc, #224]	; (8001304 <HAL_RCC_ClockConfig+0x160>)
 8001222:	6929      	ldr	r1, [r5, #16]
 8001224:	6893      	ldr	r3, [r2, #8]
 8001226:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800122a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800122e:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001230:	f7ff fc8a 	bl	8000b48 <HAL_RCC_GetSysClockFreq>
 8001234:	4b33      	ldr	r3, [pc, #204]	; (8001304 <HAL_RCC_ClockConfig+0x160>)
 8001236:	4934      	ldr	r1, [pc, #208]	; (8001308 <HAL_RCC_ClockConfig+0x164>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	4a34      	ldr	r2, [pc, #208]	; (800130c <HAL_RCC_ClockConfig+0x168>)
 800123c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001240:	5ccb      	ldrb	r3, [r1, r3]
 8001242:	fa20 f303 	lsr.w	r3, r0, r3

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001246:	200f      	movs	r0, #15
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800124a:	f7ff f94d 	bl	80004e8 <HAL_InitTick>

  return HAL_OK;
 800124e:	2000      	movs	r0, #0
}
 8001250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001254:	6843      	ldr	r3, [r0, #4]
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001256:	4a2b      	ldr	r2, [pc, #172]	; (8001304 <HAL_RCC_ClockConfig+0x160>)
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001258:	2b03      	cmp	r3, #3
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800125a:	6812      	ldr	r2, [r2, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800125c:	d049      	beq.n	80012f2 <HAL_RCC_ClockConfig+0x14e>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125e:	2b02      	cmp	r3, #2
 8001260:	d041      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x142>
        {
          return HAL_ERROR;
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001262:	2b00      	cmp	r3, #0
 8001264:	d148      	bne.n	80012f8 <HAL_RCC_ClockConfig+0x154>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001266:	0796      	lsls	r6, r2, #30
 8001268:	d5ae      	bpl.n	80011c8 <HAL_RCC_ClockConfig+0x24>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800126a:	4e26      	ldr	r6, [pc, #152]	; (8001304 <HAL_RCC_ClockConfig+0x160>)
 800126c:	68b2      	ldr	r2, [r6, #8]
 800126e:	f022 0203 	bic.w	r2, r2, #3
 8001272:	4313      	orrs	r3, r2
 8001274:	60b3      	str	r3, [r6, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001276:	f7ff f961 	bl	800053c <HAL_GetTick>

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800127a:	686b      	ldr	r3, [r5, #4]
 800127c:	2b03      	cmp	r3, #3
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800127e:	4607      	mov	r7, r0

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001280:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001284:	d013      	beq.n	80012ae <HAL_RCC_ClockConfig+0x10a>
        }
      }
    }
    else
    {
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001286:	2b02      	cmp	r3, #2
 8001288:	d027      	beq.n	80012da <HAL_RCC_ClockConfig+0x136>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800128a:	b9db      	cbnz	r3, 80012c4 <HAL_RCC_ClockConfig+0x120>
 800128c:	e004      	b.n	8001298 <HAL_RCC_ClockConfig+0xf4>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
        {
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800128e:	f7ff f955 	bl	800053c <HAL_GetTick>
 8001292:	1bc0      	subs	r0, r0, r7
 8001294:	4540      	cmp	r0, r8
 8001296:	d829      	bhi.n	80012ec <HAL_RCC_ClockConfig+0x148>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8001298:	68b3      	ldr	r3, [r6, #8]
 800129a:	f013 0f0c 	tst.w	r3, #12
 800129e:	d1f6      	bne.n	800128e <HAL_RCC_ClockConfig+0xea>
 80012a0:	682b      	ldr	r3, [r5, #0]
 80012a2:	e799      	b.n	80011d8 <HAL_RCC_ClockConfig+0x34>

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a4:	f7ff f94a 	bl	800053c <HAL_GetTick>
 80012a8:	1bc0      	subs	r0, r0, r7
 80012aa:	4540      	cmp	r0, r8
 80012ac:	d81e      	bhi.n	80012ec <HAL_RCC_ClockConfig+0x148>
    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012ae:	68b3      	ldr	r3, [r6, #8]
 80012b0:	f003 030c 	and.w	r3, r3, #12
 80012b4:	2b0c      	cmp	r3, #12
 80012b6:	d1f5      	bne.n	80012a4 <HAL_RCC_ClockConfig+0x100>
 80012b8:	e7f2      	b.n	80012a0 <HAL_RCC_ClockConfig+0xfc>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ba:	f7ff f93f 	bl	800053c <HAL_GetTick>
 80012be:	1bc0      	subs	r0, r0, r7
 80012c0:	4540      	cmp	r0, r8
 80012c2:	d813      	bhi.n	80012ec <HAL_RCC_ClockConfig+0x148>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80012c4:	68b3      	ldr	r3, [r6, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d1f5      	bne.n	80012ba <HAL_RCC_ClockConfig+0x116>
 80012ce:	e7e7      	b.n	80012a0 <HAL_RCC_ClockConfig+0xfc>
    {
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
        {
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d0:	f7ff f934 	bl	800053c <HAL_GetTick>
 80012d4:	1bc0      	subs	r0, r0, r7
 80012d6:	4540      	cmp	r0, r8
 80012d8:	d808      	bhi.n	80012ec <HAL_RCC_ClockConfig+0x148>
    }
    else
    {
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80012da:	68b3      	ldr	r3, [r6, #8]
 80012dc:	f003 030c 	and.w	r3, r3, #12
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d1f5      	bne.n	80012d0 <HAL_RCC_ClockConfig+0x12c>
 80012e4:	e7dc      	b.n	80012a0 <HAL_RCC_ClockConfig+0xfc>
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80012e6:	0397      	lsls	r7, r2, #14
 80012e8:	d4bf      	bmi.n	800126a <HAL_RCC_ClockConfig+0xc6>
 80012ea:	e76d      	b.n	80011c8 <HAL_RCC_ClockConfig+0x24>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80012ec:	2003      	movs	r0, #3
 80012ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80012f2:	0192      	lsls	r2, r2, #6
 80012f4:	d4b9      	bmi.n	800126a <HAL_RCC_ClockConfig+0xc6>
 80012f6:	e767      	b.n	80011c8 <HAL_RCC_ClockConfig+0x24>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80012f8:	0550      	lsls	r0, r2, #21
 80012fa:	f57f af65 	bpl.w	80011c8 <HAL_RCC_ClockConfig+0x24>
 80012fe:	e7b4      	b.n	800126a <HAL_RCC_ClockConfig+0xc6>
 8001300:	40022000 	.word	0x40022000
 8001304:	40021000 	.word	0x40021000
 8001308:	08003b78 	.word	0x08003b78
 800130c:	20000004 	.word	0x20000004

08001310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001310:	4b01      	ldr	r3, [pc, #4]	; (8001318 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <HAL_RCC_GetPCLK1Freq+0x14>)
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001320:	689b      	ldr	r3, [r3, #8]
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001322:	4905      	ldr	r1, [pc, #20]	; (8001338 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001324:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001328:	6808      	ldr	r0, [r1, #0]
 800132a:	5cd3      	ldrb	r3, [r2, r3]
}
 800132c:	40d8      	lsrs	r0, r3
 800132e:	4770      	bx	lr
 8001330:	40021000 	.word	0x40021000
 8001334:	08003b88 	.word	0x08003b88
 8001338:	20000004 	.word	0x20000004

0800133c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <HAL_RCC_GetPCLK2Freq+0x14>)
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001340:	689b      	ldr	r3, [r3, #8]
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001342:	4905      	ldr	r1, [pc, #20]	; (8001358 <HAL_RCC_GetPCLK2Freq+0x1c>)
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001344:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001348:	6808      	ldr	r0, [r1, #0]
 800134a:	5cd3      	ldrb	r3, [r2, r3]
}
 800134c:	40d8      	lsrs	r0, r3
 800134e:	4770      	bx	lr
 8001350:	40021000 	.word	0x40021000
 8001354:	08003b88 	.word	0x08003b88
 8001358:	20000004 	.word	0x20000004

0800135c <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800135c:	4a48      	ldr	r2, [pc, #288]	; (8001480 <RCCEx_PLLSAI1_Config+0x124>)
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800135e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001360:	68d3      	ldr	r3, [r2, #12]
 8001362:	079b      	lsls	r3, r3, #30
 8001364:	d007      	beq.n	8001376 <RCCEx_PLLSAI1_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001366:	68d3      	ldr	r3, [r2, #12]
 8001368:	6804      	ldr	r4, [r0, #0]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	42a3      	cmp	r3, r4
 8001370:	d00d      	beq.n	800138e <RCCEx_PLLSAI1_Config+0x32>
 8001372:	2001      	movs	r0, #1
 8001374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001376:	6803      	ldr	r3, [r0, #0]
 8001378:	2b02      	cmp	r3, #2
 800137a:	d012      	beq.n	80013a2 <RCCEx_PLLSAI1_Config+0x46>
 800137c:	2b03      	cmp	r3, #3
 800137e:	d059      	beq.n	8001434 <RCCEx_PLLSAI1_Config+0xd8>
 8001380:	2b01      	cmp	r3, #1
 8001382:	d1f6      	bne.n	8001372 <RCCEx_PLLSAI1_Config+0x16>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	0797      	lsls	r7, r2, #30
 8001388:	d40e      	bmi.n	80013a8 <RCCEx_PLLSAI1_Config+0x4c>
 800138a:	4618      	mov	r0, r3
 800138c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       ||
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0ef      	beq.n	8001372 <RCCEx_PLLSAI1_Config+0x16>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001392:	68d3      	ldr	r3, [r2, #12]
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
 8001394:	6842      	ldr	r2, [r0, #4]
 8001396:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800139a:	3301      	adds	r3, #1
 800139c:	4293      	cmp	r3, r2
 800139e:	d1e8      	bne.n	8001372 <RCCEx_PLLSAI1_Config+0x16>
 80013a0:	e00c      	b.n	80013bc <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	0556      	lsls	r6, r2, #21
 80013a6:	d5e4      	bpl.n	8001372 <RCCEx_PLLSAI1_Config+0x16>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80013a8:	4d35      	ldr	r5, [pc, #212]	; (8001480 <RCCEx_PLLSAI1_Config+0x124>)
 80013aa:	6842      	ldr	r2, [r0, #4]
 80013ac:	68ec      	ldr	r4, [r5, #12]
 80013ae:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80013b2:	4323      	orrs	r3, r4
 80013b4:	3a01      	subs	r2, #1
 80013b6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80013ba:	60eb      	str	r3, [r5, #12]
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80013bc:	4c30      	ldr	r4, [pc, #192]	; (8001480 <RCCEx_PLLSAI1_Config+0x124>)
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80013c4:	6023      	str	r3, [r4, #0]
 80013c6:	460f      	mov	r7, r1
 80013c8:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013ca:	f7ff f8b7 	bl	800053c <HAL_GetTick>
 80013ce:	4606      	mov	r6, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80013d0:	e004      	b.n	80013dc <RCCEx_PLLSAI1_Config+0x80>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80013d2:	f7ff f8b3 	bl	800053c <HAL_GetTick>
 80013d6:	1b80      	subs	r0, r0, r6
 80013d8:	2802      	cmp	r0, #2
 80013da:	d829      	bhi.n	8001430 <RCCEx_PLLSAI1_Config+0xd4>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80013dc:	6823      	ldr	r3, [r4, #0]
 80013de:	4a28      	ldr	r2, [pc, #160]	; (8001480 <RCCEx_PLLSAI1_Config+0x124>)
 80013e0:	0119      	lsls	r1, r3, #4
 80013e2:	d4f6      	bmi.n	80013d2 <RCCEx_PLLSAI1_Config+0x76>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80013e4:	2f00      	cmp	r7, #0
 80013e6:	d12c      	bne.n	8001442 <RCCEx_PLLSAI1_Config+0xe6>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80013e8:	6911      	ldr	r1, [r2, #16]
 80013ea:	68ac      	ldr	r4, [r5, #8]
 80013ec:	68e8      	ldr	r0, [r5, #12]
 80013ee:	f021 4378 	bic.w	r3, r1, #4160749568	; 0xf8000000
 80013f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80013f6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80013fa:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 80013fe:	6113      	str	r3, [r2, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001400:	4c1f      	ldr	r4, [pc, #124]	; (8001480 <RCCEx_PLLSAI1_Config+0x124>)
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001408:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140a:	f7ff f897 	bl	800053c <HAL_GetTick>
 800140e:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001410:	e004      	b.n	800141c <RCCEx_PLLSAI1_Config+0xc0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001412:	f7ff f893 	bl	800053c <HAL_GetTick>
 8001416:	1b80      	subs	r0, r0, r6
 8001418:	2802      	cmp	r0, #2
 800141a:	d809      	bhi.n	8001430 <RCCEx_PLLSAI1_Config+0xd4>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800141c:	6823      	ldr	r3, [r4, #0]
 800141e:	4a18      	ldr	r2, [pc, #96]	; (8001480 <RCCEx_PLLSAI1_Config+0x124>)
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	d5f6      	bpl.n	8001412 <RCCEx_PLLSAI1_Config+0xb6>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001424:	69ab      	ldr	r3, [r5, #24]
 8001426:	6911      	ldr	r1, [r2, #16]
 8001428:	430b      	orrs	r3, r1
 800142a:	6113      	str	r3, [r2, #16]
 800142c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800142e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
 8001430:	2003      	movs	r0, #3
 8001432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001434:	6814      	ldr	r4, [r2, #0]
 8001436:	03a5      	lsls	r5, r4, #14
 8001438:	d4b6      	bmi.n	80013a8 <RCCEx_PLLSAI1_Config+0x4c>
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	0354      	lsls	r4, r2, #13
 800143e:	d598      	bpl.n	8001372 <RCCEx_PLLSAI1_Config+0x16>
 8001440:	e7b2      	b.n	80013a8 <RCCEx_PLLSAI1_Config+0x4c>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001442:	2f01      	cmp	r7, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001444:	6911      	ldr	r1, [r2, #16]
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001446:	d00d      	beq.n	8001464 <RCCEx_PLLSAI1_Config+0x108>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001448:	6968      	ldr	r0, [r5, #20]
 800144a:	68ac      	ldr	r4, [r5, #8]
 800144c:	f021 63c0 	bic.w	r3, r1, #100663296	; 0x6000000
 8001450:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001454:	0840      	lsrs	r0, r0, #1
 8001456:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800145a:	3801      	subs	r0, #1
 800145c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001460:	6113      	str	r3, [r2, #16]
 8001462:	e7cd      	b.n	8001400 <RCCEx_PLLSAI1_Config+0xa4>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001464:	6928      	ldr	r0, [r5, #16]
 8001466:	68ac      	ldr	r4, [r5, #8]
 8001468:	f421 03c0 	bic.w	r3, r1, #6291456	; 0x600000
 800146c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001470:	0841      	lsrs	r1, r0, #1
 8001472:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001476:	3901      	subs	r1, #1
 8001478:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800147c:	6113      	str	r3, [r2, #16]
 800147e:	e7bf      	b.n	8001400 <RCCEx_PLLSAI1_Config+0xa4>
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001488:	6803      	ldr	r3, [r0, #0]
 800148a:	f413 6700 	ands.w	r7, r3, #2048	; 0x800
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800148e:	b083      	sub	sp, #12
 8001490:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001492:	d00c      	beq.n	80014ae <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001494:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001496:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800149a:	f000 811d 	beq.w	80016d8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800149e:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80014a2:	f000 8105 	beq.w	80016b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 80014a6:	2900      	cmp	r1, #0
 80014a8:	f000 811c 	beq.w	80016e4 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80014ac:	2701      	movs	r7, #1
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80014ae:	039d      	lsls	r5, r3, #14
 80014b0:	d559      	bpl.n	8001566 <HAL_RCCEx_PeriphCLKConfig+0xe2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b2:	4ba1      	ldr	r3, [pc, #644]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80014b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014b6:	00d0      	lsls	r0, r2, #3
 80014b8:	f140 80e1 	bpl.w	800167e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
  {
    FlagStatus       pwrclkchanged = RESET;
 80014bc:	f04f 0800 	mov.w	r8, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014c0:	4d9e      	ldr	r5, [pc, #632]	; (800173c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80014c2:	682b      	ldr	r3, [r5, #0]
 80014c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c8:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80014ca:	f7ff f837 	bl	800053c <HAL_GetTick>
 80014ce:	4606      	mov	r6, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 80014d0:	e005      	b.n	80014de <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d2:	f7ff f833 	bl	800053c <HAL_GetTick>
 80014d6:	1b80      	subs	r0, r0, r6
 80014d8:	2802      	cmp	r0, #2
 80014da:	f200 80dc 	bhi.w	8001696 <HAL_RCCEx_PeriphCLKConfig+0x212>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 80014de:	682b      	ldr	r3, [r5, #0]
 80014e0:	05d9      	lsls	r1, r3, #23
 80014e2:	d5f6      	bpl.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = HAL_TIMEOUT;
        break;
      }
    }

    if(ret == HAL_OK)
 80014e4:	2f00      	cmp	r7, #0
 80014e6:	d139      	bne.n	800155c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80014e8:	4a93      	ldr	r2, [pc, #588]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80014ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80014ee:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80014f2:	d02a      	beq.n	800154a <HAL_RCCEx_PeriphCLKConfig+0xc6>
 80014f4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80014f6:	428b      	cmp	r3, r1
 80014f8:	f000 8118 	beq.w	800172c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80014fc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001500:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8001504:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8001508:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800150c:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001514:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8001518:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800151c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001520:	07da      	lsls	r2, r3, #31
 8001522:	f140 80ef 	bpl.w	8001704 <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001526:	f7ff f809 	bl	800053c <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800152a:	4d83      	ldr	r5, [pc, #524]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	4681      	mov	r9, r0

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152e:	f241 3688 	movw	r6, #5000	; 0x1388
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001532:	e006      	b.n	8001542 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff f802 	bl	800053c <HAL_GetTick>
 8001538:	ebc9 0000 	rsb	r0, r9, r0
 800153c:	42b0      	cmp	r0, r6
 800153e:	f200 80aa 	bhi.w	8001696 <HAL_RCCEx_PeriphCLKConfig+0x212>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001542:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001546:	079b      	lsls	r3, r3, #30
 8001548:	d5f4      	bpl.n	8001534 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 800154a:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }

      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800154c:	497a      	ldr	r1, [pc, #488]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800154e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001552:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001556:	4313      	orrs	r3, r2
 8001558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800155c:	f1b8 0f00 	cmp.w	r8, #0
 8001560:	f040 809e 	bne.w	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8001564:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001566:	07de      	lsls	r6, r3, #31
 8001568:	d508      	bpl.n	800157c <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800156a:	4873      	ldr	r0, [pc, #460]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800156c:	6a22      	ldr	r2, [r4, #32]
 800156e:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8001572:	f021 0103 	bic.w	r1, r1, #3
 8001576:	430a      	orrs	r2, r1
 8001578:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800157c:	079d      	lsls	r5, r3, #30
 800157e:	d508      	bpl.n	8001592 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001580:	486d      	ldr	r0, [pc, #436]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001582:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001584:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8001588:	f021 010c 	bic.w	r1, r1, #12
 800158c:	430a      	orrs	r2, r1
 800158e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001592:	0698      	lsls	r0, r3, #26
 8001594:	d508      	bpl.n	80015a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001596:	4868      	ldr	r0, [pc, #416]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001598:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800159a:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800159e:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80015a2:	430a      	orrs	r2, r1
 80015a4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80015a8:	0599      	lsls	r1, r3, #22
 80015aa:	d508      	bpl.n	80015be <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80015ac:	4862      	ldr	r0, [pc, #392]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80015ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80015b0:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80015b4:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 80015b8:	430a      	orrs	r2, r1
 80015ba:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80015be:	055a      	lsls	r2, r3, #21
 80015c0:	d508      	bpl.n	80015d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80015c2:	485d      	ldr	r0, [pc, #372]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80015c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80015c6:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80015ca:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80015ce:	430a      	orrs	r2, r1
 80015d0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015d4:	065e      	lsls	r6, r3, #25
 80015d6:	d508      	bpl.n	80015ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015d8:	4857      	ldr	r0, [pc, #348]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80015da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015dc:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80015e0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80015e4:	430a      	orrs	r2, r1
 80015e6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80015ea:	05dd      	lsls	r5, r3, #23
 80015ec:	d508      	bpl.n	8001600 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80015ee:	4852      	ldr	r0, [pc, #328]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80015f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80015f2:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80015f6:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80015fa:	430a      	orrs	r2, r1
 80015fc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001600:	0498      	lsls	r0, r3, #18
 8001602:	d50e      	bpl.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001604:	484c      	ldr	r0, [pc, #304]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001606:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001608:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800160c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001610:	430a      	orrs	r2, r1

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001612:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001616:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800161a:	d058      	beq.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800161c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001620:	d072      	beq.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0x284>
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001622:	0359      	lsls	r1, r3, #13
 8001624:	d50e      	bpl.n	8001644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001626:	4844      	ldr	r0, [pc, #272]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001628:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800162a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800162e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001632:	430a      	orrs	r2, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001634:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001638:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800163c:	d042      	beq.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800163e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001642:	d069      	beq.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x294>
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001644:	045a      	lsls	r2, r3, #17
 8001646:	d50b      	bpl.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001648:	483b      	ldr	r0, [pc, #236]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800164a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800164c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001650:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001654:	430a      	orrs	r2, r1

    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001656:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800165a:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800165e:	d049      	beq.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x270>
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001660:	041b      	lsls	r3, r3, #16
 8001662:	d508      	bpl.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001664:	4934      	ldr	r1, [pc, #208]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001666:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001668:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800166c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001670:	4313      	orrs	r3, r2
 8001672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 8001676:	4638      	mov	r0, r7
 8001678:	b003      	add	sp, #12
 800167a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001680:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001684:	659a      	str	r2, [r3, #88]	; 0x58
 8001686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001690:	f04f 0801 	mov.w	r8, #1
 8001694:	e714      	b.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0x3c>

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        ret = HAL_TIMEOUT;
 8001696:	2703      	movs	r7, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001698:	f1b8 0f00 	cmp.w	r8, #0
 800169c:	f43f af62 	beq.w	8001564 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a0:	4a25      	ldr	r2, [pc, #148]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80016a2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80016a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6593      	str	r3, [r2, #88]	; 0x58
 80016aa:	e75b      	b.n	8001564 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 80016ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80016ae:	6823      	ldr	r3, [r4, #0]
    }

    if(ret == HAL_OK)
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016b0:	4821      	ldr	r0, [pc, #132]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80016b2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80016b6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80016ba:	4311      	orrs	r1, r2
 80016bc:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 80016c0:	2700      	movs	r7, #0
 80016c2:	e6f4      	b.n	80014ae <HAL_RCCEx_PeriphCLKConfig+0x2a>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80016c4:	68c2      	ldr	r2, [r0, #12]
 80016c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80016ca:	60c2      	str	r2, [r0, #12]
 80016cc:	e7ba      	b.n	8001644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80016ce:	68c2      	ldr	r2, [r0, #12]
 80016d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80016d4:	60c2      	str	r2, [r0, #12]
 80016d6:	e7a4      	b.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80016d8:	4817      	ldr	r0, [pc, #92]	; (8001738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80016da:	68c2      	ldr	r2, [r0, #12]
 80016dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016e0:	60c2      	str	r2, [r0, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80016e2:	e7e5      	b.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0x22c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80016e4:	3004      	adds	r0, #4
 80016e6:	f7ff fe39 	bl	800135c <RCCEx_PLLSAI1_Config>
    default:
      ret = HAL_ERROR;
      break;
    }

    if(ret == HAL_OK)
 80016ea:	4607      	mov	r7, r0
 80016ec:	2800      	cmp	r0, #0
 80016ee:	d0dd      	beq.n	80016ac <HAL_RCCEx_PeriphCLKConfig+0x228>
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	e6dc      	b.n	80014ae <HAL_RCCEx_PeriphCLKConfig+0x2a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);

    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80016f4:	2102      	movs	r1, #2
 80016f6:	1d20      	adds	r0, r4, #4
 80016f8:	f7ff fe30 	bl	800135c <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 80016fc:	b1a0      	cbz	r0, 8001728 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 80016fe:	4607      	mov	r7, r0
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	e7ad      	b.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    if(ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001704:	460b      	mov	r3, r1
 8001706:	e721      	b.n	800154c <HAL_RCCEx_PeriphCLKConfig+0xc8>
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001708:	2101      	movs	r1, #1
 800170a:	1d20      	adds	r0, r4, #4
 800170c:	f7ff fe26 	bl	800135c <RCCEx_PLLSAI1_Config>

        if(ret != HAL_OK)
 8001710:	b170      	cbz	r0, 8001730 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8001712:	4607      	mov	r7, r0
 8001714:	6823      	ldr	r3, [r4, #0]
 8001716:	e784      	b.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001718:	2101      	movs	r1, #1
 800171a:	1d20      	adds	r0, r4, #4
 800171c:	f7ff fe1e 	bl	800135c <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 8001720:	b140      	cbz	r0, 8001734 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8001722:	4607      	mov	r7, r0
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	e78d      	b.n	8001644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	e799      	b.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800172c:	460b      	mov	r3, r1
 800172e:	e6f7      	b.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	e776      	b.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	e785      	b.n	8001644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8001738:	40021000 	.word	0x40021000
 800173c:	40007000 	.word	0x40007000

08001740 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001740:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001742:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001744:	688f      	ldr	r7, [r1, #8]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001746:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001748:	4d17      	ldr	r5, [pc, #92]	; (80017a8 <TIM_OC1_SetConfig+0x68>)
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800174a:	f024 0401 	bic.w	r4, r4, #1
 800174e:	6204      	str	r4, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001750:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001752:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001754:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800175a:	f022 0202 	bic.w	r2, r2, #2
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800175e:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001762:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001764:	ea42 0207 	orr.w	r2, r2, r7

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001768:	ea43 0306 	orr.w	r3, r3, r6
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800176c:	d00e      	beq.n	800178c <TIM_OC1_SetConfig+0x4c>
 800176e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001772:	42a8      	cmp	r0, r5
 8001774:	d00a      	beq.n	800178c <TIM_OC1_SetConfig+0x4c>
 8001776:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800177a:	42a8      	cmp	r0, r5
 800177c:	d006      	beq.n	800178c <TIM_OC1_SetConfig+0x4c>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800177e:	6849      	ldr	r1, [r1, #4]
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001780:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001782:	6183      	str	r3, [r0, #24]
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001784:	bcf0      	pop	{r4, r5, r6, r7}

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001786:	6341      	str	r1, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001788:	6202      	str	r2, [r0, #32]
}
 800178a:	4770      	bx	lr
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800178c:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800178e:	694e      	ldr	r6, [r1, #20]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001790:	f022 0208 	bic.w	r2, r2, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001794:	432a      	orrs	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001796:	698d      	ldr	r5, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001798:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800179c:	4335      	orrs	r5, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800179e:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80017a2:	432c      	orrs	r4, r5
 80017a4:	e7eb      	b.n	800177e <TIM_OC1_SetConfig+0x3e>
 80017a6:	bf00      	nop
 80017a8:	40012c00 	.word	0x40012c00

080017ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80017ac:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80017ae:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80017b0:	688f      	ldr	r7, [r1, #8]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017b2:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80017b4:	4d17      	ldr	r5, [pc, #92]	; (8001814 <TIM_OC3_SetConfig+0x68>)
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80017b6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80017ba:	6204      	str	r4, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017bc:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017be:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017c0:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80017c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80017c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80017ca:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80017ce:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 80017d0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017d4:	ea42 0206 	orr.w	r2, r2, r6
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80017d8:	d00c      	beq.n	80017f4 <TIM_OC3_SetConfig+0x48>
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80017da:	4d0f      	ldr	r5, [pc, #60]	; (8001818 <TIM_OC3_SetConfig+0x6c>)
 80017dc:	42a8      	cmp	r0, r5
 80017de:	d010      	beq.n	8001802 <TIM_OC3_SetConfig+0x56>
 80017e0:	4d0e      	ldr	r5, [pc, #56]	; (800181c <TIM_OC3_SetConfig+0x70>)
 80017e2:	42a8      	cmp	r0, r5
 80017e4:	d00d      	beq.n	8001802 <TIM_OC3_SetConfig+0x56>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80017e6:	6849      	ldr	r1, [r1, #4]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017e8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80017ea:	61c2      	str	r2, [r0, #28]
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80017ec:	bcf0      	pop	{r4, r5, r6, r7}

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80017ee:	63c1      	str	r1, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017f0:	6203      	str	r3, [r0, #32]
}
 80017f2:	4770      	bx	lr
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80017f4:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80017f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80017fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80017fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001802:	694e      	ldr	r6, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8001804:	698d      	ldr	r5, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001806:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800180a:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 800180e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8001812:	e7e8      	b.n	80017e6 <TIM_OC3_SetConfig+0x3a>
 8001814:	40012c00 	.word	0x40012c00
 8001818:	40014000 	.word	0x40014000
 800181c:	40014400 	.word	0x40014400

08001820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001820:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001822:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001824:	f8d1 e008 	ldr.w	lr, [r1, #8]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001828:	680f      	ldr	r7, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800182a:	4e13      	ldr	r6, [pc, #76]	; (8001878 <TIM_OC4_SetConfig+0x58>)
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800182c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001830:	6204      	str	r4, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001832:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001834:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001836:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001838:	f022 7380 	bic.w	r3, r2, #16777216	; 0x1000000
 800183c:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001840:	f424 5200 	bic.w	r2, r4, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001844:	42b0      	cmp	r0, r6
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001846:	ea42 320e 	orr.w	r2, r2, lr, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800184a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800184e:	d00c      	beq.n	800186a <TIM_OC4_SetConfig+0x4a>
 8001850:	4c0a      	ldr	r4, [pc, #40]	; (800187c <TIM_OC4_SetConfig+0x5c>)
 8001852:	42a0      	cmp	r0, r4
 8001854:	d009      	beq.n	800186a <TIM_OC4_SetConfig+0x4a>
 8001856:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800185a:	42a0      	cmp	r0, r4
 800185c:	d005      	beq.n	800186a <TIM_OC4_SetConfig+0x4a>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800185e:	6849      	ldr	r1, [r1, #4]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001860:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001862:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001864:	6401      	str	r1, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001866:	6202      	str	r2, [r0, #32]
 8001868:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800186a:	694c      	ldr	r4, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800186c:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001870:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
 8001874:	e7f3      	b.n	800185e <TIM_OC4_SetConfig+0x3e>
 8001876:	bf00      	nop
 8001878:	40012c00 	.word	0x40012c00
 800187c:	40014000 	.word	0x40014000

08001880 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001880:	6a02      	ldr	r2, [r0, #32]
 8001882:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001886:	b4f0      	push	{r4, r5, r6, r7}
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8001888:	688f      	ldr	r7, [r1, #8]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800188a:	680c      	ldr	r4, [r1, #0]
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800188c:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800188e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001890:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001892:	6d42      	ldr	r2, [r0, #84]	; 0x54
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001894:	4e10      	ldr	r6, [pc, #64]	; (80018d8 <TIM_OC5_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001896:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800189a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800189e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80018a2:	42b0      	cmp	r0, r6
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80018a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80018a8:	ea42 0204 	orr.w	r2, r2, r4
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80018ac:	d00d      	beq.n	80018ca <TIM_OC5_SetConfig+0x4a>
 80018ae:	4c0b      	ldr	r4, [pc, #44]	; (80018dc <TIM_OC5_SetConfig+0x5c>)
 80018b0:	42a0      	cmp	r0, r4
 80018b2:	d00a      	beq.n	80018ca <TIM_OC5_SetConfig+0x4a>
 80018b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80018b8:	42a0      	cmp	r0, r4
 80018ba:	d006      	beq.n	80018ca <TIM_OC5_SetConfig+0x4a>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80018bc:	6849      	ldr	r1, [r1, #4]
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018be:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80018c0:	6542      	str	r2, [r0, #84]	; 0x54
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80018c2:	bcf0      	pop	{r4, r5, r6, r7}

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80018c4:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018c6:	6203      	str	r3, [r0, #32]
}
 80018c8:	4770      	bx	lr
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80018ca:	694c      	ldr	r4, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80018cc:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 80018d0:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
 80018d4:	e7f2      	b.n	80018bc <TIM_OC5_SetConfig+0x3c>
 80018d6:	bf00      	nop
 80018d8:	40012c00 	.word	0x40012c00
 80018dc:	40014000 	.word	0x40014000

080018e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80018e2:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 80018e4:	f8d1 e008 	ldr.w	lr, [r1, #8]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80018e8:	680f      	ldr	r7, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80018ea:	4e13      	ldr	r6, [pc, #76]	; (8001938 <TIM_OC6_SetConfig+0x58>)
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80018ec:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
 80018f0:	6204      	str	r4, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018f2:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018f4:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80018f6:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80018f8:	f022 7380 	bic.w	r3, r2, #16777216	; 0x1000000
 80018fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001900:	f424 1200 	bic.w	r2, r4, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001904:	42b0      	cmp	r0, r6
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8001906:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800190a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800190e:	d00c      	beq.n	800192a <TIM_OC6_SetConfig+0x4a>
 8001910:	4c0a      	ldr	r4, [pc, #40]	; (800193c <TIM_OC6_SetConfig+0x5c>)
 8001912:	42a0      	cmp	r0, r4
 8001914:	d009      	beq.n	800192a <TIM_OC6_SetConfig+0x4a>
 8001916:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800191a:	42a0      	cmp	r0, r4
 800191c:	d005      	beq.n	800192a <TIM_OC6_SetConfig+0x4a>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800191e:	6849      	ldr	r1, [r1, #4]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001920:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001922:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001924:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001926:	6202      	str	r2, [r0, #32]
 8001928:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800192a:	694c      	ldr	r4, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800192c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8001930:	ea45 2584 	orr.w	r5, r5, r4, lsl #10
 8001934:	e7f3      	b.n	800191e <TIM_OC6_SetConfig+0x3e>
 8001936:	bf00      	nop
 8001938:	40012c00 	.word	0x40012c00
 800193c:	40014000 	.word	0x40014000

08001940 <HAL_TIM_Base_Start>:

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001940:	6801      	ldr	r1, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001942:	2202      	movs	r2, #2
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001944:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001946:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800194a:	680a      	ldr	r2, [r1, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800194c:	2401      	movs	r4, #1
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800194e:	4603      	mov	r3, r0

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001950:	4322      	orrs	r2, r4
 8001952:	600a      	str	r2, [r1, #0]
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001954:	2000      	movs	r0, #0

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001956:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 800195a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_TIM_PWM_MspInit>:
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <HAL_TIM_PWM_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001964:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001966:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001968:	6a18      	ldr	r0, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800196a:	fa02 f101 	lsl.w	r1, r2, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800196e:	ea20 0001 	bic.w	r0, r0, r1
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001972:	b410      	push	{r4}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001974:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001976:	6a1a      	ldr	r2, [r3, #32]
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001978:	4c0c      	ldr	r4, [pc, #48]	; (80019ac <HAL_TIM_PWM_Start+0x48>)

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800197a:	4311      	orrs	r1, r2
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800197c:	42a3      	cmp	r3, r4

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800197e:	6219      	str	r1, [r3, #32]
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001980:	d00e      	beq.n	80019a0 <HAL_TIM_PWM_Start+0x3c>
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <HAL_TIM_PWM_Start+0x4c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00b      	beq.n	80019a0 <HAL_TIM_PWM_Start+0x3c>
 8001988:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800198c:	4293      	cmp	r3, r2
 800198e:	d007      	beq.n	80019a0 <HAL_TIM_PWM_Start+0x3c>
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001990:	681a      	ldr	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001992:	f85d 4b04 	ldr.w	r4, [sp], #4
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001996:	f042 0201 	orr.w	r2, r2, #1

  /* Return function status */
  return HAL_OK;
}
 800199a:	2000      	movs	r0, #0
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800199c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800199e:	4770      	bx	lr
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80019a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019a6:	645a      	str	r2, [r3, #68]	; 0x44
 80019a8:	e7f2      	b.n	8001990 <HAL_TIM_PWM_Start+0x2c>
 80019aa:	bf00      	nop
 80019ac:	40012c00 	.word	0x40012c00
 80019b0:	40014000 	.word	0x40014000

080019b4 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d040      	beq.n	8001a3e <HAL_TIM_ConfigClockSource+0x8a>

  htim->State = HAL_TIM_STATE_BUSY;
 80019bc:	2202      	movs	r2, #2

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019be:	6803      	ldr	r3, [r0, #0]
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80019c0:	b470      	push	{r4, r5, r6}
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);

  htim->State = HAL_TIM_STATE_BUSY;
 80019c2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019c6:	689d      	ldr	r5, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 80019c8:	680c      	ldr	r4, [r1, #0]
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019ca:	4a5d      	ldr	r2, [pc, #372]	; (8001b40 <HAL_TIM_ConfigClockSource+0x18c>)
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 80019cc:	2c40      	cmp	r4, #64	; 0x40
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019ce:	ea02 0205 	and.w	r2, r2, r5
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019d2:	f04f 0501 	mov.w	r5, #1
 80019d6:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
 80019da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019dc:	d079      	beq.n	8001ad2 <HAL_TIM_ConfigClockSource+0x11e>
 80019de:	d918      	bls.n	8001a12 <HAL_TIM_ConfigClockSource+0x5e>
 80019e0:	2c70      	cmp	r4, #112	; 0x70
 80019e2:	d062      	beq.n	8001aaa <HAL_TIM_ConfigClockSource+0xf6>
 80019e4:	d92d      	bls.n	8001a42 <HAL_TIM_ConfigClockSource+0x8e>
 80019e6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80019ea:	d057      	beq.n	8001a9c <HAL_TIM_ConfigClockSource+0xe8>
 80019ec:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80019f0:	d11c      	bne.n	8001a2c <HAL_TIM_ConfigClockSource+0x78>
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 80019f2:	689c      	ldr	r4, [r3, #8]
 80019f4:	688a      	ldr	r2, [r1, #8]
 80019f6:	684d      	ldr	r5, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80019f8:	68ce      	ldr	r6, [r1, #12]
 80019fa:	432a      	orrs	r2, r5
 80019fc:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
 8001a00:	430a      	orrs	r2, r1
 8001a02:	ea42 2206 	orr.w	r2, r2, r6, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a06:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a0e:	609a      	str	r2, [r3, #8]
    }
    break;
 8001a10:	e00c      	b.n	8001a2c <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8001a12:	2c10      	cmp	r4, #16
 8001a14:	d032      	beq.n	8001a7c <HAL_TIM_ConfigClockSource+0xc8>
 8001a16:	d938      	bls.n	8001a8a <HAL_TIM_ConfigClockSource+0xd6>
 8001a18:	2c20      	cmp	r4, #32
 8001a1a:	d072      	beq.n	8001b02 <HAL_TIM_ConfigClockSource+0x14e>
 8001a1c:	2c30      	cmp	r4, #48	; 0x30
 8001a1e:	d105      	bne.n	8001a2c <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001a20:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a26:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001a2a:	609a      	str	r2, [r3, #8]
  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001a2c:	2300      	movs	r3, #0
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a34:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8001a38:	bc70      	pop	{r4, r5, r6}
  }
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
 8001a3a:	4618      	mov	r0, r3
}
 8001a3c:	4770      	bx	lr
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a3e:	2002      	movs	r0, #2
 8001a40:	4770      	bx	lr
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8001a42:	2c50      	cmp	r4, #80	; 0x50
 8001a44:	d064      	beq.n	8001b10 <HAL_TIM_ConfigClockSource+0x15c>
 8001a46:	2c60      	cmp	r4, #96	; 0x60
 8001a48:	d1f0      	bne.n	8001a2c <HAL_TIM_ConfigClockSource+0x78>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a4a:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a4c:	684d      	ldr	r5, [r1, #4]
 8001a4e:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a50:	f024 0410 	bic.w	r4, r4, #16
 8001a54:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a56:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001a58:	6a1a      	ldr	r2, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001a5a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001a5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8001a62:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 8001a66:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001a6a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a6c:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001a6e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a74:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	e7d7      	b.n	8001a2c <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001a7c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a82:	f042 0217 	orr.w	r2, r2, #23
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	e7d0      	b.n	8001a2c <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8001a8a:	2c00      	cmp	r4, #0
 8001a8c:	d1ce      	bne.n	8001a2c <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001a8e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a94:	f042 0207 	orr.w	r2, r2, #7
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	e7c7      	b.n	8001a2c <HAL_TIM_ConfigClockSource+0x78>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001aa2:	f022 0207 	bic.w	r2, r2, #7
 8001aa6:	609a      	str	r2, [r3, #8]
    }
    break;
 8001aa8:	e7c0      	b.n	8001a2c <HAL_TIM_ConfigClockSource+0x78>
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8001aaa:	689c      	ldr	r4, [r3, #8]
 8001aac:	688a      	ldr	r2, [r1, #8]
 8001aae:	684d      	ldr	r5, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001ab0:	68ce      	ldr	r6, [r1, #12]
 8001ab2:	432a      	orrs	r2, r5
 8001ab4:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	ea42 2206 	orr.w	r2, r2, r6, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001abe:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8001ac0:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ac2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ac6:	f022 0277 	bic.w	r2, r2, #119	; 0x77
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001aca:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ace:	609a      	str	r2, [r3, #8]
    }
    break;
 8001ad0:	e7ac      	b.n	8001a2c <HAL_TIM_ConfigClockSource+0x78>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ad2:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ad4:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ad6:	684e      	ldr	r6, [r1, #4]
 8001ad8:	68cd      	ldr	r5, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ada:	f024 0401 	bic.w	r4, r4, #1
 8001ade:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ae0:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ae2:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ae6:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8001aea:	4332      	orrs	r2, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001aec:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001af0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001af2:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001af4:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001af6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001afa:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	e794      	b.n	8001a2c <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001b02:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001b04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001b08:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	e78d      	b.n	8001a2c <HAL_TIM_ConfigClockSource+0x78>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001b10:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b12:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b14:	684e      	ldr	r6, [r1, #4]
 8001b16:	68cd      	ldr	r5, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b18:	f024 0401 	bic.w	r4, r4, #1
 8001b1c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b1e:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b20:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b24:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8001b28:	4332      	orrs	r2, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001b2a:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001b2e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b30:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001b32:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001b34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001b38:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	e775      	b.n	8001a2c <HAL_TIM_ConfigClockSource+0x78>
 8001b40:	fffe0088 	.word	0xfffe0088

08001b44 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b44:	4a26      	ldr	r2, [pc, #152]	; (8001be0 <TIM_Base_SetConfig+0x9c>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8001b46:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b48:	4290      	cmp	r0, r2
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b4a:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b4c:	d034      	beq.n	8001bb8 <TIM_Base_SetConfig+0x74>
 8001b4e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b52:	d014      	beq.n	8001b7e <TIM_Base_SetConfig+0x3a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b54:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8001b58:	4290      	cmp	r0, r2
 8001b5a:	d014      	beq.n	8001b86 <TIM_Base_SetConfig+0x42>
 8001b5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b60:	4290      	cmp	r0, r2
 8001b62:	d010      	beq.n	8001b86 <TIM_Base_SetConfig+0x42>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001b64:	694a      	ldr	r2, [r1, #20]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b66:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b68:	6809      	ldr	r1, [r1, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001b6e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001b70:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b72:	62c4      	str	r4, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b74:	6281      	str	r1, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b76:	2301      	movs	r3, #1
 8001b78:	6143      	str	r3, [r0, #20]
}
 8001b7a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b7c:	4770      	bx	lr
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001b7e:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001b84:	4313      	orrs	r3, r2

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b86:	68ca      	ldr	r2, [r1, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001b88:	694c      	ldr	r4, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b8a:	4d16      	ldr	r5, [pc, #88]	; (8001be4 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b8c:	688f      	ldr	r7, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001b8e:	680e      	ldr	r6, [r1, #0]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b94:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001b9a:	4323      	orrs	r3, r4
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b9c:	42a8      	cmp	r0, r5

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;

  TIMx->CR1 = tmpcr1;
 8001b9e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ba0:	62c7      	str	r7, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001ba2:	6286      	str	r6, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ba4:	d002      	beq.n	8001bac <TIM_Base_SetConfig+0x68>
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <TIM_Base_SetConfig+0xa4>)
 8001ba8:	4298      	cmp	r0, r3
 8001baa:	d1e4      	bne.n	8001b76 <TIM_Base_SetConfig+0x32>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bac:	690b      	ldr	r3, [r1, #16]
 8001bae:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	6143      	str	r3, [r0, #20]
}
 8001bb4:	bcf0      	pop	{r4, r5, r6, r7}
 8001bb6:	4770      	bx	lr
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001bb8:	684c      	ldr	r4, [r1, #4]

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bba:	68ca      	ldr	r2, [r1, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001bbc:	694d      	ldr	r5, [r1, #20]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001bc2:	431c      	orrs	r4, r3
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bc4:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bc8:	4322      	orrs	r2, r4
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001bca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001bce:	432a      	orrs	r2, r5

  TIMx->CR1 = tmpcr1;
 8001bd0:	6002      	str	r2, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bd2:	688b      	ldr	r3, [r1, #8]
 8001bd4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001bd6:	680b      	ldr	r3, [r1, #0]
 8001bd8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bda:	690b      	ldr	r3, [r1, #16]
 8001bdc:	6303      	str	r3, [r0, #48]	; 0x30
 8001bde:	e7e7      	b.n	8001bb0 <TIM_Base_SetConfig+0x6c>
 8001be0:	40012c00 	.word	0x40012c00
 8001be4:	40014000 	.word	0x40014000
 8001be8:	40014400 	.word	0x40014400

08001bec <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001bec:	b1b8      	cbz	r0, 8001c1e <HAL_TIM_Base_Init+0x32>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001bee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf2:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001bf4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bf8:	4604      	mov	r4, r0
 8001bfa:	b15b      	cbz	r3, 8001c14 <HAL_TIM_Base_Init+0x28>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c02:	6820      	ldr	r0, [r4, #0]
 8001c04:	1d21      	adds	r1, r4, #4
 8001c06:	f7ff ff9d 	bl	8001b44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8001c10:	2000      	movs	r0, #0
 8001c12:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c14:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c18:	f001 fd46 	bl	80036a8 <HAL_TIM_Base_MspInit>
 8001c1c:	e7ee      	b.n	8001bfc <HAL_TIM_Base_Init+0x10>
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001c1e:	2001      	movs	r0, #1
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop

08001c24 <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001c24:	b1b8      	cbz	r0, 8001c56 <HAL_TIM_PWM_Init+0x32>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001c26:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c2a:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001c2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c30:	4604      	mov	r4, r0
 8001c32:	b15b      	cbz	r3, 8001c4c <HAL_TIM_PWM_Init+0x28>
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001c34:	2302      	movs	r3, #2
 8001c36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c3a:	6820      	ldr	r0, [r4, #0]
 8001c3c:	1d21      	adds	r1, r4, #4
 8001c3e:	f7ff ff81 	bl	8001b44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8001c48:	2000      	movs	r0, #0
 8001c4a:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c4c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c50:	f7ff fe86 	bl	8001960 <HAL_TIM_PWM_MspInit>
 8001c54:	e7ee      	b.n	8001c34 <HAL_TIM_PWM_Init+0x10>
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001c56:	2001      	movs	r0, #1
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop

08001c5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c5e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001c60:	f8d1 e008 	ldr.w	lr, [r1, #8]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001c64:	680f      	ldr	r7, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001c66:	4e17      	ldr	r6, [pc, #92]	; (8001cc4 <TIM_OC2_SetConfig+0x68>)
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c68:	f024 0410 	bic.w	r4, r4, #16
 8001c6c:	6204      	str	r4, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c6e:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c70:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c72:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c74:	f022 7380 	bic.w	r3, r2, #16777216	; 0x1000000
 8001c78:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001c7c:	f024 0220 	bic.w	r2, r4, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001c80:	42b0      	cmp	r0, r6
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001c82:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001c86:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001c8a:	d00b      	beq.n	8001ca4 <TIM_OC2_SetConfig+0x48>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001c8c:	4c0e      	ldr	r4, [pc, #56]	; (8001cc8 <TIM_OC2_SetConfig+0x6c>)
 8001c8e:	42a0      	cmp	r0, r4
 8001c90:	d00f      	beq.n	8001cb2 <TIM_OC2_SetConfig+0x56>
 8001c92:	4c0e      	ldr	r4, [pc, #56]	; (8001ccc <TIM_OC2_SetConfig+0x70>)
 8001c94:	42a0      	cmp	r0, r4
 8001c96:	d00c      	beq.n	8001cb2 <TIM_OC2_SetConfig+0x56>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001c98:	6849      	ldr	r1, [r1, #4]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c9a:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c9c:	6183      	str	r3, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001c9e:	6381      	str	r1, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ca0:	6202      	str	r2, [r0, #32]
}
 8001ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001ca4:	68cc      	ldr	r4, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001caa:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001cb2:	694e      	ldr	r6, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001cb4:	698c      	ldr	r4, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001cb6:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001cba:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001cbe:	ea45 0584 	orr.w	r5, r5, r4, lsl #2
 8001cc2:	e7e9      	b.n	8001c98 <TIM_OC2_SetConfig+0x3c>
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	40014000 	.word	0x40014000
 8001ccc:	40014400 	.word	0x40014400

08001cd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 8001cd0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cd2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d02f      	beq.n	8001d3a <HAL_TIM_PWM_ConfigChannel+0x6a>
 8001cda:	460d      	mov	r5, r1

  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	2302      	movs	r3, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cde:	2101      	movs	r1, #1
 8001ce0:	4604      	mov	r4, r0
 8001ce2:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ce6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  switch (Channel)
 8001cea:	2a14      	cmp	r2, #20
 8001cec:	d81e      	bhi.n	8001d2c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001cee:	e8df f002 	tbb	[pc, r2]
 8001cf2:	1d39      	.short	0x1d39
 8001cf4:	1d4b1d1d 	.word	0x1d4b1d1d
 8001cf8:	1d5e1d1d 	.word	0x1d5e1d1d
 8001cfc:	1d0b1d1d 	.word	0x1d0b1d1d
 8001d00:	1d701d1d 	.word	0x1d701d1d
 8001d04:	1d1d      	.short	0x1d1d
 8001d06:	26          	.byte	0x26
 8001d07:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d08:	4629      	mov	r1, r5
 8001d0a:	6800      	ldr	r0, [r0, #0]
 8001d0c:	f7ff fd88 	bl	8001820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d10:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001d12:	6928      	ldr	r0, [r5, #16]

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d14:	69d9      	ldr	r1, [r3, #28]
 8001d16:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001d1a:	61d9      	str	r1, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d1c:	69d9      	ldr	r1, [r3, #28]
 8001d1e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001d22:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001d24:	69da      	ldr	r2, [r3, #28]
 8001d26:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001d2a:	61da      	str	r2, [r3, #28]

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8001d2c:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001d2e:	2000      	movs	r0, #0

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8001d30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d34:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8001d38:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d3a:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8001d3c:	bd38      	pop	{r3, r4, r5, pc}
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001d3e:	4629      	mov	r1, r5
 8001d40:	6800      	ldr	r0, [r0, #0]
 8001d42:	f7ff fdcd 	bl	80018e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001d46:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8001d48:	6928      	ldr	r0, [r5, #16]

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001d4a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d4c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001d50:	6559      	str	r1, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001d52:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d54:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001d58:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8001d5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d5c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8001d62:	e7e3      	b.n	8001d2c <HAL_TIM_PWM_ConfigChannel+0x5c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d64:	4629      	mov	r1, r5
 8001d66:	6800      	ldr	r0, [r0, #0]
 8001d68:	f7ff fcea 	bl	8001740 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d6c:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d6e:	692a      	ldr	r2, [r5, #16]

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d70:	6999      	ldr	r1, [r3, #24]
 8001d72:	f041 0108 	orr.w	r1, r1, #8
 8001d76:	6199      	str	r1, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d78:	6999      	ldr	r1, [r3, #24]
 8001d7a:	f021 0104 	bic.w	r1, r1, #4
 8001d7e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d80:	6999      	ldr	r1, [r3, #24]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	619a      	str	r2, [r3, #24]
    }
    break;
 8001d86:	e7d1      	b.n	8001d2c <HAL_TIM_PWM_ConfigChannel+0x5c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d88:	4629      	mov	r1, r5
 8001d8a:	6800      	ldr	r0, [r0, #0]
 8001d8c:	f7ff ff66 	bl	8001c5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d90:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001d92:	6928      	ldr	r0, [r5, #16]

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d94:	6999      	ldr	r1, [r3, #24]
 8001d96:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001d9a:	6199      	str	r1, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d9c:	6999      	ldr	r1, [r3, #24]
 8001d9e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001da2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001da4:	699a      	ldr	r2, [r3, #24]
 8001da6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001daa:	619a      	str	r2, [r3, #24]
    }
    break;
 8001dac:	e7be      	b.n	8001d2c <HAL_TIM_PWM_ConfigChannel+0x5c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001dae:	4629      	mov	r1, r5
 8001db0:	6800      	ldr	r0, [r0, #0]
 8001db2:	f7ff fcfb 	bl	80017ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001db6:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001db8:	692a      	ldr	r2, [r5, #16]

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dba:	69d9      	ldr	r1, [r3, #28]
 8001dbc:	f041 0108 	orr.w	r1, r1, #8
 8001dc0:	61d9      	str	r1, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001dc2:	69d9      	ldr	r1, [r3, #28]
 8001dc4:	f021 0104 	bic.w	r1, r1, #4
 8001dc8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001dca:	69d9      	ldr	r1, [r3, #28]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	61da      	str	r2, [r3, #28]
    }
    break;
 8001dd0:	e7ac      	b.n	8001d2c <HAL_TIM_PWM_ConfigChannel+0x5c>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	6800      	ldr	r0, [r0, #0]
 8001dd6:	f7ff fd53 	bl	8001880 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001dda:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001ddc:	692a      	ldr	r2, [r5, #16]

     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001dde:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001de0:	f041 0108 	orr.w	r1, r1, #8
 8001de4:	6559      	str	r1, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001de6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001de8:	f021 0104 	bic.w	r1, r1, #4
 8001dec:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001dee:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001df0:	430a      	orrs	r2, r1
 8001df2:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8001df4:	e79a      	b.n	8001d2c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001df6:	bf00      	nop

08001df8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001df8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d017      	beq.n	8001e30 <HAL_TIMEx_MasterConfigSynchronization+0x38>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e00:	6803      	ldr	r3, [r0, #0]
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001e02:	b470      	push	{r4, r5, r6}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001e04:	4c0e      	ldr	r4, [pc, #56]	; (8001e40 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
 8001e06:	42a3      	cmp	r3, r4
 8001e08:	4602      	mov	r2, r0

  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e0a:	6858      	ldr	r0, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e0c:	689e      	ldr	r6, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001e0e:	d011      	beq.n	8001e34 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e10:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e12:	688c      	ldr	r4, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e14:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001e18:	f026 0180 	bic.w	r1, r6, #128	; 0x80
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e1c:	4328      	orrs	r0, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e1e:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8001e20:	2400      	movs	r4, #0
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e22:	6058      	str	r0, [r3, #4]
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
 8001e24:	4620      	mov	r0, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e26:	6099      	str	r1, [r3, #8]

  __HAL_UNLOCK(htim);
 8001e28:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8001e2c:	bc70      	pop	{r4, r5, r6}
 8001e2e:	4770      	bx	lr
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e30:	2002      	movs	r0, #2
 8001e32:	4770      	bx	lr
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001e34:	684c      	ldr	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001e36:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001e3a:	4320      	orrs	r0, r4
 8001e3c:	e7e8      	b.n	8001e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e3e:	bf00      	nop
 8001e40:	40012c00 	.word	0x40012c00

08001e44 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001e46:	f890 4072 	ldrb.w	r4, [r0, #114]	; 0x72
 8001e4a:	2c20      	cmp	r4, #32
 8001e4c:	d001      	beq.n	8001e52 <HAL_UART_Receive_DMA+0xe>
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001e4e:	2002      	movs	r0, #2
  }
}
 8001e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
 8001e52:	2900      	cmp	r1, #0
 8001e54:	d030      	beq.n	8001eb8 <HAL_UART_Receive_DMA+0x74>
 8001e56:	2a00      	cmp	r2, #0
 8001e58:	d02e      	beq.n	8001eb8 <HAL_UART_Receive_DMA+0x74>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001e5a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d0f5      	beq.n	8001e4e <HAL_UART_Receive_DMA+0xa>
 8001e62:	4604      	mov	r4, r0
 8001e64:	2701      	movs	r7, #1
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
    
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001e66:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8001e68:	4e14      	ldr	r6, [pc, #80]	; (8001ebc <HAL_UART_Receive_DMA+0x78>)
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001e6a:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e6e:	2500      	movs	r5, #0
 8001e70:	4613      	mov	r3, r2
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e72:	2722      	movs	r7, #34	; 0x22
 8001e74:	460a      	mov	r2, r1
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 8001e76:	6821      	ldr	r1, [r4, #0]
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
 8001e78:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8001e7a:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7e:	6765      	str	r5, [r4, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e80:	f884 7072 	strb.w	r7, [r4, #114]	; 0x72
    
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001e84:	4f0e      	ldr	r7, [pc, #56]	; (8001ec0 <HAL_UART_Receive_DMA+0x7c>)
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
    
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001e86:	62c6      	str	r6, [r0, #44]	; 0x2c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001e88:	4e0e      	ldr	r6, [pc, #56]	; (8001ec4 <HAL_UART_Receive_DMA+0x80>)
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001e8a:	6385      	str	r5, [r0, #56]	; 0x38
    
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001e8c:	6307      	str	r7, [r0, #48]	; 0x30
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001e8e:	6346      	str	r6, [r0, #52]	; 0x34
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 8001e90:	3124      	adds	r1, #36	; 0x24
 8001e92:	f7fe fc45 	bl	8000720 <HAL_DMA_Start_IT>
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
    
    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e96:	6823      	ldr	r3, [r4, #0]
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e98:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    
    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ea2:	601a      	str	r2, [r3, #0]
    
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	609a      	str	r2, [r3, #8]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    
    return HAL_OK;
 8001eb2:	4628      	mov	r0, r5
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eb4:	609a      	str	r2, [r3, #8]
    
    return HAL_OK;
 8001eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return HAL_ERROR;
 8001eb8:	2001      	movs	r0, #1
 8001eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ebc:	08001ed1 	.word	0x08001ed1
 8001ec0:	08001f0d 	.word	0x08001f0d
 8001ec4:	08001f1d 	.word	0x08001f1d

08001ec8 <HAL_UART_TxCpltCallback>:
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop

08001ecc <HAL_UART_RxCpltCallback>:
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop

08001ed0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001ed2:	6803      	ldr	r3, [r0, #0]
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001ed4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f013 0320 	ands.w	r3, r3, #32
 8001edc:	d111      	bne.n	8001f02 <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;
    
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ede:	6802      	ldr	r2, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
  {
    huart->RxXferCount = 0U;
 8001ee0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ee4:	6813      	ldr	r3, [r2, #0]
 8001ee6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001eea:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eec:	6893      	ldr	r3, [r2, #8]
 8001eee:	f023 0301 	bic.w	r3, r3, #1
 8001ef2:	6093      	str	r3, [r2, #8]
    
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ef4:	6893      	ldr	r3, [r2, #8]
    
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ef6:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
    
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001efc:	6093      	str	r3, [r2, #8]
    
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001efe:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
  }
  
  HAL_UART_RxCpltCallback(huart);
 8001f02:	f7ff ffe3 	bl	8001ecc <HAL_UART_RxCpltCallback>
 8001f06:	bd08      	pop	{r3, pc}

08001f08 <HAL_UART_RxHalfCpltCallback>:
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop

08001f0c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  HAL_UART_RxHalfCpltCallback(huart);
 8001f0e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001f10:	f7ff fffa 	bl	8001f08 <HAL_UART_RxHalfCpltCallback>
 8001f14:	bd08      	pop	{r3, pc}
 8001f16:	bf00      	nop

08001f18 <HAL_UART_ErrorCallback>:
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop

08001f1c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001f1c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  
  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f1e:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8001f22:	2b21      	cmp	r3, #33	; 0x21
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f24:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f26:	d01e      	beq.n	8001f66 <UART_DMAError+0x4a>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }
  
  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f28:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8001f2c:	2b22      	cmp	r3, #34	; 0x22
 8001f2e:	d006      	beq.n	8001f3e <UART_DMAError+0x22>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }
  
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001f30:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001f32:	f043 0310 	orr.w	r3, r3, #16
 8001f36:	6743      	str	r3, [r0, #116]	; 0x74
  HAL_UART_ErrorCallback(huart);
 8001f38:	f7ff ffee 	bl	8001f18 <HAL_UART_ErrorCallback>
 8001f3c:	bd10      	pop	{r4, pc}
    UART_EndTxTransfer(huart);
  }
  
  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8001f3e:	6803      	ldr	r3, [r0, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	0652      	lsls	r2, r2, #25
 8001f44:	d5f4      	bpl.n	8001f30 <UART_DMAError+0x14>
  {
    huart->RxXferCount = 0U;
 8001f46:	2100      	movs	r1, #0
 8001f48:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f52:	601a      	str	r2, [r3, #0]
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f54:	689a      	ldr	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f56:	2420      	movs	r4, #32
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f58:	f022 0201 	bic.w	r2, r2, #1
 8001f5c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001f5e:	6601      	str	r1, [r0, #96]	; 0x60
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f60:	f880 4072 	strb.w	r4, [r0, #114]	; 0x72
 8001f64:	e7e4      	b.n	8001f30 <UART_DMAError+0x14>
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8001f66:	6803      	ldr	r3, [r0, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	0611      	lsls	r1, r2, #24
 8001f6c:	d5dc      	bpl.n	8001f28 <UART_DMAError+0xc>
  {
    huart->TxXferCount = 0U;
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
{
  /* Disable TXEIE and TCIE interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001f74:	681a      	ldr	r2, [r3, #0]
#endif

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f76:	2120      	movs	r1, #32
{
  /* Disable TXEIE and TCIE interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001f78:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001f7c:	601a      	str	r2, [r3, #0]
#endif

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f7e:	f880 1071 	strb.w	r1, [r0, #113]	; 0x71
 8001f82:	e7d1      	b.n	8001f28 <UART_DMAError+0xc>

08001f84 <HAL_UART_IRQHandler>:
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001f84:	6803      	ldr	r3, [r0, #0]
 8001f86:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f88:	6819      	ldr	r1, [r3, #0]
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f8a:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
  uint32_t errorflags;
  
  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
  if (errorflags == RESET)
 8001f8c:	0716      	lsls	r6, r2, #28
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f8e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f90:	689d      	ldr	r5, [r3, #8]
  uint32_t errorflags;
  
  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
  if (errorflags == RESET)
 8001f92:	d04e      	beq.n	8002032 <HAL_UART_IRQHandler+0xae>
  if(   (errorflags != RESET)
     && (   (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
         ||  ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))) )
#else
  if(   (errorflags != RESET)
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001f94:	f015 0001 	ands.w	r0, r5, #1
 8001f98:	d055      	beq.n	8002046 <HAL_UART_IRQHandler+0xc2>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
#endif
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f9a:	07d6      	lsls	r6, r2, #31
 8001f9c:	d507      	bpl.n	8001fae <HAL_UART_IRQHandler+0x2a>
 8001f9e:	05cd      	lsls	r5, r1, #23
 8001fa0:	d505      	bpl.n	8001fae <HAL_UART_IRQHandler+0x2a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001fa2:	2501      	movs	r5, #1
 8001fa4:	621d      	str	r5, [r3, #32]
      
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fa6:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8001fa8:	f045 0501 	orr.w	r5, r5, #1
 8001fac:	6765      	str	r5, [r4, #116]	; 0x74
    }
    
    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fae:	0796      	lsls	r6, r2, #30
 8001fb0:	d577      	bpl.n	80020a2 <HAL_UART_IRQHandler+0x11e>
 8001fb2:	b138      	cbz	r0, 8001fc4 <HAL_UART_IRQHandler+0x40>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001fb4:	2502      	movs	r5, #2
 8001fb6:	621d      	str	r5, [r3, #32]
      
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fb8:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8001fba:	f045 0504 	orr.w	r5, r5, #4
 8001fbe:	6765      	str	r5, [r4, #116]	; 0x74
    }
    
    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fc0:	0755      	lsls	r5, r2, #29
 8001fc2:	d472      	bmi.n	80020aa <HAL_UART_IRQHandler+0x126>
#if defined(USART_CR1_FIFOEN)
    if(   ((isrflags & USART_ISR_ORE) != RESET)
       &&(  ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)))
#else
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 8001fc4:	0715      	lsls	r5, r2, #28
 8001fc6:	d503      	bpl.n	8001fd0 <HAL_UART_IRQHandler+0x4c>
       &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8001fc8:	068e      	lsls	r6, r1, #26
 8001fca:	d475      	bmi.n	80020b8 <HAL_UART_IRQHandler+0x134>
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d173      	bne.n	80020b8 <HAL_UART_IRQHandler+0x134>
      
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
    }
    
    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fd0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001fd2:	2800      	cmp	r0, #0
 8001fd4:	d02c      	beq.n	8002030 <HAL_UART_IRQHandler+0xac>
#if defined(USART_CR1_FIFOEN)
      if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
         && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
#else
      if(((isrflags & USART_ISR_RXNE) != RESET)
 8001fd6:	0695      	lsls	r5, r2, #26
 8001fd8:	d506      	bpl.n	8001fe8 <HAL_UART_IRQHandler+0x64>
         && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fda:	0688      	lsls	r0, r1, #26
 8001fdc:	d504      	bpl.n	8001fe8 <HAL_UART_IRQHandler+0x64>
#endif
      {
        if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8001fde:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001fe0:	b112      	cbz	r2, 8001fe8 <HAL_UART_IRQHandler+0x64>
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	4790      	blx	r2
 8001fe6:	6823      	ldr	r3, [r4, #0]
      }
      
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001fe8:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001fea:	0711      	lsls	r1, r2, #28
 8001fec:	d403      	bmi.n	8001ff6 <HAL_UART_IRQHandler+0x72>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001fee:	689a      	ldr	r2, [r3, #8]
        if (huart->RxISR != NULL) {huart->RxISR(huart);}
      }
      
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001ff0:	f012 0540 	ands.w	r5, r2, #64	; 0x40
 8001ff4:	d070      	beq.n	80020d8 <HAL_UART_IRQHandler+0x154>
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ffc:	601a      	str	r2, [r3, #0]
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ffe:	689a      	ldr	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002000:	2120      	movs	r1, #32
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002008:	f884 1072 	strb.w	r1, [r4, #114]	; 0x72
        Set the UART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800200c:	689a      	ldr	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800200e:	2100      	movs	r1, #0
        Set the UART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002010:	0652      	lsls	r2, r2, #25

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002012:	6621      	str	r1, [r4, #96]	; 0x60
        Set the UART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002014:	d557      	bpl.n	80020c6 <HAL_UART_IRQHandler+0x142>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002016:	689a      	ldr	r2, [r3, #8]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002018:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800201a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800201e:	609a      	str	r2, [r3, #8]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002020:	2800      	cmp	r0, #0
 8002022:	d050      	beq.n	80020c6 <HAL_UART_IRQHandler+0x142>
          {
            /* Set the UART DMA Abort callback : 
            will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002024:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <HAL_UART_IRQHandler+0x160>)
 8002026:	6383      	str	r3, [r0, #56]	; 0x38
            
            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002028:	f7fe fbba 	bl	80007a0 <HAL_DMA_Abort_IT>
 800202c:	2800      	cmp	r0, #0
 800202e:	d14e      	bne.n	80020ce <HAL_UART_IRQHandler+0x14a>
 8002030:	bd70      	pop	{r4, r5, r6, pc}
#if defined(USART_CR1_FIFOEN)
    if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
       && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
           || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
#else
    if(((isrflags & USART_ISR_RXNE) != RESET)
 8002032:	0696      	lsls	r6, r2, #26
 8002034:	d50a      	bpl.n	800204c <HAL_UART_IRQHandler+0xc8>
       && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002036:	068e      	lsls	r6, r1, #26
 8002038:	d508      	bpl.n	800204c <HAL_UART_IRQHandler+0xc8>
#endif
    {
      if (huart->RxISR != NULL) {huart->RxISR(huart);}
 800203a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f7      	beq.n	8002030 <HAL_UART_IRQHandler+0xac>
  {
    HAL_UARTEx_RxFifoFullCallback(huart);
    return;
  }
#endif
}
 8002040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#else
  if(((isrflags & USART_ISR_TXE) != RESET)
     && ((cr1its & USART_CR1_TXEIE) != RESET))
#endif
  {
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 8002044:	4718      	bx	r3
     && (   (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
         ||  ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))) )
#else
  if(   (errorflags != RESET)
     && (   ((cr3its & USART_CR3_EIE) != RESET)
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002046:	f411 7f90 	tst.w	r1, #288	; 0x120
 800204a:	d1a6      	bne.n	8001f9a <HAL_UART_IRQHandler+0x16>
    return;
    
  } /* End if some error occurs */
  
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 800204c:	02d6      	lsls	r6, r2, #11
 800204e:	d408      	bmi.n	8002062 <HAL_UART_IRQHandler+0xde>
#if defined(USART_CR1_FIFOEN)
  if(((isrflags & USART_ISR_TXE_TXFNF) != RESET) 
     && (   ((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
#else
  if(((isrflags & USART_ISR_TXE) != RESET)
 8002050:	0616      	lsls	r6, r2, #24
 8002052:	d515      	bpl.n	8002080 <HAL_UART_IRQHandler+0xfc>
     && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002054:	060d      	lsls	r5, r1, #24
 8002056:	d513      	bpl.n	8002080 <HAL_UART_IRQHandler+0xfc>
#endif
  {
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 8002058:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0e8      	beq.n	8002030 <HAL_UART_IRQHandler+0xac>
 800205e:	4620      	mov	r0, r4
 8002060:	e7ee      	b.n	8002040 <HAL_UART_IRQHandler+0xbc>
    return;
    
  } /* End if some error occurs */
  
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002062:	0268      	lsls	r0, r5, #9
 8002064:	d5f4      	bpl.n	8002050 <HAL_UART_IRQHandler+0xcc>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 8002066:	2220      	movs	r2, #32
  } /* End if some error occurs */
  
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002068:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800206c:	6219      	str	r1, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
    huart->RxState = HAL_UART_STATE_READY;
    HAL_UARTEx_WakeupCallback(huart);
 800206e:	4620      	mov	r0, r4
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 8002070:	f884 2071 	strb.w	r2, [r4, #113]	; 0x71
    huart->RxState = HAL_UART_STATE_READY;
 8002074:	f884 2072 	strb.w	r2, [r4, #114]	; 0x72
  {
    HAL_UARTEx_RxFifoFullCallback(huart);
    return;
  }
#endif
}
 8002078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
    huart->RxState = HAL_UART_STATE_READY;
    HAL_UARTEx_WakeupCallback(huart);
 800207c:	f000 baa8 	b.w	80025d0 <HAL_UARTEx_WakeupCallback>
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
    return;
  }
  
  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002080:	0650      	lsls	r0, r2, #25
 8002082:	d5d5      	bpl.n	8002030 <HAL_UART_IRQHandler+0xac>
 8002084:	064a      	lsls	r2, r1, #25
 8002086:	d5d3      	bpl.n	8002030 <HAL_UART_IRQHandler+0xac>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002088:	681a      	ldr	r2, [r3, #0]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800208a:	2520      	movs	r5, #32
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800208c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
  
  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002090:	2100      	movs	r1, #0
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002092:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
  
  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
  
  HAL_UART_TxCpltCallback(huart);
 8002094:	4620      	mov	r0, r4
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002096:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
  
  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800209a:	6661      	str	r1, [r4, #100]	; 0x64
  
  HAL_UART_TxCpltCallback(huart);
 800209c:	f7ff ff14 	bl	8001ec8 <HAL_UART_TxCpltCallback>
 80020a0:	e7c6      	b.n	8002030 <HAL_UART_IRQHandler+0xac>
      
      huart->ErrorCode |= HAL_UART_ERROR_FE;
    }
    
    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020a2:	0756      	lsls	r6, r2, #29
 80020a4:	d58e      	bpl.n	8001fc4 <HAL_UART_IRQHandler+0x40>
 80020a6:	2800      	cmp	r0, #0
 80020a8:	d08c      	beq.n	8001fc4 <HAL_UART_IRQHandler+0x40>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80020aa:	2504      	movs	r5, #4
 80020ac:	621d      	str	r5, [r3, #32]
      
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020ae:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80020b0:	f045 0502 	orr.w	r5, r5, #2
 80020b4:	6765      	str	r5, [r4, #116]	; 0x74
 80020b6:	e785      	b.n	8001fc4 <HAL_UART_IRQHandler+0x40>
    if(   ((isrflags & USART_ISR_ORE) != RESET)
       &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
             ((cr3its & USART_CR3_EIE) != RESET)))
#endif
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80020b8:	2008      	movs	r0, #8
 80020ba:	6218      	str	r0, [r3, #32]
      
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020bc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80020be:	f040 0008 	orr.w	r0, r0, #8
 80020c2:	6760      	str	r0, [r4, #116]	; 0x74
 80020c4:	e784      	b.n	8001fd0 <HAL_UART_IRQHandler+0x4c>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80020c6:	4620      	mov	r0, r4
 80020c8:	f7ff ff26 	bl	8001f18 <HAL_UART_ErrorCallback>
 80020cc:	bd70      	pop	{r4, r5, r6, pc}
            
            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020ce:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  {
    HAL_UARTEx_RxFifoFullCallback(huart);
    return;
  }
#endif
}
 80020d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            
            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80020d6:	4718      	bx	r3
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
        Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80020d8:	4620      	mov	r0, r4
 80020da:	f7ff ff1d 	bl	8001f18 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020de:	6765      	str	r5, [r4, #116]	; 0x74
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
 80020e2:	bf00      	nop
 80020e4:	080020e9 	.word	0x080020e9

080020e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80020e8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80020ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80020ec:	2200      	movs	r2, #0
 80020ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
  
  HAL_UART_ErrorCallback(huart);
 80020f2:	4618      	mov	r0, r3
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  huart->RxXferCount = 0U;
  huart->TxXferCount = 0U;
 80020f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  
  HAL_UART_ErrorCallback(huart);
 80020f8:	f7ff ff0e 	bl	8001f18 <HAL_UART_ErrorCallback>
 80020fc:	bd08      	pop	{r3, pc}
 80020fe:	bf00      	nop

08002100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002102:	4604      	mov	r4, r0
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002104:	6887      	ldr	r7, [r0, #8]
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	6900      	ldr	r0, [r0, #16]
 800210a:	6961      	ldr	r1, [r4, #20]
 800210c:	681e      	ldr	r6, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800210e:	69e5      	ldr	r5, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002110:	4aa8      	ldr	r2, [pc, #672]	; (80023b4 <UART_SetConfig+0x2b4>)
 8002112:	4338      	orrs	r0, r7
 8002114:	4301      	orrs	r1, r0
 8002116:	4329      	orrs	r1, r5
 8002118:	4032      	ands	r2, r6
 800211a:	430a      	orrs	r2, r1
 800211c:	601a      	str	r2, [r3, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800211e:	6858      	ldr	r0, [r3, #4]
 8002120:	68e1      	ldr	r1, [r4, #12]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002122:	4aa5      	ldr	r2, [pc, #660]	; (80023b8 <UART_SetConfig+0x2b8>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002124:	69a6      	ldr	r6, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002126:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 800212a:	4301      	orrs	r1, r0
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800212c:	4293      	cmp	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800212e:	6059      	str	r1, [r3, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002130:	d012      	beq.n	8002158 <UART_SetConfig+0x58>
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002132:	6899      	ldr	r1, [r3, #8]
 8002134:	6a22      	ldr	r2, [r4, #32]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002136:	48a1      	ldr	r0, [pc, #644]	; (80023bc <UART_SetConfig+0x2bc>)
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002138:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800213c:	4332      	orrs	r2, r6
 800213e:	430a      	orrs	r2, r1
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002140:	4283      	cmp	r3, r0
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002142:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002144:	d040      	beq.n	80021c8 <UART_SetConfig+0xc8>
 8002146:	4a9e      	ldr	r2, [pc, #632]	; (80023c0 <UART_SetConfig+0x2c0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	f000 812a 	beq.w	80023a2 <UART_SetConfig+0x2a2>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 800214e:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002150:	2300      	movs	r3, #0
 8002152:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002154:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 8002156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002158:	689a      	ldr	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800215a:	499a      	ldr	r1, [pc, #616]	; (80023c4 <UART_SetConfig+0x2c4>)
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800215c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002160:	4332      	orrs	r2, r6
 8002162:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002164:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
 8002168:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 800216c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002170:	f000 80c4 	beq.w	80022fc <UART_SetConfig+0x1fc>
 8002174:	f240 80b9 	bls.w	80022ea <UART_SetConfig+0x1ea>
 8002178:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800217c:	d064      	beq.n	8002248 <UART_SetConfig+0x148>
 800217e:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8002182:	d1e4      	bne.n	800214e <UART_SetConfig+0x4e>
 8002184:	2508      	movs	r5, #8
      break;
    case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
#else
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002186:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    
    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800218a:	6862      	ldr	r2, [r4, #4]
 800218c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002190:	4283      	cmp	r3, r0
 8002192:	d8dc      	bhi.n	800214e <UART_SetConfig+0x4e>
 8002194:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002198:	d8d9      	bhi.n	800214e <UART_SetConfig+0x4e>
      {
        ret = HAL_ERROR;
      }
      else
      {
        switch (clocksource)
 800219a:	2d08      	cmp	r5, #8
 800219c:	d8d7      	bhi.n	800214e <UART_SetConfig+0x4e>
 800219e:	a301      	add	r3, pc, #4	; (adr r3, 80021a4 <UART_SetConfig+0xa4>)
 80021a0:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 80021a4:	080022e5 	.word	0x080022e5
 80021a8:	0800214f 	.word	0x0800214f
 80021ac:	080022cb 	.word	0x080022cb
 80021b0:	0800214f 	.word	0x0800214f
 80021b4:	080022ab 	.word	0x080022ab
 80021b8:	0800214f 	.word	0x0800214f
 80021bc:	0800214f 	.word	0x0800214f
 80021c0:	0800214f 	.word	0x0800214f
 80021c4:	08002279 	.word	0x08002279
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021c8:	4b7e      	ldr	r3, [pc, #504]	; (80023c4 <UART_SetConfig+0x2c4>)
 80021ca:	4a7f      	ldr	r2, [pc, #508]	; (80023c8 <UART_SetConfig+0x2c8>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	5cd3      	ldrb	r3, [r2, r3]
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021d6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80021da:	f040 8096 	bne.w	800230a <UART_SetConfig+0x20a>
  {
    switch (clocksource)
 80021de:	2b08      	cmp	r3, #8
 80021e0:	d8b5      	bhi.n	800214e <UART_SetConfig+0x4e>
 80021e2:	a201      	add	r2, pc, #4	; (adr r2, 80021e8 <UART_SetConfig+0xe8>)
 80021e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e8:	08002243 	.word	0x08002243
 80021ec:	0800220d 	.word	0x0800220d
 80021f0:	0800224f 	.word	0x0800224f
 80021f4:	0800214f 	.word	0x0800214f
 80021f8:	08002273 	.word	0x08002273
 80021fc:	0800214f 	.word	0x0800214f
 8002200:	0800214f 	.word	0x0800214f
 8002204:	0800214f 	.word	0x0800214f
 8002208:	08002263 	.word	0x08002263
      break;
    case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800220c:	f7ff f896 	bl	800133c <HAL_RCC_GetPCLK2Freq>
 8002210:	6863      	ldr	r3, [r4, #4]
 8002212:	085a      	lsrs	r2, r3, #1
 8002214:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8002218:	fbb0 f3f3 	udiv	r3, r0, r3
 800221c:	b29b      	uxth	r3, r3
      ret = HAL_ERROR;
      break;
    }
    
    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800221e:	f1a3 0110 	sub.w	r1, r3, #16
 8002222:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002226:	4291      	cmp	r1, r2
 8002228:	d891      	bhi.n	800214e <UART_SetConfig+0x4e>
    {
      brrtemp = usartdiv & 0xFFF0U;
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800222a:	f3c3 0142 	ubfx	r1, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800222e:	6822      	ldr	r2, [r4, #0]
    
    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
    {
      brrtemp = usartdiv & 0xFFF0U;
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002230:	f023 030f 	bic.w	r3, r3, #15
      huart->Instance->BRR = brrtemp;
 8002234:	430b      	orrs	r3, r1
 8002236:	60d3      	str	r3, [r2, #12]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002238:	2300      	movs	r3, #0
 800223a:	2000      	movs	r0, #0
 800223c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800223e:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 8002240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
    case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002242:	f7ff f86b 	bl	800131c <HAL_RCC_GetPCLK1Freq>
 8002246:	e7e3      	b.n	8002210 <UART_SetConfig+0x110>
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002248:	2502      	movs	r5, #2
      break;
    case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
#else
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800224a:	4860      	ldr	r0, [pc, #384]	; (80023cc <UART_SetConfig+0x2cc>)
 800224c:	e79d      	b.n	800218a <UART_SetConfig+0x8a>
      break;
    case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800224e:	6861      	ldr	r1, [r4, #4]
 8002250:	084a      	lsrs	r2, r1, #1
 8002252:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8002256:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800225a:	fbb3 f3f1 	udiv	r3, r3, r1
 800225e:	b29b      	uxth	r3, r3
#endif
      break;
 8002260:	e7dd      	b.n	800221e <UART_SetConfig+0x11e>
      break;
    case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002262:	6862      	ldr	r2, [r4, #4]
 8002264:	0853      	lsrs	r3, r2, #1
 8002266:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800226a:	fbb3 f3f2 	udiv	r3, r3, r2
 800226e:	b29b      	uxth	r3, r3
#endif
      break;
 8002270:	e7d5      	b.n	800221e <UART_SetConfig+0x11e>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002272:	f7fe fc69 	bl	8000b48 <HAL_RCC_GetSysClockFreq>
 8002276:	e7cb      	b.n	8002210 <UART_SetConfig+0x110>
          break;
        case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002278:	0850      	lsrs	r0, r2, #1
 800227a:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800227e:	f04f 0100 	mov.w	r1, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	f141 0100 	adc.w	r1, r1, #0
 800228a:	f7fd ffa1 	bl	80001d0 <__aeabi_uldivmod>
 800228e:	4603      	mov	r3, r0
          ret = HAL_ERROR;
          break;
        }
        
        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002290:	4a4f      	ldr	r2, [pc, #316]	; (80023d0 <UART_SetConfig+0x2d0>)
 8002292:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 8002296:	4291      	cmp	r1, r2
 8002298:	f63f af59 	bhi.w	800214e <UART_SetConfig+0x4e>
    }
    
    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
    {
      huart->Instance->BRR = usartdiv;
 800229c:	6822      	ldr	r2, [r4, #0]
 800229e:	60d3      	str	r3, [r2, #12]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	2000      	movs	r0, #0
 80022a4:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80022a6:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 80022a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          break;
        case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80022aa:	f7fe fc4d 	bl	8000b48 <HAL_RCC_GetSysClockFreq>
 80022ae:	6862      	ldr	r2, [r4, #4]
 80022b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b4:	0856      	lsrs	r6, r2, #1
 80022b6:	2700      	movs	r7, #0
 80022b8:	fbe3 6700 	umlal	r6, r7, r3, r0
 80022bc:	4630      	mov	r0, r6
 80022be:	2300      	movs	r3, #0
 80022c0:	4639      	mov	r1, r7
 80022c2:	f7fd ff85 	bl	80001d0 <__aeabi_uldivmod>
 80022c6:	4603      	mov	r3, r0
#endif
          break;
 80022c8:	e7e2      	b.n	8002290 <UART_SetConfig+0x190>
          break;
        case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80022ca:	4842      	ldr	r0, [pc, #264]	; (80023d4 <UART_SetConfig+0x2d4>)
 80022cc:	0853      	lsrs	r3, r2, #1
 80022ce:	18c0      	adds	r0, r0, r3
 80022d0:	f04f 0100 	mov.w	r1, #0
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	f141 0100 	adc.w	r1, r1, #0
 80022dc:	f7fd ff78 	bl	80001d0 <__aeabi_uldivmod>
 80022e0:	4603      	mov	r3, r0
#endif
          break;
 80022e2:	e7d5      	b.n	8002290 <UART_SetConfig+0x190>
        {
        case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80022e4:	f7ff f81a 	bl	800131c <HAL_RCC_GetPCLK1Freq>
 80022e8:	e7e1      	b.n	80022ae <UART_SetConfig+0x1ae>
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022ea:	2d00      	cmp	r5, #0
 80022ec:	f47f af2f 	bne.w	800214e <UART_SetConfig+0x4e>
    {
    case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
      lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq()/UARTPrescTable[huart->Init.ClockPrescaler]);
#else
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80022f0:	f7ff f814 	bl	800131c <HAL_RCC_GetPCLK1Freq>
      ret = HAL_ERROR;
      break;
    }
    
    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80022f4:	2800      	cmp	r0, #0
 80022f6:	f47f af48 	bne.w	800218a <UART_SetConfig+0x8a>
 80022fa:	e729      	b.n	8002150 <UART_SetConfig+0x50>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
      lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq()/UARTPrescTable[huart->Init.ClockPrescaler]);
#else
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80022fc:	f7fe fc24 	bl	8000b48 <HAL_RCC_GetSysClockFreq>
#endif
      break;
 8002300:	2504      	movs	r5, #4
      ret = HAL_ERROR;
      break;
    }
    
    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002302:	2800      	cmp	r0, #0
 8002304:	f47f af41 	bne.w	800218a <UART_SetConfig+0x8a>
 8002308:	e722      	b.n	8002150 <UART_SetConfig+0x50>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 800230a:	2b08      	cmp	r3, #8
 800230c:	f63f af1f 	bhi.w	800214e <UART_SetConfig+0x4e>
 8002310:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <UART_SetConfig+0x218>)
 8002312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002316:	bf00      	nop
 8002318:	0800233d 	.word	0x0800233d
 800231c:	08002391 	.word	0x08002391
 8002320:	0800237d 	.word	0x0800237d
 8002324:	0800214f 	.word	0x0800214f
 8002328:	0800236b 	.word	0x0800236b
 800232c:	0800214f 	.word	0x0800214f
 8002330:	0800214f 	.word	0x0800214f
 8002334:	0800214f 	.word	0x0800214f
 8002338:	0800235b 	.word	0x0800235b
    {
    case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800233c:	f7fe ffee 	bl	800131c <HAL_RCC_GetPCLK1Freq>
 8002340:	6863      	ldr	r3, [r4, #4]
 8002342:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002346:	fbb0 f3f3 	udiv	r3, r0, r3
 800234a:	b29b      	uxth	r3, r3
      ret = HAL_ERROR;
      break;
    }
    
    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800234c:	f1a3 0110 	sub.w	r1, r3, #16
 8002350:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002354:	4291      	cmp	r1, r2
 8002356:	d9a1      	bls.n	800229c <UART_SetConfig+0x19c>
 8002358:	e6f9      	b.n	800214e <UART_SetConfig+0x4e>
      break;
    case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800235a:	6862      	ldr	r2, [r4, #4]
 800235c:	0853      	lsrs	r3, r2, #1
 800235e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002362:	fbb3 f3f2 	udiv	r3, r3, r2
 8002366:	b29b      	uxth	r3, r3
#endif
      break;
 8002368:	e7f0      	b.n	800234c <UART_SetConfig+0x24c>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800236a:	f7fe fbed 	bl	8000b48 <HAL_RCC_GetSysClockFreq>
 800236e:	6863      	ldr	r3, [r4, #4]
 8002370:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002374:	fbb0 f3f3 	udiv	r3, r0, r3
 8002378:	b29b      	uxth	r3, r3
#endif
      break;
 800237a:	e7e7      	b.n	800234c <UART_SetConfig+0x24c>
      break;
    case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800237c:	6861      	ldr	r1, [r4, #4]
 800237e:	084a      	lsrs	r2, r1, #1
 8002380:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8002384:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002388:	fbb3 f3f1 	udiv	r3, r3, r1
 800238c:	b29b      	uxth	r3, r3
#endif
      break;
 800238e:	e7dd      	b.n	800234c <UART_SetConfig+0x24c>
      break;
    case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002390:	f7fe ffd4 	bl	800133c <HAL_RCC_GetPCLK2Freq>
 8002394:	6863      	ldr	r3, [r4, #4]
 8002396:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800239a:	fbb0 f3f3 	udiv	r3, r0, r3
 800239e:	b29b      	uxth	r3, r3
#endif
      break;
 80023a0:	e7d4      	b.n	800234c <UART_SetConfig+0x24c>
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <UART_SetConfig+0x2c4>)
 80023a4:	4a0c      	ldr	r2, [pc, #48]	; (80023d8 <UART_SetConfig+0x2d8>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	5cd3      	ldrb	r3, [r2, r3]
 80023b0:	e711      	b.n	80021d6 <UART_SetConfig+0xd6>
 80023b2:	bf00      	nop
 80023b4:	efff69f3 	.word	0xefff69f3
 80023b8:	40008000 	.word	0x40008000
 80023bc:	40013800 	.word	0x40013800
 80023c0:	40004400 	.word	0x40004400
 80023c4:	40021000 	.word	0x40021000
 80023c8:	08003934 	.word	0x08003934
 80023cc:	00f42400 	.word	0x00f42400
 80023d0:	000ffcff 	.word	0x000ffcff
 80023d4:	f4240000 	.word	0xf4240000
 80023d8:	08003938 	.word	0x08003938

080023dc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80023dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023de:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80023e0:	b410      	push	{r4}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80023e2:	d506      	bpl.n	80023f2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80023e4:	6804      	ldr	r4, [r0, #0]
 80023e6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80023e8:	6861      	ldr	r1, [r4, #4]
 80023ea:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 80023ee:	430a      	orrs	r2, r1
 80023f0:	6062      	str	r2, [r4, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023f2:	079c      	lsls	r4, r3, #30
 80023f4:	d506      	bpl.n	8002404 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023f6:	6804      	ldr	r4, [r0, #0]
 80023f8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80023fa:	6861      	ldr	r1, [r4, #4]
 80023fc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002400:	430a      	orrs	r2, r1
 8002402:	6062      	str	r2, [r4, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002404:	0759      	lsls	r1, r3, #29
 8002406:	d506      	bpl.n	8002416 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002408:	6804      	ldr	r4, [r0, #0]
 800240a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800240c:	6861      	ldr	r1, [r4, #4]
 800240e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002412:	430a      	orrs	r2, r1
 8002414:	6062      	str	r2, [r4, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002416:	071a      	lsls	r2, r3, #28
 8002418:	d506      	bpl.n	8002428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800241a:	6804      	ldr	r4, [r0, #0]
 800241c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800241e:	6861      	ldr	r1, [r4, #4]
 8002420:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002424:	430a      	orrs	r2, r1
 8002426:	6062      	str	r2, [r4, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002428:	06dc      	lsls	r4, r3, #27
 800242a:	d506      	bpl.n	800243a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800242c:	6804      	ldr	r4, [r0, #0]
 800242e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002430:	68a1      	ldr	r1, [r4, #8]
 8002432:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002436:	430a      	orrs	r2, r1
 8002438:	60a2      	str	r2, [r4, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800243a:	0699      	lsls	r1, r3, #26
 800243c:	d506      	bpl.n	800244c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800243e:	6804      	ldr	r4, [r0, #0]
 8002440:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002442:	68a1      	ldr	r1, [r4, #8]
 8002444:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002448:	430a      	orrs	r2, r1
 800244a:	60a2      	str	r2, [r4, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800244c:	065a      	lsls	r2, r3, #25
 800244e:	d509      	bpl.n	8002464 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002450:	6801      	ldr	r1, [r0, #0]
 8002452:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002454:	684a      	ldr	r2, [r1, #4]
 8002456:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800245a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800245c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002460:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002462:	d00b      	beq.n	800247c <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002464:	061b      	lsls	r3, r3, #24
 8002466:	d506      	bpl.n	8002476 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002468:	6801      	ldr	r1, [r0, #0]
 800246a:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800246c:	684b      	ldr	r3, [r1, #4]
 800246e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
  }
}
 8002476:	f85d 4b04 	ldr.w	r4, [sp], #4
 800247a:	4770      	bx	lr
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800247c:	684c      	ldr	r4, [r1, #4]
 800247e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002480:	f424 04c0 	bic.w	r4, r4, #6291456	; 0x600000
 8002484:	4322      	orrs	r2, r4
 8002486:	604a      	str	r2, [r1, #4]
 8002488:	e7ec      	b.n	8002464 <UART_AdvFeatureConfig+0x88>
 800248a:	bf00      	nop

0800248c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800248c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002490:	9d08      	ldr	r5, [sp, #32]
 8002492:	4680      	mov	r8, r0
 8002494:	460f      	mov	r7, r1
 8002496:	4616      	mov	r6, r2
 8002498:	4699      	mov	r9, r3
 800249a:	f8d8 4000 	ldr.w	r4, [r8]
 800249e:	e001      	b.n	80024a4 <UART_WaitOnFlagUntilTimeout+0x18>
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80024a0:	1c6b      	adds	r3, r5, #1
 80024a2:	d10a      	bne.n	80024ba <UART_WaitOnFlagUntilTimeout+0x2e>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024a4:	69e0      	ldr	r0, [r4, #28]
 80024a6:	ea37 0300 	bics.w	r3, r7, r0
 80024aa:	bf0c      	ite	eq
 80024ac:	2001      	moveq	r0, #1
 80024ae:	2000      	movne	r0, #0
 80024b0:	4286      	cmp	r6, r0
 80024b2:	d0f5      	beq.n	80024a0 <UART_WaitOnFlagUntilTimeout+0x14>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80024b4:	2000      	movs	r0, #0
}
 80024b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80024ba:	b13d      	cbz	r5, 80024cc <UART_WaitOnFlagUntilTimeout+0x40>
 80024bc:	f7fe f83e 	bl	800053c <HAL_GetTick>
 80024c0:	ebc9 0000 	rsb	r0, r9, r0
 80024c4:	4285      	cmp	r5, r0
 80024c6:	d2e8      	bcs.n	800249a <UART_WaitOnFlagUntilTimeout+0xe>
 80024c8:	f8d8 4000 	ldr.w	r4, [r8]
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024d2:	6023      	str	r3, [r4, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024d4:	68a3      	ldr	r3, [r4, #8]
        
        huart->gState = HAL_UART_STATE_READY;
 80024d6:	2220      	movs	r2, #32
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024d8:	f023 0301 	bic.w	r3, r3, #1
        
        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024dc:	2100      	movs	r1, #0
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024de:	60a3      	str	r3, [r4, #8]
        
        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024e0:	2003      	movs	r0, #3
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
        
        huart->gState = HAL_UART_STATE_READY;
 80024e2:	f888 2071 	strb.w	r2, [r8, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024e6:	f888 1070 	strb.w	r1, [r8, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
        
        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;
 80024ea:	f888 2072 	strb.w	r2, [r8, #114]	; 0x72
 80024ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024f2:	bf00      	nop

080024f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024f4:	b570      	push	{r4, r5, r6, lr}
 80024f6:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;
  
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f8:	2500      	movs	r5, #0
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024fa:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;
  
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fc:	6745      	str	r5, [r0, #116]	; 0x74
  
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80024fe:	f7fe f81d 	bl	800053c <HAL_GetTick>
  
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002502:	6823      	ldr	r3, [r4, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	0712      	lsls	r2, r2, #28
  
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002508:	4606      	mov	r6, r0
  
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800250a:	d40c      	bmi.n	8002526 <UART_CheckIdleState+0x32>
      /* Timeout occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	075b      	lsls	r3, r3, #29
 8002510:	d417      	bmi.n	8002542 <UART_CheckIdleState+0x4e>
      return HAL_TIMEOUT;
    }
  }
  
  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002512:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002514:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }
  
  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002516:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->RxState= HAL_UART_STATE_READY;
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800251a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    }
  }
  
  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
 800251e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
  
  return HAL_OK;
}
 8002522:	b002      	add	sp, #8
 8002524:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002526:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	462a      	mov	r2, r5
 800252e:	4603      	mov	r3, r0
 8002530:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002534:	4620      	mov	r0, r4
 8002536:	f7ff ffa9 	bl	800248c <UART_WaitOnFlagUntilTimeout>
 800253a:	b180      	cbz	r0, 800255e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800253c:	2003      	movs	r0, #3
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
  
  return HAL_OK;
}
 800253e:	b002      	add	sp, #8
 8002540:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002542:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002546:	9200      	str	r2, [sp, #0]
 8002548:	4633      	mov	r3, r6
 800254a:	2200      	movs	r2, #0
 800254c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002550:	4620      	mov	r0, r4
 8002552:	f7ff ff9b 	bl	800248c <UART_WaitOnFlagUntilTimeout>
 8002556:	2800      	cmp	r0, #0
 8002558:	d0db      	beq.n	8002512 <UART_CheckIdleState+0x1e>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800255a:	2003      	movs	r0, #3
 800255c:	e7ef      	b.n	800253e <UART_CheckIdleState+0x4a>
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	e7d4      	b.n	800250c <UART_CheckIdleState+0x18>
 8002562:	bf00      	nop

08002564 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002564:	b390      	cbz	r0, 80025cc <HAL_UART_Init+0x68>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002566:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
  *         parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800256a:	b510      	push	{r4, lr}
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800256c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002570:	4604      	mov	r4, r0
 8002572:	b303      	cbz	r3, 80025b6 <HAL_UART_Init+0x52>
  }
  
  huart->gState = HAL_UART_STATE_BUSY;
  
  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002574:	6822      	ldr	r2, [r4, #0]
    
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }
  
  huart->gState = HAL_UART_STATE_BUSY;
 8002576:	2324      	movs	r3, #36	; 0x24
 8002578:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  
  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800257c:	6813      	ldr	r3, [r2, #0]
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	6013      	str	r3, [r2, #0]
  
  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002584:	4620      	mov	r0, r4
 8002586:	f7ff fdbb 	bl	8002100 <UART_SetConfig>
 800258a:	2801      	cmp	r0, #1
 800258c:	d01c      	beq.n	80025c8 <HAL_UART_Init+0x64>
  {
    return HAL_ERROR;
  }
  
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800258e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002590:	b9b3      	cbnz	r3, 80025c0 <HAL_UART_Init+0x5c>
  }
  
  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800259a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025a2:	609a      	str	r2, [r3, #8]
  
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
  
  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025aa:	4620      	mov	r0, r4
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
  
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80025ac:	601a      	str	r2, [r3, #0]
  
  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 80025ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025b2:	f7ff bf9f 	b.w	80024f4 <UART_CheckIdleState>
  }
  
  if(huart->gState == HAL_UART_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025b6:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ba:	f001 f8a1 	bl	8003700 <HAL_UART_MspInit>
 80025be:	e7d9      	b.n	8002574 <HAL_UART_Init+0x10>
    return HAL_ERROR;
  }
  
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
  {
    UART_AdvFeatureConfig(huart);
 80025c0:	4620      	mov	r0, r4
 80025c2:	f7ff ff0b 	bl	80023dc <UART_AdvFeatureConfig>
 80025c6:	e7e4      	b.n	8002592 <HAL_UART_Init+0x2e>
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 80025c8:	2001      	movs	r0, #1
 80025ca:	bd10      	pop	{r4, pc}
 80025cc:	2001      	movs	r0, #1
 80025ce:	4770      	bx	lr

080025d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop

080025d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80025d4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80025d6:	f000 fc15 	bl	8002e04 <vTaskStartScheduler>
  
  return osOK;
}
 80025da:	2000      	movs	r0, #0
 80025dc:	bd08      	pop	{r3, pc}
 80025de:	bf00      	nop

080025e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80025e0:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025e2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80025e6:	b085      	sub	sp, #20
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80025e8:	2c84      	cmp	r4, #132	; 0x84
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80025ea:	4602      	mov	r2, r0
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
    fpriority += (priority - osPriorityIdle);
 80025ec:	bf14      	ite	ne
 80025ee:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80025f0:	2400      	moveq	r4, #0

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025f2:	ad03      	add	r5, sp, #12
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80025f4:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025f6:	6840      	ldr	r0, [r0, #4]
 80025f8:	6811      	ldr	r1, [r2, #0]
 80025fa:	8a12      	ldrh	r2, [r2, #16]
 80025fc:	e88d 0030 	stmia.w	sp, {r4, r5}
 8002600:	f000 fb14 	bl	8002c2c <xTaskCreate>
 8002604:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002606:	bf0c      	ite	eq
 8002608:	9803      	ldreq	r0, [sp, #12]
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 800260a:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
}
 800260c:	b005      	add	sp, #20
 800260e:	bd30      	pop	{r4, r5, pc}

08002610 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002610:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002612:	2800      	cmp	r0, #0
 8002614:	bf08      	it	eq
 8002616:	2001      	moveq	r0, #1
 8002618:	f000 fd62 	bl	80030e0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800261c:	2000      	movs	r0, #0
 800261e:	bd08      	pop	{r3, pc}

08002620 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002620:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002622:	f000 fe07 	bl	8003234 <xTaskGetSchedulerState>
 8002626:	2801      	cmp	r0, #1
 8002628:	d003      	beq.n	8002632 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800262a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800262e:	f000 b911 	b.w	8002854 <xPortSysTickHandler>
 8002632:	bd08      	pop	{r3, pc}

08002634 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002634:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002638:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800263c:	2200      	movs	r2, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800263e:	6081      	str	r1, [r0, #8]
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002640:	e880 000c 	stmia.w	r0, {r2, r3}
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002644:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002646:	6103      	str	r3, [r0, #16]
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop

0800264c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800264c:	2300      	movs	r3, #0
 800264e:	6103      	str	r3, [r0, #16]
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop

08002654 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002654:	e890 000c 	ldmia.w	r0, {r2, r3}
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002658:	b410      	push	{r4}

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800265a:	689c      	ldr	r4, [r3, #8]
 800265c:	608c      	str	r4, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800265e:	689c      	ldr	r4, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002660:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002662:	3201      	adds	r2, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002664:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002666:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 8002668:	f85d 4b04 	ldr.w	r4, [sp], #4

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800266c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800266e:	6002      	str	r2, [r0, #0]
}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop

08002674 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002674:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002676:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002678:	1c6b      	adds	r3, r5, #1
 800267a:	d011      	beq.n	80026a0 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800267c:	f100 0208 	add.w	r2, r0, #8
 8002680:	e000      	b.n	8002684 <vListInsert+0x10>
 8002682:	461a      	mov	r2, r3
 8002684:	6853      	ldr	r3, [r2, #4]
 8002686:	681c      	ldr	r4, [r3, #0]
 8002688:	42a5      	cmp	r5, r4
 800268a:	d2fa      	bcs.n	8002682 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800268c:	6804      	ldr	r4, [r0, #0]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800268e:	604b      	str	r3, [r1, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002690:	3401      	adds	r4, #1
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002692:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002694:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002696:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002698:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800269a:	6004      	str	r4, [r0, #0]
}
 800269c:	bc30      	pop	{r4, r5}
 800269e:	4770      	bx	lr
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026a0:	6902      	ldr	r2, [r0, #16]
 80026a2:	6853      	ldr	r3, [r2, #4]
 80026a4:	e7f2      	b.n	800268c <vListInsert+0x18>
 80026a6:	bf00      	nop

080026a8 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026a8:	6843      	ldr	r3, [r0, #4]
 80026aa:	6881      	ldr	r1, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80026ac:	6902      	ldr	r2, [r0, #16]
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026ae:	b410      	push	{r4}
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026b0:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026b2:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026b4:	6854      	ldr	r4, [r2, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026b6:	604b      	str	r3, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 80026b8:	6813      	ldr	r3, [r2, #0]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026ba:	42a0      	cmp	r0, r4
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026bc:	bf08      	it	eq
 80026be:	6051      	streq	r1, [r2, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 80026c0:	3b01      	subs	r3, #1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80026c2:	2100      	movs	r1, #0
 80026c4:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 80026c6:	f85d 4b04 	ldr.w	r4, [sp], #4
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 80026ca:	6013      	str	r3, [r2, #0]

	return pxList->uxNumberOfItems;
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	4770      	bx	lr

080026d0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <prvTaskExitError+0x2c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	d008      	beq.n	80026ea <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026dc:	f383 8811 	msr	BASEPRI, r3
 80026e0:	f3bf 8f6f 	isb	sy
 80026e4:	f3bf 8f4f 	dsb	sy
 80026e8:	e7fe      	b.n	80026e8 <prvTaskExitError+0x18>
 80026ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	e7fe      	b.n	80026fa <prvTaskExitError+0x2a>
 80026fc:	20000000 	.word	0x20000000

08002700 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002700:	4806      	ldr	r0, [pc, #24]	; (800271c <prvPortStartFirstTask+0x1c>)
 8002702:	6800      	ldr	r0, [r0, #0]
 8002704:	6800      	ldr	r0, [r0, #0]
 8002706:	f380 8808 	msr	MSP, r0
 800270a:	b662      	cpsie	i
 800270c:	b661      	cpsie	f
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	f3bf 8f6f 	isb	sy
 8002716:	df00      	svc	0
 8002718:	bf00      	nop
 800271a:	0000      	.short	0x0000
 800271c:	e000ed08 	.word	0xe000ed08

08002720 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002720:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002730 <vPortEnableVFP+0x10>
 8002724:	6801      	ldr	r1, [r0, #0]
 8002726:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800272a:	6001      	str	r1, [r0, #0]
 800272c:	4770      	bx	lr
 800272e:	0000      	.short	0x0000
 8002730:	e000ed88 	.word	0xe000ed88

08002734 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002734:	b430      	push	{r4, r5}
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002736:	f021 0101 	bic.w	r1, r1, #1

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800273a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800273e:	4c07      	ldr	r4, [pc, #28]	; (800275c <pxPortInitialiseStack+0x28>)
 8002740:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002744:	f06f 0302 	mvn.w	r3, #2
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002748:	f840 2c20 	str.w	r2, [r0, #-32]

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800274c:	e900 0022 	stmdb	r0, {r1, r5}
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002750:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8002754:	bc30      	pop	{r4, r5}
 8002756:	3844      	subs	r0, #68	; 0x44
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	080026d1 	.word	0x080026d1

08002760 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <pxCurrentTCBConst2>)
 8002762:	6819      	ldr	r1, [r3, #0]
 8002764:	6808      	ldr	r0, [r1, #0]
 8002766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800276a:	f380 8809 	msr	PSP, r0
 800276e:	f3bf 8f6f 	isb	sy
 8002772:	f04f 0000 	mov.w	r0, #0
 8002776:	f380 8811 	msr	BASEPRI, r0
 800277a:	4770      	bx	lr
 800277c:	f3af 8000 	nop.w

08002780 <pxCurrentTCBConst2>:
 8002780:	20000cc8 	.word	0x20000cc8

08002784 <vPortEnterCritical>:
 8002784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002788:	f383 8811 	msr	BASEPRI, r3
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002794:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <vPortEnterCritical+0x3c>)
 8002796:	6813      	ldr	r3, [r2, #0]
 8002798:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800279a:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800279c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800279e:	d000      	beq.n	80027a2 <vPortEnterCritical+0x1e>
 80027a0:	4770      	bx	lr
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <vPortEnterCritical+0x40>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80027aa:	d0f9      	beq.n	80027a0 <vPortEnterCritical+0x1c>
 80027ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	e7fe      	b.n	80027bc <vPortEnterCritical+0x38>
 80027be:	bf00      	nop
 80027c0:	20000000 	.word	0x20000000
 80027c4:	e000ed04 	.word	0xe000ed04

080027c8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80027c8:	4a08      	ldr	r2, [pc, #32]	; (80027ec <vPortExitCritical+0x24>)
 80027ca:	6813      	ldr	r3, [r2, #0]
 80027cc:	b943      	cbnz	r3, 80027e0 <vPortExitCritical+0x18>
 80027ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	e7fe      	b.n	80027de <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80027e0:	3b01      	subs	r3, #1
 80027e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80027e4:	b90b      	cbnz	r3, 80027ea <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027e6:	f383 8811 	msr	BASEPRI, r3
 80027ea:	4770      	bx	lr
 80027ec:	20000000 	.word	0x20000000

080027f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80027f0:	f3ef 8009 	mrs	r0, PSP
 80027f4:	f3bf 8f6f 	isb	sy
 80027f8:	4b15      	ldr	r3, [pc, #84]	; (8002850 <pxCurrentTCBConst>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	f01e 0f10 	tst.w	lr, #16
 8002800:	bf08      	it	eq
 8002802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800280a:	6010      	str	r0, [r2, #0]
 800280c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002814:	f380 8811 	msr	BASEPRI, r0
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f000 fcd0 	bl	80031c4 <vTaskSwitchContext>
 8002824:	f04f 0000 	mov.w	r0, #0
 8002828:	f380 8811 	msr	BASEPRI, r0
 800282c:	bc08      	pop	{r3}
 800282e:	6819      	ldr	r1, [r3, #0]
 8002830:	6808      	ldr	r0, [r1, #0]
 8002832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002836:	f01e 0f10 	tst.w	lr, #16
 800283a:	bf08      	it	eq
 800283c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002840:	f380 8809 	msr	PSP, r0
 8002844:	f3bf 8f6f 	isb	sy
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	f3af 8000 	nop.w

08002850 <pxCurrentTCBConst>:
 8002850:	20000cc8 	.word	0x20000cc8

08002854 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002854:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285a:	f383 8811 	msr	BASEPRI, r3
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002866:	f000 fb11 	bl	8002e8c <xTaskIncrementTick>
 800286a:	b118      	cbz	r0, 8002874 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <xPortSysTickHandler+0x28>)
 800286e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002872:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002874:	2300      	movs	r3, #0
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	bd08      	pop	{r3, pc}
 800287c:	e000ed04 	.word	0xe000ed04

08002880 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <vPortSetupTimerInterrupt+0x1c>)
 8002882:	4907      	ldr	r1, [pc, #28]	; (80028a0 <vPortSetupTimerInterrupt+0x20>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4807      	ldr	r0, [pc, #28]	; (80028a4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002888:	4a07      	ldr	r2, [pc, #28]	; (80028a8 <vPortSetupTimerInterrupt+0x28>)
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800288a:	fba1 1303 	umull	r1, r3, r1, r3
 800288e:	099b      	lsrs	r3, r3, #6
 8002890:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002892:	2107      	movs	r1, #7
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002894:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002896:	6011      	str	r1, [r2, #0]
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000004 	.word	0x20000004
 80028a0:	10624dd3 	.word	0x10624dd3
 80028a4:	e000e014 	.word	0xe000e014
 80028a8:	e000e010 	.word	0xe000e010

080028ac <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80028ac:	4b31      	ldr	r3, [pc, #196]	; (8002974 <xPortStartScheduler+0xc8>)
 80028ae:	4a32      	ldr	r2, [pc, #200]	; (8002978 <xPortStartScheduler+0xcc>)
 80028b0:	6819      	ldr	r1, [r3, #0]
 80028b2:	4291      	cmp	r1, r2
 80028b4:	d04c      	beq.n	8002950 <xPortStartScheduler+0xa4>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b30      	ldr	r3, [pc, #192]	; (800297c <xPortStartScheduler+0xd0>)
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d051      	beq.n	8002962 <xPortStartScheduler+0xb6>

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80028be:	b510      	push	{r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80028c0:	4b2f      	ldr	r3, [pc, #188]	; (8002980 <xPortStartScheduler+0xd4>)

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80028c2:	4c30      	ldr	r4, [pc, #192]	; (8002984 <xPortStartScheduler+0xd8>)
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80028c4:	781a      	ldrb	r2, [r3, #0]
		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80028c6:	4830      	ldr	r0, [pc, #192]	; (8002988 <xPortStartScheduler+0xdc>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80028c8:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80028ca:	b2d2      	uxtb	r2, r2

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80028cc:	21ff      	movs	r1, #255	; 0xff
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80028ce:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80028d0:	7019      	strb	r1, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80028da:	f89d 2003 	ldrb.w	r2, [sp, #3]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028de:	f89d 1003 	ldrb.w	r1, [sp, #3]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80028e2:	f002 0250 	and.w	r2, r2, #80	; 0x50

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80028e6:	2307      	movs	r3, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028e8:	0609      	lsls	r1, r1, #24

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80028ea:	7022      	strb	r2, [r4, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80028ec:	6003      	str	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80028ee:	d50e      	bpl.n	800290e <xPortStartScheduler+0x62>
 80028f0:	2306      	movs	r3, #6
 80028f2:	e000      	b.n	80028f6 <xPortStartScheduler+0x4a>
 80028f4:	460b      	mov	r3, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80028f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80028fa:	0052      	lsls	r2, r2, #1
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	f88d 2003 	strb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002902:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002906:	0612      	lsls	r2, r2, #24
 8002908:	f103 31ff 	add.w	r1, r3, #4294967295
 800290c:	d4f2      	bmi.n	80028f4 <xPortStartScheduler+0x48>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800290e:	9901      	ldr	r1, [sp, #4]
 8002910:	4c1b      	ldr	r4, [pc, #108]	; (8002980 <xPortStartScheduler+0xd4>)
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002912:	4a1e      	ldr	r2, [pc, #120]	; (800298c <xPortStartScheduler+0xe0>)
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002914:	021b      	lsls	r3, r3, #8

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002916:	b2c9      	uxtb	r1, r1
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002918:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800291c:	6003      	str	r3, [r0, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800291e:	7021      	strb	r1, [r4, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002920:	6813      	ldr	r3, [r2, #0]
 8002922:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002926:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002928:	6813      	ldr	r3, [r2, #0]
 800292a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800292e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002930:	f7ff ffa6 	bl	8002880 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002934:	4b16      	ldr	r3, [pc, #88]	; (8002990 <xPortStartScheduler+0xe4>)
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800293a:	f7ff fef1 	bl	8002720 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800293e:	4a15      	ldr	r2, [pc, #84]	; (8002994 <xPortStartScheduler+0xe8>)
 8002940:	6813      	ldr	r3, [r2, #0]
 8002942:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002946:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002948:	f7ff feda 	bl	8002700 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800294c:	f7ff fec0 	bl	80026d0 <prvTaskExitError>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	e7fe      	b.n	8002960 <xPortStartScheduler+0xb4>
 8002962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	e7fe      	b.n	8002972 <xPortStartScheduler+0xc6>
 8002974:	e000ed00 	.word	0xe000ed00
 8002978:	410fc271 	.word	0x410fc271
 800297c:	410fc270 	.word	0x410fc270
 8002980:	e000e400 	.word	0xe000e400
 8002984:	20000024 	.word	0x20000024
 8002988:	20000028 	.word	0x20000028
 800298c:	e000ed20 	.word	0xe000ed20
 8002990:	20000000 	.word	0x20000000
 8002994:	e000ef34 	.word	0xe000ef34

08002998 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002998:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <prvInsertBlockIntoFreeList+0x48>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4282      	cmp	r2, r0
 800299e:	d201      	bcs.n	80029a4 <prvInsertBlockIntoFreeList+0xc>
 80029a0:	4613      	mov	r3, r2
 80029a2:	e7fa      	b.n	800299a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80029a4:	6859      	ldr	r1, [r3, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80029a6:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80029a8:	185c      	adds	r4, r3, r1
 80029aa:	42a0      	cmp	r0, r4
 80029ac:	d103      	bne.n	80029b6 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80029ae:	6840      	ldr	r0, [r0, #4]
 80029b0:	4401      	add	r1, r0
 80029b2:	6059      	str	r1, [r3, #4]
 80029b4:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80029b6:	6841      	ldr	r1, [r0, #4]
 80029b8:	1844      	adds	r4, r0, r1
 80029ba:	42a2      	cmp	r2, r4
 80029bc:	d108      	bne.n	80029d0 <prvInsertBlockIntoFreeList+0x38>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80029be:	4c09      	ldr	r4, [pc, #36]	; (80029e4 <prvInsertBlockIntoFreeList+0x4c>)
 80029c0:	6824      	ldr	r4, [r4, #0]
 80029c2:	42a2      	cmp	r2, r4
 80029c4:	d004      	beq.n	80029d0 <prvInsertBlockIntoFreeList+0x38>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80029c6:	ca14      	ldmia	r2, {r2, r4}
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80029c8:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80029ca:	6002      	str	r2, [r0, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80029cc:	6041      	str	r1, [r0, #4]
 80029ce:	e000      	b.n	80029d2 <prvInsertBlockIntoFreeList+0x3a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80029d0:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80029d2:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80029d4:	bf18      	it	ne
 80029d6:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000034 	.word	0x20000034
 80029e4:	20000030 	.word	0x20000030

080029e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80029e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029ec:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80029ee:	f000 fa45 	bl	8002e7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80029f2:	4842      	ldr	r0, [pc, #264]	; (8002afc <pvPortMalloc+0x114>)
 80029f4:	6803      	ldr	r3, [r0, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d05a      	beq.n	8002ab0 <pvPortMalloc+0xc8>
 80029fa:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <pvPortMalloc+0x118>)
 80029fc:	681d      	ldr	r5, [r3, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80029fe:	422c      	tst	r4, r5
 8002a00:	d150      	bne.n	8002aa4 <pvPortMalloc+0xbc>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002a02:	2c00      	cmp	r4, #0
 8002a04:	d04e      	beq.n	8002aa4 <pvPortMalloc+0xbc>
			{
				xWantedSize += xHeapStructSize;
 8002a06:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a0a:	0759      	lsls	r1, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a0c:	bf1c      	itt	ne
 8002a0e:	f023 0307 	bicne.w	r3, r3, #7
 8002a12:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d045      	beq.n	8002aa4 <pvPortMalloc+0xbc>
 8002a18:	4f3a      	ldr	r7, [pc, #232]	; (8002b04 <pvPortMalloc+0x11c>)
 8002a1a:	683e      	ldr	r6, [r7, #0]
 8002a1c:	42b3      	cmp	r3, r6
 8002a1e:	d841      	bhi.n	8002aa4 <pvPortMalloc+0xbc>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8002a20:	4939      	ldr	r1, [pc, #228]	; (8002b08 <pvPortMalloc+0x120>)
 8002a22:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a24:	e006      	b.n	8002a34 <pvPortMalloc+0x4c>
 8002a26:	f8d4 e000 	ldr.w	lr, [r4]
 8002a2a:	f1be 0f00 	cmp.w	lr, #0
 8002a2e:	d004      	beq.n	8002a3a <pvPortMalloc+0x52>
 8002a30:	4621      	mov	r1, r4
 8002a32:	4674      	mov	r4, lr
 8002a34:	6862      	ldr	r2, [r4, #4]
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d8f5      	bhi.n	8002a26 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002a3a:	6800      	ldr	r0, [r0, #0]
 8002a3c:	4284      	cmp	r4, r0
 8002a3e:	d031      	beq.n	8002aa4 <pvPortMalloc+0xbc>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a40:	6820      	ldr	r0, [r4, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a42:	f8d1 8000 	ldr.w	r8, [r1]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a46:	6008      	str	r0, [r1, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a48:	1ad1      	subs	r1, r2, r3
 8002a4a:	2910      	cmp	r1, #16
 8002a4c:	d910      	bls.n	8002a70 <pvPortMalloc+0x88>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a4e:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a50:	0742      	lsls	r2, r0, #29
 8002a52:	d008      	beq.n	8002a66 <pvPortMalloc+0x7e>
 8002a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	e7fe      	b.n	8002a64 <pvPortMalloc+0x7c>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a66:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002a68:	6063      	str	r3, [r4, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a6a:	f7ff ff95 	bl	8002998 <prvInsertBlockIntoFreeList>
 8002a6e:	6862      	ldr	r2, [r4, #4]
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a70:	4826      	ldr	r0, [pc, #152]	; (8002b0c <pvPortMalloc+0x124>)
 8002a72:	6801      	ldr	r1, [r0, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a74:	1ab3      	subs	r3, r6, r2

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a76:	428b      	cmp	r3, r1
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a78:	bf38      	it	cc
 8002a7a:	6003      	strcc	r3, [r0, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a7c:	432a      	orrs	r2, r5
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a7e:	603b      	str	r3, [r7, #0]
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	6023      	str	r3, [r4, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a84:	6062      	str	r2, [r4, #4]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a86:	f108 0508 	add.w	r5, r8, #8
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002a8a:	f000 faa3 	bl	8002fd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a8e:	076b      	lsls	r3, r5, #29
 8002a90:	d00b      	beq.n	8002aaa <pvPortMalloc+0xc2>
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	e7fe      	b.n	8002aa2 <pvPortMalloc+0xba>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002aa4:	f000 fa96 	bl	8002fd4 <xTaskResumeAll>
 8002aa8:	2500      	movs	r5, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8002aaa:	4628      	mov	r0, r5
 8002aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002ab0:	4a17      	ldr	r2, [pc, #92]	; (8002b10 <pvPortMalloc+0x128>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002ab2:	0755      	lsls	r5, r2, #29
 8002ab4:	d01f      	beq.n	8002af6 <pvPortMalloc+0x10e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002ab6:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ab8:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002abc:	f602 33b8 	addw	r3, r2, #3000	; 0xbb8
 8002ac0:	1a5b      	subs	r3, r3, r1
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ac2:	460a      	mov	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002ac4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002ac6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ac8:	f023 0307 	bic.w	r3, r3, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002acc:	4e0d      	ldr	r6, [pc, #52]	; (8002b04 <pvPortMalloc+0x11c>)

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ace:	4d0e      	ldr	r5, [pc, #56]	; (8002b08 <pvPortMalloc+0x120>)
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ad0:	f8df e038 	ldr.w	lr, [pc, #56]	; 8002b0c <pvPortMalloc+0x124>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002ad4:	4f0a      	ldr	r7, [pc, #40]	; (8002b00 <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8002ad6:	6003      	str	r3, [r0, #0]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ad8:	1a99      	subs	r1, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ada:	6031      	str	r1, [r6, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8002adc:	2600      	movs	r6, #0
 8002ade:	e885 0044 	stmia.w	r5, {r2, r6}
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002ae2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 8002ae6:	605e      	str	r6, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002ae8:	601e      	str	r6, [r3, #0]
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002aea:	f8ce 1000 	str.w	r1, [lr]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002aee:	603d      	str	r5, [r7, #0]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002af0:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	e783      	b.n	80029fe <pvPortMalloc+0x16>
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002af6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002afa:	e7e3      	b.n	8002ac4 <pvPortMalloc+0xdc>
 8002afc:	20000030 	.word	0x20000030
 8002b00:	20000bf4 	.word	0x20000bf4
 8002b04:	2000002c 	.word	0x2000002c
 8002b08:	20000034 	.word	0x20000034
 8002b0c:	20000bf8 	.word	0x20000bf8
 8002b10:	2000003c 	.word	0x2000003c

08002b14 <vPortFree>:
void vPortFree( void *pv )
{
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8002b14:	b1d0      	cbz	r0, 8002b4c <vPortFree+0x38>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b16:	4a19      	ldr	r2, [pc, #100]	; (8002b7c <vPortFree+0x68>)
 8002b18:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	4213      	tst	r3, r2
 8002b20:	d108      	bne.n	8002b34 <vPortFree+0x20>
 8002b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	e7fe      	b.n	8002b32 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b34:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002b38:	b149      	cbz	r1, 8002b4e <vPortFree+0x3a>
 8002b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	e7fe      	b.n	8002b4a <vPortFree+0x36>
 8002b4c:	4770      	bx	lr
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b4e:	ea23 0302 	bic.w	r3, r3, r2
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002b52:	b510      	push	{r4, lr}
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b54:	f840 3c04 	str.w	r3, [r0, #-4]
 8002b58:	4604      	mov	r4, r0

				vTaskSuspendAll();
 8002b5a:	f000 f98f 	bl	8002e7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b5e:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <vPortFree+0x6c>)
 8002b60:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8002b64:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b66:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b6a:	440b      	add	r3, r1
 8002b6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b6e:	f7ff ff13 	bl	8002998 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8002b76:	f000 ba2d 	b.w	8002fd4 <xTaskResumeAll>
 8002b7a:	bf00      	nop
 8002b7c:	20000bf4 	.word	0x20000bf4
 8002b80:	2000002c 	.word	0x2000002c

08002b84 <prvResetNextTaskUnblockTime.part.1>:
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b84:	4a03      	ldr	r2, [pc, #12]	; (8002b94 <prvResetNextTaskUnblockTime.part.1+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b86:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <prvResetNextTaskUnblockTime.part.1+0x14>)
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b8c:	68d2      	ldr	r2, [r2, #12]
 8002b8e:	6852      	ldr	r2, [r2, #4]
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	4770      	bx	lr
 8002b94:	20000c00 	.word	0x20000c00
 8002b98:	20000ccc 	.word	0x20000ccc

08002b9c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <prvAddCurrentTaskToDelayedList+0x74>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ba0:	4d1c      	ldr	r5, [pc, #112]	; (8002c14 <prvAddCurrentTaskToDelayedList+0x78>)


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002ba2:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ba4:	682b      	ldr	r3, [r5, #0]
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002ba6:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ba8:	1d18      	adds	r0, r3, #4
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002baa:	460f      	mov	r7, r1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002bac:	f7ff fd7c 	bl	80026a8 <uxListRemove>
 8002bb0:	b940      	cbnz	r0, 8002bc4 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002bb2:	682b      	ldr	r3, [r5, #0]
 8002bb4:	4918      	ldr	r1, [pc, #96]	; (8002c18 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002bb6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002bb8:	680a      	ldr	r2, [r1, #0]
 8002bba:	2301      	movs	r3, #1
 8002bbc:	4083      	lsls	r3, r0
 8002bbe:	ea22 0303 	bic.w	r3, r2, r3
 8002bc2:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002bc4:	1c63      	adds	r3, r4, #1
 8002bc6:	d019      	beq.n	8002bfc <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002bc8:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002bca:	682b      	ldr	r3, [r5, #0]
 8002bcc:	4a11      	ldr	r2, [pc, #68]	; (8002c14 <prvAddCurrentTaskToDelayedList+0x78>)
 8002bce:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002bd0:	42a6      	cmp	r6, r4
 8002bd2:	d80b      	bhi.n	8002bec <prvAddCurrentTaskToDelayedList+0x50>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bd4:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <prvAddCurrentTaskToDelayedList+0x80>)
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	6811      	ldr	r1, [r2, #0]
 8002bda:	3104      	adds	r1, #4
 8002bdc:	f7ff fd4a 	bl	8002674 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <prvAddCurrentTaskToDelayedList+0x84>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002be6:	bf38      	it	cc
 8002be8:	601c      	strcc	r4, [r3, #0]
 8002bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <prvAddCurrentTaskToDelayedList+0x88>)
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	6811      	ldr	r1, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002bf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bf6:	3104      	adds	r1, #4
 8002bf8:	f7ff bd3c 	b.w	8002674 <vListInsert>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002bfc:	2f00      	cmp	r7, #0
 8002bfe:	d0e3      	beq.n	8002bc8 <prvAddCurrentTaskToDelayedList+0x2c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c00:	6829      	ldr	r1, [r5, #0]
 8002c02:	4809      	ldr	r0, [pc, #36]	; (8002c28 <prvAddCurrentTaskToDelayedList+0x8c>)
 8002c04:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002c06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c0a:	f7ff bd23 	b.w	8002654 <vListInsertEnd>
 8002c0e:	bf00      	nop
 8002c10:	20000cd4 	.word	0x20000cd4
 8002c14:	20000cc8 	.word	0x20000cc8
 8002c18:	20000d20 	.word	0x20000d20
 8002c1c:	20000c00 	.word	0x20000c00
 8002c20:	20000ccc 	.word	0x20000ccc
 8002c24:	20000cd8 	.word	0x20000cd8
 8002c28:	20000d0c 	.word	0x20000d0c

08002c2c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c30:	ea4f 0882 	mov.w	r8, r2, lsl #2
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c34:	4606      	mov	r6, r0
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c36:	4640      	mov	r0, r8
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c38:	4689      	mov	r9, r1
 8002c3a:	461f      	mov	r7, r3
 8002c3c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c3e:	f7ff fed3 	bl	80029e8 <pvPortMalloc>

			if( pxStack != NULL )
 8002c42:	2800      	cmp	r0, #0
 8002c44:	f000 808f 	beq.w	8002d66 <xTaskCreate+0x13a>
 8002c48:	4682      	mov	sl, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002c4a:	2054      	movs	r0, #84	; 0x54
 8002c4c:	f7ff fecc 	bl	80029e8 <pvPortMalloc>

				if( pxNewTCB != NULL )
 8002c50:	4604      	mov	r4, r0
 8002c52:	2800      	cmp	r0, #0
 8002c54:	f000 8084 	beq.w	8002d60 <xTaskCreate+0x134>
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002c58:	f1a8 0804 	sub.w	r8, r8, #4
 8002c5c:	44d0      	add	r8, sl
 8002c5e:	f028 0807 	bic.w	r8, r8, #7
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */

				if( pxNewTCB != NULL )
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c62:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
 8002c66:	f109 33ff 	add.w	r3, r9, #4294967295
 8002c6a:	f109 010f 	add.w	r1, r9, #15
 8002c6e:	f100 0233 	add.w	r2, r0, #51	; 0x33
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c72:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002c76:	f802 0f01 	strb.w	r0, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002c7a:	7818      	ldrb	r0, [r3, #0]
 8002c7c:	b108      	cbz	r0, 8002c82 <xTaskCreate+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c7e:	428b      	cmp	r3, r1
 8002c80:	d1f7      	bne.n	8002c72 <xTaskCreate+0x46>
 8002c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c84:	2b06      	cmp	r3, #6
 8002c86:	bf28      	it	cs
 8002c88:	2306      	movcs	r3, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c8a:	f04f 0b00 	mov.w	fp, #0
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c8e:	f104 0a04 	add.w	sl, r4, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c92:	62e3      	str	r3, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c94:	6463      	str	r3, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c96:	4650      	mov	r0, sl
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c98:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43

	pxNewTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
 8002c9c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8002ca0:	4699      	mov	r9, r3
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ca2:	f7ff fcd3 	bl	800264c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ca6:	f104 0018 	add.w	r0, r4, #24
 8002caa:	f7ff fccf 	bl	800264c <vListInitialiseItem>
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cae:	f1c9 0307 	rsb	r3, r9, #7
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002cb2:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cb6:	61a3      	str	r3, [r4, #24]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cb8:	6124      	str	r4, [r4, #16]
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002cba:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cbe:	6264      	str	r4, [r4, #36]	; 0x24
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cc0:	463a      	mov	r2, r7
 8002cc2:	4631      	mov	r1, r6
 8002cc4:	4640      	mov	r0, r8
 8002cc6:	f7ff fd35 	bl	8002734 <pxPortInitialiseStack>
 8002cca:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002ccc:	b105      	cbz	r5, 8002cd0 <xTaskCreate+0xa4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cce:	602c      	str	r4, [r5, #0]

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002cd0:	f7ff fd58 	bl	8002784 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002cd4:	4a3d      	ldr	r2, [pc, #244]	; (8002dcc <xTaskCreate+0x1a0>)
		if( pxCurrentTCB == NULL )
 8002cd6:	4e3e      	ldr	r6, [pc, #248]	; (8002dd0 <xTaskCreate+0x1a4>)
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 8002cd8:	6813      	ldr	r3, [r2, #0]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002cde:	6833      	ldr	r3, [r6, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d044      	beq.n	8002d6e <xTaskCreate+0x142>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ce4:	4f3b      	ldr	r7, [pc, #236]	; (8002dd4 <xTaskCreate+0x1a8>)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	b373      	cbz	r3, 8002d48 <xTaskCreate+0x11c>
 8002cea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002cec:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8002df4 <xTaskCreate+0x1c8>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002cf0:	f8df c104 	ldr.w	ip, [pc, #260]	; 8002df8 <xTaskCreate+0x1cc>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002cf4:	f8df e104 	ldr.w	lr, [pc, #260]	; 8002dfc <xTaskCreate+0x1d0>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002cf8:	f8dc 0000 	ldr.w	r0, [ip]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002cfc:	f8de 2000 	ldr.w	r2, [lr]
 8002d00:	2501      	movs	r5, #1
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d02:	4428      	add	r0, r5
 8002d04:	f8cc 0000 	str.w	r0, [ip]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d08:	fa05 f003 	lsl.w	r0, r5, r3
 8002d0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002d10:	4302      	orrs	r2, r0
 8002d12:	4651      	mov	r1, sl
 8002d14:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 8002d18:	f8ce 2000 	str.w	r2, [lr]
 8002d1c:	f7ff fc9a 	bl	8002654 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d20:	f7ff fd52 	bl	80027c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	b1c3      	cbz	r3, 8002d5a <xTaskCreate+0x12e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d28:	6832      	ldr	r2, [r6, #0]
 8002d2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d213      	bcs.n	8002d5a <xTaskCreate+0x12e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d32:	4b29      	ldr	r3, [pc, #164]	; (8002dd8 <xTaskCreate+0x1ac>)
 8002d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	f3bf 8f6f 	isb	sy
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
 8002d42:	4628      	mov	r0, r5
 8002d44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d48:	6832      	ldr	r2, [r6, #0]
 8002d4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d4e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002df4 <xTaskCreate+0x1c8>
 8002d52:	429a      	cmp	r2, r3
				{
					pxCurrentTCB = pxNewTCB;
 8002d54:	bf98      	it	ls
 8002d56:	6034      	strls	r4, [r6, #0]
 8002d58:	e7ca      	b.n	8002cf0 <xTaskCreate+0xc4>
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d60:	4650      	mov	r0, sl
 8002d62:	f7ff fed7 	bl	8002b14 <vPortFree>
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d66:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 8002d6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uxCurrentNumberOfTasks++;
		if( pxCurrentTCB == NULL )
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d6e:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d70:	6813      	ldr	r3, [r2, #0]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d004      	beq.n	8002d80 <xTaskCreate+0x154>
 8002d76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d78:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8002df4 <xTaskCreate+0x1c8>
 8002d7c:	4f15      	ldr	r7, [pc, #84]	; (8002dd4 <xTaskCreate+0x1a8>)
 8002d7e:	e7b7      	b.n	8002cf0 <xTaskCreate+0xc4>
 8002d80:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002df4 <xTaskCreate+0x1c8>
 8002d84:	4645      	mov	r5, r8
 8002d86:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	3514      	adds	r5, #20
 8002d8e:	f7ff fc51 	bl	8002634 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d92:	42bd      	cmp	r5, r7
 8002d94:	d1f9      	bne.n	8002d8a <xTaskCreate+0x15e>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002d96:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8002e00 <xTaskCreate+0x1d4>
	vListInitialise( &xDelayedTaskList2 );
 8002d9a:	4d10      	ldr	r5, [pc, #64]	; (8002ddc <xTaskCreate+0x1b0>)
 8002d9c:	4f0d      	ldr	r7, [pc, #52]	; (8002dd4 <xTaskCreate+0x1a8>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8002d9e:	4648      	mov	r0, r9
 8002da0:	f7ff fc48 	bl	8002634 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002da4:	4628      	mov	r0, r5
 8002da6:	f7ff fc45 	bl	8002634 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002daa:	480d      	ldr	r0, [pc, #52]	; (8002de0 <xTaskCreate+0x1b4>)
 8002dac:	f7ff fc42 	bl	8002634 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002db0:	480c      	ldr	r0, [pc, #48]	; (8002de4 <xTaskCreate+0x1b8>)
 8002db2:	f7ff fc3f 	bl	8002634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002db6:	480c      	ldr	r0, [pc, #48]	; (8002de8 <xTaskCreate+0x1bc>)
 8002db8:	f7ff fc3c 	bl	8002634 <vListInitialise>
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <xTaskCreate+0x1c0>)
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002dbe:	4a0c      	ldr	r2, [pc, #48]	; (8002df0 <xTaskCreate+0x1c4>)
 8002dc0:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002dc4:	601d      	str	r5, [r3, #0]
 8002dc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002dc8:	e792      	b.n	8002cf0 <xTaskCreate+0xc4>
 8002dca:	bf00      	nop
 8002dcc:	20000cf4 	.word	0x20000cf4
 8002dd0:	20000cc8 	.word	0x20000cc8
 8002dd4:	20000c04 	.word	0x20000c04
 8002dd8:	e000ed04 	.word	0xe000ed04
 8002ddc:	20000cf8 	.word	0x20000cf8
 8002de0:	20000cdc 	.word	0x20000cdc
 8002de4:	20000cb0 	.word	0x20000cb0
 8002de8:	20000d0c 	.word	0x20000d0c
 8002dec:	20000cd8 	.word	0x20000cd8
 8002df0:	20000c00 	.word	0x20000c00
 8002df4:	20000c24 	.word	0x20000c24
 8002df8:	20000cf0 	.word	0x20000cf0
 8002dfc:	20000d20 	.word	0x20000d20
 8002e00:	20000c0c 	.word	0x20000c0c

08002e04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e04:	b530      	push	{r4, r5, lr}
 8002e06:	b083      	sub	sp, #12
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <vTaskStartScheduler+0x60>)
 8002e0a:	9301      	str	r3, [sp, #4]
 8002e0c:	2400      	movs	r4, #0
 8002e0e:	9400      	str	r4, [sp, #0]
 8002e10:	4623      	mov	r3, r4
 8002e12:	2280      	movs	r2, #128	; 0x80
 8002e14:	4914      	ldr	r1, [pc, #80]	; (8002e68 <vTaskStartScheduler+0x64>)
 8002e16:	4815      	ldr	r0, [pc, #84]	; (8002e6c <vTaskStartScheduler+0x68>)
 8002e18:	f7ff ff08 	bl	8002c2c <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e1c:	2801      	cmp	r0, #1
 8002e1e:	d00c      	beq.n	8002e3a <vTaskStartScheduler+0x36>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e20:	3001      	adds	r0, #1
 8002e22:	d001      	beq.n	8002e28 <vTaskStartScheduler+0x24>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e24:	b003      	add	sp, #12
 8002e26:	bd30      	pop	{r4, r5, pc}
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	e7fe      	b.n	8002e38 <vTaskStartScheduler+0x34>
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e4a:	4909      	ldr	r1, [pc, #36]	; (8002e70 <vTaskStartScheduler+0x6c>)
		xSchedulerRunning = pdTRUE;
 8002e4c:	4a09      	ldr	r2, [pc, #36]	; (8002e74 <vTaskStartScheduler+0x70>)
		xTickCount = ( TickType_t ) 0U;
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <vTaskStartScheduler+0x74>)
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e50:	f04f 35ff 	mov.w	r5, #4294967295
 8002e54:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8002e56:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8002e58:	601c      	str	r4, [r3, #0]
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e5a:	b003      	add	sp, #12
 8002e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e60:	f7ff bd24 	b.w	80028ac <xPortStartScheduler>
 8002e64:	20000cd0 	.word	0x20000cd0
 8002e68:	08003948 	.word	0x08003948
 8002e6c:	0800312d 	.word	0x0800312d
 8002e70:	20000ccc 	.word	0x20000ccc
 8002e74:	20000c04 	.word	0x20000c04
 8002e78:	20000cd4 	.word	0x20000cd4

08002e7c <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e7c:	4a02      	ldr	r2, [pc, #8]	; (8002e88 <vTaskSuspendAll+0xc>)
 8002e7e:	6813      	ldr	r3, [r2, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000c08 	.word	0x20000c08

08002e8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e90:	4b45      	ldr	r3, [pc, #276]	; (8002fa8 <xTaskIncrementTick+0x11c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d152      	bne.n	8002f3e <xTaskIncrementTick+0xb2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8002e98:	4b44      	ldr	r3, [pc, #272]	; (8002fac <xTaskIncrementTick+0x120>)
 8002e9a:	681d      	ldr	r5, [r3, #0]
 8002e9c:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e9e:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8002ea0:	2d00      	cmp	r5, #0
 8002ea2:	d059      	beq.n	8002f58 <xTaskIncrementTick+0xcc>
 8002ea4:	f8df b124 	ldr.w	fp, [pc, #292]	; 8002fcc <xTaskIncrementTick+0x140>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ea8:	f8db 2000 	ldr.w	r2, [fp]
 8002eac:	4f40      	ldr	r7, [pc, #256]	; (8002fb0 <xTaskIncrementTick+0x124>)
 8002eae:	4e41      	ldr	r6, [pc, #260]	; (8002fb4 <xTaskIncrementTick+0x128>)
 8002eb0:	4295      	cmp	r5, r2
 8002eb2:	d35e      	bcc.n	8002f72 <xTaskIncrementTick+0xe6>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002eb4:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8002fd0 <xTaskIncrementTick+0x144>
 8002eb8:	2400      	movs	r4, #0
 8002eba:	e02d      	b.n	8002f18 <xTaskIncrementTick+0x8c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ebc:	4b3e      	ldr	r3, [pc, #248]	; (8002fb8 <xTaskIncrementTick+0x12c>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68d2      	ldr	r2, [r2, #12]
 8002ec2:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ec6:	f8d8 1004 	ldr.w	r1, [r8, #4]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002eca:	f108 0a04 	add.w	sl, r8, #4
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );

					if( xConstTickCount < xItemValue )
 8002ece:	428d      	cmp	r5, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ed0:	4650      	mov	r0, sl
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );

					if( xConstTickCount < xItemValue )
 8002ed2:	d35f      	bcc.n	8002f94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ed4:	f7ff fbe8 	bl	80026a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ed8:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002edc:	f108 0018 	add.w	r0, r8, #24
					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ee0:	b109      	cbz	r1, 8002ee6 <xTaskIncrementTick+0x5a>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ee2:	f7ff fbe1 	bl	80026a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002ee6:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8002eea:	f8d9 3000 	ldr.w	r3, [r9]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	fa02 fc00 	lsl.w	ip, r2, r0
 8002ef4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002ef8:	4651      	mov	r1, sl
 8002efa:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8002efe:	ea4c 0303 	orr.w	r3, ip, r3
 8002f02:	f8c9 3000 	str.w	r3, [r9]
 8002f06:	f7ff fba5 	bl	8002654 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f0a:	6830      	ldr	r0, [r6, #0]
 8002f0c:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8002f10:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
 8002f12:	4291      	cmp	r1, r2
 8002f14:	bf28      	it	cs
 8002f16:	2401      	movcs	r4, #1
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f18:	4b27      	ldr	r3, [pc, #156]	; (8002fb8 <xTaskIncrementTick+0x12c>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	2a00      	cmp	r2, #0
 8002f20:	d1cc      	bne.n	8002ebc <xTaskIncrementTick+0x30>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f22:	f04f 32ff 	mov.w	r2, #4294967295
 8002f26:	f8cb 2000 	str.w	r2, [fp]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f2a:	6833      	ldr	r3, [r6, #0]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f32:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	bf28      	it	cs
 8002f3a:	2401      	movcs	r4, #1
 8002f3c:	e004      	b.n	8002f48 <xTaskIncrementTick+0xbc>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002f3e:	4a1f      	ldr	r2, [pc, #124]	; (8002fbc <xTaskIncrementTick+0x130>)
 8002f40:	6813      	ldr	r3, [r2, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f46:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <xTaskIncrementTick+0x134>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf18      	it	ne
 8002f50:	2401      	movne	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8002f52:	4620      	mov	r0, r4
 8002f54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;

		if( xConstTickCount == ( TickType_t ) 0U )
		{
			taskSWITCH_DELAYED_LISTS();
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <xTaskIncrementTick+0x12c>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	b152      	cbz	r2, 8002f76 <xTaskIncrementTick+0xea>
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	e7fe      	b.n	8002f70 <xTaskIncrementTick+0xe4>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f72:	2400      	movs	r4, #0
 8002f74:	e7d9      	b.n	8002f2a <xTaskIncrementTick+0x9e>
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;

		if( xConstTickCount == ( TickType_t ) 0U )
		{
			taskSWITCH_DELAYED_LISTS();
 8002f76:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <xTaskIncrementTick+0x138>)
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	4913      	ldr	r1, [pc, #76]	; (8002fc8 <xTaskIncrementTick+0x13c>)
 8002f7c:	6814      	ldr	r4, [r2, #0]
 8002f7e:	601c      	str	r4, [r3, #0]
 8002f80:	6010      	str	r0, [r2, #0]
 8002f82:	680a      	ldr	r2, [r1, #0]
 8002f84:	3201      	adds	r2, #1
 8002f86:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	b12b      	cbz	r3, 8002f9a <xTaskIncrementTick+0x10e>
 8002f8e:	f7ff fdf9 	bl	8002b84 <prvResetNextTaskUnblockTime.part.1>
 8002f92:	e787      	b.n	8002ea4 <xTaskIncrementTick+0x18>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f94:	f8cb 1000 	str.w	r1, [fp]
						break;
 8002f98:	e7c7      	b.n	8002f2a <xTaskIncrementTick+0x9e>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f9a:	f8df b030 	ldr.w	fp, [pc, #48]	; 8002fcc <xTaskIncrementTick+0x140>
 8002f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa2:	f8cb 2000 	str.w	r2, [fp]
 8002fa6:	e77f      	b.n	8002ea8 <xTaskIncrementTick+0x1c>
 8002fa8:	20000c08 	.word	0x20000c08
 8002fac:	20000cd4 	.word	0x20000cd4
 8002fb0:	20000c24 	.word	0x20000c24
 8002fb4:	20000cc8 	.word	0x20000cc8
 8002fb8:	20000c00 	.word	0x20000c00
 8002fbc:	20000c20 	.word	0x20000c20
 8002fc0:	20000d24 	.word	0x20000d24
 8002fc4:	20000cd8 	.word	0x20000cd8
 8002fc8:	20000bfc 	.word	0x20000bfc
 8002fcc:	20000ccc 	.word	0x20000ccc
 8002fd0:	20000d20 	.word	0x20000d20

08002fd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002fd8:	4c36      	ldr	r4, [pc, #216]	; (80030b4 <xTaskResumeAll+0xe0>)
 8002fda:	6823      	ldr	r3, [r4, #0]
 8002fdc:	b943      	cbnz	r3, 8002ff0 <xTaskResumeAll+0x1c>
 8002fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	e7fe      	b.n	8002fee <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ff0:	f7ff fbc8 	bl	8002784 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ff4:	6823      	ldr	r3, [r4, #0]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ffa:	6824      	ldr	r4, [r4, #0]
 8002ffc:	2c00      	cmp	r4, #0
 8002ffe:	d150      	bne.n	80030a2 <xTaskResumeAll+0xce>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003000:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <xTaskResumeAll+0xe4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d04c      	beq.n	80030a2 <xTaskResumeAll+0xce>
 8003008:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80030d8 <xTaskResumeAll+0x104>
 800300c:	4d2b      	ldr	r5, [pc, #172]	; (80030bc <xTaskResumeAll+0xe8>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 800300e:	4e2c      	ldr	r6, [pc, #176]	; (80030c0 <xTaskResumeAll+0xec>)
 8003010:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80030dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003014:	46d3      	mov	fp, sl
 8003016:	e01f      	b.n	8003058 <xTaskResumeAll+0x84>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003018:	f8db 300c 	ldr.w	r3, [fp, #12]
 800301c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800301e:	f104 0804 	add.w	r8, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003022:	f104 0018 	add.w	r0, r4, #24
 8003026:	f7ff fb3f 	bl	80026a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800302a:	4640      	mov	r0, r8
 800302c:	f7ff fb3c 	bl	80026a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003030:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003032:	6833      	ldr	r3, [r6, #0]
 8003034:	fa07 f200 	lsl.w	r2, r7, r0
 8003038:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800303c:	4313      	orrs	r3, r2
 800303e:	4641      	mov	r1, r8
 8003040:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8003044:	6033      	str	r3, [r6, #0]
 8003046:	f7ff fb05 	bl	8002654 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <xTaskResumeAll+0xf0>)
 800304c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	429a      	cmp	r2, r3
					{
						xYieldPending = pdTRUE;
 8003054:	bf28      	it	cs
 8003056:	602f      	strcs	r7, [r5, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003058:	f8da 3000 	ldr.w	r3, [sl]
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 800305c:	2701      	movs	r7, #1
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1da      	bne.n	8003018 <xTaskResumeAll+0x44>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003062:	b13c      	cbz	r4, 8003074 <xTaskResumeAll+0xa0>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003064:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <xTaskResumeAll+0xf4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	bb03      	cbnz	r3, 80030ae <xTaskResumeAll+0xda>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800306c:	4b17      	ldr	r3, [pc, #92]	; (80030cc <xTaskResumeAll+0xf8>)
 800306e:	f04f 32ff 	mov.w	r2, #4294967295
 8003072:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003074:	4e16      	ldr	r6, [pc, #88]	; (80030d0 <xTaskResumeAll+0xfc>)
 8003076:	6834      	ldr	r4, [r6, #0]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003078:	b13c      	cbz	r4, 800308a <xTaskResumeAll+0xb6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
 800307a:	2701      	movs	r7, #1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800307c:	f7ff ff06 	bl	8002e8c <xTaskIncrementTick>
 8003080:	b100      	cbz	r0, 8003084 <xTaskResumeAll+0xb0>
							{
								xYieldPending = pdTRUE;
 8003082:	602f      	str	r7, [r5, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003084:	3c01      	subs	r4, #1
 8003086:	d1f9      	bne.n	800307c <xTaskResumeAll+0xa8>

						uxPendedTicks = 0;
 8003088:	6034      	str	r4, [r6, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800308a:	682b      	ldr	r3, [r5, #0]
 800308c:	b14b      	cbz	r3, 80030a2 <xTaskResumeAll+0xce>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800308e:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <xTaskResumeAll+0x100>)
 8003090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800309e:	2401      	movs	r4, #1
 80030a0:	e000      	b.n	80030a4 <xTaskResumeAll+0xd0>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 80030a2:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80030a4:	f7ff fb90 	bl	80027c8 <vPortExitCritical>

	return xAlreadyYielded;
}
 80030a8:	4620      	mov	r0, r4
 80030aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ae:	f7ff fd69 	bl	8002b84 <prvResetNextTaskUnblockTime.part.1>
 80030b2:	e7df      	b.n	8003074 <xTaskResumeAll+0xa0>
 80030b4:	20000c08 	.word	0x20000c08
 80030b8:	20000cf4 	.word	0x20000cf4
 80030bc:	20000d24 	.word	0x20000d24
 80030c0:	20000d20 	.word	0x20000d20
 80030c4:	20000cc8 	.word	0x20000cc8
 80030c8:	20000c00 	.word	0x20000c00
 80030cc:	20000ccc 	.word	0x20000ccc
 80030d0:	20000c20 	.word	0x20000c20
 80030d4:	e000ed04 	.word	0xe000ed04
 80030d8:	20000cdc 	.word	0x20000cdc
 80030dc:	20000c24 	.word	0x20000c24

080030e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030e0:	b508      	push	{r3, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030e2:	b158      	cbz	r0, 80030fc <vTaskDelay+0x1c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030e4:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <vTaskDelay+0x44>)
 80030e6:	6819      	ldr	r1, [r3, #0]
 80030e8:	b189      	cbz	r1, 800310e <vTaskDelay+0x2e>
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	e7fe      	b.n	80030fa <vTaskDelay+0x1a>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 80030fc:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <vTaskDelay+0x48>)
 80030fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	bd08      	pop	{r3, pc}
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	3201      	adds	r2, #1
 8003112:	601a      	str	r2, [r3, #0]
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003114:	f7ff fd42 	bl	8002b9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003118:	f7ff ff5c 	bl	8002fd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800311c:	2800      	cmp	r0, #0
 800311e:	d0ed      	beq.n	80030fc <vTaskDelay+0x1c>
 8003120:	bd08      	pop	{r3, pc}
 8003122:	bf00      	nop
 8003124:	20000c08 	.word	0x20000c08
 8003128:	e000ed04 	.word	0xe000ed04

0800312c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800312c:	4e1f      	ldr	r6, [pc, #124]	; (80031ac <prvIdleTask+0x80>)
 800312e:	4d20      	ldr	r5, [pc, #128]	; (80031b0 <prvIdleTask+0x84>)
 8003130:	4c20      	ldr	r4, [pc, #128]	; (80031b4 <prvIdleTask+0x88>)
 8003132:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80031bc <prvIdleTask+0x90>
 8003136:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80031c0 <prvIdleTask+0x94>
 800313a:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800313e:	46b2      	mov	sl, r6
 8003140:	e006      	b.n	8003150 <prvIdleTask+0x24>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003142:	6823      	ldr	r3, [r4, #0]
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003144:	6837      	ldr	r7, [r6, #0]
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003146:	3301      	adds	r3, #1
 8003148:	6023      	str	r3, [r4, #0]
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
 800314a:	f7ff ff43 	bl	8002fd4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800314e:	b97f      	cbnz	r7, 8003170 <prvIdleTask+0x44>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003150:	682b      	ldr	r3, [r5, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f5      	bne.n	8003142 <prvIdleTask+0x16>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003156:	f8d9 3000 	ldr.w	r3, [r9]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d9f8      	bls.n	8003150 <prvIdleTask+0x24>
			{
				taskYIELD();
 800315e:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <prvIdleTask+0x8c>)
 8003160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	e7ef      	b.n	8003150 <prvIdleTask+0x24>

			if( xListIsEmpty == pdFALSE )
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8003170:	f7ff fb08 	bl	8002784 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003174:	f8da 300c 	ldr.w	r3, [sl, #12]
 8003178:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800317c:	f10b 0004 	add.w	r0, fp, #4
 8003180:	f7ff fa92 	bl	80026a8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003184:	f8d8 3000 	ldr.w	r3, [r8]
					--uxDeletedTasksWaitingCleanUp;
 8003188:	4a09      	ldr	r2, [pc, #36]	; (80031b0 <prvIdleTask+0x84>)

				taskENTER_CRITICAL();
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					--uxCurrentNumberOfTasks;
 800318a:	3b01      	subs	r3, #1
 800318c:	f8c8 3000 	str.w	r3, [r8]
					--uxDeletedTasksWaitingCleanUp;
 8003190:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <prvIdleTask+0x84>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3b01      	subs	r3, #1
 8003196:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8003198:	f7ff fb16 	bl	80027c8 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800319c:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 80031a0:	f7ff fcb8 	bl	8002b14 <vPortFree>
			vPortFree( pxTCB );
 80031a4:	4658      	mov	r0, fp
 80031a6:	f7ff fcb5 	bl	8002b14 <vPortFree>
 80031aa:	e7d1      	b.n	8003150 <prvIdleTask+0x24>
 80031ac:	20000cb0 	.word	0x20000cb0
 80031b0:	20000cc4 	.word	0x20000cc4
 80031b4:	20000c08 	.word	0x20000c08
 80031b8:	e000ed04 	.word	0xe000ed04
 80031bc:	20000cf4 	.word	0x20000cf4
 80031c0:	20000c24 	.word	0x20000c24

080031c4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031c4:	4b16      	ldr	r3, [pc, #88]	; (8003220 <vTaskSwitchContext+0x5c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	bb33      	cbnz	r3, 8003218 <vTaskSwitchContext+0x54>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 80031ca:	4916      	ldr	r1, [pc, #88]	; (8003224 <vTaskSwitchContext+0x60>)
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80031cc:	4a16      	ldr	r2, [pc, #88]	; (8003228 <vTaskSwitchContext+0x64>)
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 80031ce:	600b      	str	r3, [r1, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80031d0:	6813      	ldr	r3, [r2, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f1c3 031f 	rsb	r3, r3, #31
 80031dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4812      	ldr	r0, [pc, #72]	; (800322c <vTaskSwitchContext+0x68>)
 80031e4:	58c2      	ldr	r2, [r0, r3]
 80031e6:	18c1      	adds	r1, r0, r3
 80031e8:	b942      	cbnz	r2, 80031fc <vTaskSwitchContext+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	e7fe      	b.n	80031fa <vTaskSwitchContext+0x36>
 80031fc:	684a      	ldr	r2, [r1, #4]
 80031fe:	3308      	adds	r3, #8
 8003200:	6852      	ldr	r2, [r2, #4]
 8003202:	604a      	str	r2, [r1, #4]
 8003204:	4403      	add	r3, r0
 8003206:	429a      	cmp	r2, r3
 8003208:	bf08      	it	eq
 800320a:	6852      	ldreq	r2, [r2, #4]
 800320c:	4b08      	ldr	r3, [pc, #32]	; (8003230 <vTaskSwitchContext+0x6c>)
 800320e:	bf08      	it	eq
 8003210:	604a      	streq	r2, [r1, #4]
 8003212:	68d2      	ldr	r2, [r2, #12]
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	4770      	bx	lr
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003218:	4b02      	ldr	r3, [pc, #8]	; (8003224 <vTaskSwitchContext+0x60>)
 800321a:	2201      	movs	r2, #1
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	4770      	bx	lr
 8003220:	20000c08 	.word	0x20000c08
 8003224:	20000d24 	.word	0x20000d24
 8003228:	20000d20 	.word	0x20000d20
 800322c:	20000c24 	.word	0x20000c24
 8003230:	20000cc8 	.word	0x20000cc8

08003234 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <xTaskGetSchedulerState+0x18>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	b133      	cbz	r3, 8003248 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <xTaskGetSchedulerState+0x1c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003240:	bf0c      	ite	eq
 8003242:	2002      	moveq	r0, #2
 8003244:	2000      	movne	r0, #0
 8003246:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003248:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 800324a:	4770      	bx	lr
 800324c:	20000c04 	.word	0x20000c04
 8003250:	20000c08 	.word	0x20000c08

08003254 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8003254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003258:	4f35      	ldr	r7, [pc, #212]	; (8003330 <StartDefaultTask+0xdc>)
 800325a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8003340 <StartDefaultTask+0xec>
 800325e:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8003344 <StartDefaultTask+0xf0>
		}
	}
	for (int j = 0; j <= 10000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
 8003262:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003348 <StartDefaultTask+0xf4>
  {
    osDelay(1);

    // Check if there is any new data received on uart
    bytesRx = DMA1_Channel5->CNDTR;
	if (DMA_RX_UART1_BUFFER[UART_BUFFER - bytesRx - 1] == 0x0D
 8003266:	46b8      	mov	r8, r7
  /* USER CODE BEGIN 5 */

	// index for each phase (120 degrees apart)
	int i = 0;
	int v = 84;
	int s = 168;
 8003268:	26a8      	movs	r6, #168	; 0xa8

  /* USER CODE BEGIN 5 */

	// index for each phase (120 degrees apart)
	int i = 0;
	int v = 84;
 800326a:	2554      	movs	r5, #84	; 0x54
{

  /* USER CODE BEGIN 5 */

	// index for each phase (120 degrees apart)
	int i = 0;
 800326c:	2400      	movs	r4, #0
 800326e:	e036      	b.n	80032de <StartDefaultTask+0x8a>
    osDelay(1);

    // Check if there is any new data received on uart
    bytesRx = DMA1_Channel5->CNDTR;
	if (DMA_RX_UART1_BUFFER[UART_BUFFER - bytesRx - 1] == 0x0D
			|| DMA_RX_UART1_BUFFER[UART_BUFFER - bytesRx] == 0x0D
 8003270:	f818 0002 	ldrb.w	r0, [r8, r2]
 8003274:	280d      	cmp	r0, #13
 8003276:	d03f      	beq.n	80032f8 <StartDefaultTask+0xa4>
			|| DMA_RX_UART1_BUFFER[UART_BUFFER - 1] == 0x0D) {
 8003278:	f898 00ff 	ldrb.w	r0, [r8, #255]	; 0xff
 800327c:	280d      	cmp	r0, #13
 800327e:	d03b      	beq.n	80032f8 <StartDefaultTask+0xa4>
		}
	}
	for (int j = 0; j <= 10000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
 8003280:	f83b 2016 	ldrh.w	r2, [fp, r6, lsl #1]
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
 8003284:	f83b c015 	ldrh.w	ip, [fp, r5, lsl #1]
	htim2.Instance->CCR3 = PWMdata2[i] / 37;
 8003288:	f83b 3014 	ldrh.w	r3, [fp, r4, lsl #1]
		}
	}
	for (int j = 0; j <= 10000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
 800328c:	f8d9 1000 	ldr.w	r1, [r9]
 8003290:	fbaa e002 	umull	lr, r0, sl, r2
 8003294:	1a12      	subs	r2, r2, r0
 8003296:	eb00 0052 	add.w	r0, r0, r2, lsr #1
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
 800329a:	fbaa e20c 	umull	lr, r2, sl, ip
 800329e:	ebc2 0c0c 	rsb	ip, r2, ip
	htim2.Instance->CCR3 = PWMdata2[i] / 37;

	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWMdata[s]);
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWMdata[v]);
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWMdata[i]);
	i++;
 80032a2:	3401      	adds	r4, #1
	}
	for (int j = 0; j <= 10000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
 80032a4:	eb02 025c 	add.w	r2, r2, ip, lsr #1
	htim2.Instance->CCR3 = PWMdata2[i] / 37;
 80032a8:	fbaa ec03 	umull	lr, ip, sl, r3

	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWMdata[s]);
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWMdata[v]);
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWMdata[i]);
	i++;
	v++;
 80032ac:	3501      	adds	r5, #1
	s++;
	if (i == 251) {
		i = 0;
 80032ae:	2cfb      	cmp	r4, #251	; 0xfb
	for (int j = 0; j <= 10000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
	htim2.Instance->CCR3 = PWMdata2[i] / 37;
 80032b0:	ebcc 0303 	rsb	r3, ip, r3
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWMdata[s]);
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWMdata[v]);
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWMdata[i]);
	i++;
	v++;
	s++;
 80032b4:	f106 0601 	add.w	r6, r6, #1
	if (i == 251) {
		i = 0;
 80032b8:	bf08      	it	eq
 80032ba:	2400      	moveq	r4, #0
	for (int j = 0; j <= 10000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
	htim2.Instance->CCR3 = PWMdata2[i] / 37;
 80032bc:	eb0c 0353 	add.w	r3, ip, r3, lsr #1
	s++;
	if (i == 251) {
		i = 0;
	}
	if (v == 251) {
		v = 0;
 80032c0:	2dfb      	cmp	r5, #251	; 0xfb
		}
	}
	for (int j = 0; j <= 10000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
 80032c2:	f3c0 104f 	ubfx	r0, r0, #5, #16
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
 80032c6:	f3c2 124f 	ubfx	r2, r2, #5, #16
	s++;
	if (i == 251) {
		i = 0;
	}
	if (v == 251) {
		v = 0;
 80032ca:	bf08      	it	eq
 80032cc:	2500      	moveq	r5, #0
	for (int j = 0; j <= 10000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
	htim2.Instance->CCR3 = PWMdata2[i] / 37;
 80032ce:	f3c3 134f 	ubfx	r3, r3, #5, #16
	}
	if (v == 251) {
		v = 0;
	}
	if (s == 251) {
		s = 0;
 80032d2:	2efb      	cmp	r6, #251	; 0xfb
		}
	}
	for (int j = 0; j <= 10000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
 80032d4:	6408      	str	r0, [r1, #64]	; 0x40
	}
	if (v == 251) {
		v = 0;
	}
	if (s == 251) {
		s = 0;
 80032d6:	bf08      	it	eq
 80032d8:	2600      	moveq	r6, #0
	}
	for (int j = 0; j <= 10000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
 80032da:	638a      	str	r2, [r1, #56]	; 0x38
	htim2.Instance->CCR3 = PWMdata2[i] / 37;
 80032dc:	63cb      	str	r3, [r1, #60]	; 0x3c
	uint16_t offsetByte = 0;
	uint16_t lastByteRx = UART_BUFFER;
	/* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80032de:	2001      	movs	r0, #1
 80032e0:	f7ff f996 	bl	8002610 <osDelay>

    // Check if there is any new data received on uart
    bytesRx = DMA1_Channel5->CNDTR;
 80032e4:	4b13      	ldr	r3, [pc, #76]	; (8003334 <StartDefaultTask+0xe0>)
 80032e6:	685b      	ldr	r3, [r3, #4]
	if (DMA_RX_UART1_BUFFER[UART_BUFFER - bytesRx - 1] == 0x0D
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 80032ee:	5cba      	ldrb	r2, [r7, r2]
 80032f0:	2a0d      	cmp	r2, #13
 80032f2:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80032f6:	d1bb      	bne.n	8003270 <StartDefaultTask+0x1c>
			|| DMA_RX_UART1_BUFFER[UART_BUFFER - bytesRx] == 0x0D
			|| DMA_RX_UART1_BUFFER[UART_BUFFER - 1] == 0x0D) {

		if (lastByteRx < bytesRx) {
 80032f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032fc:	d909      	bls.n	8003312 <StartDefaultTask+0xbe>
 80032fe:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <StartDefaultTask+0xe4>)
 8003300:	480e      	ldr	r0, [pc, #56]	; (800333c <StartDefaultTask+0xe8>)
 8003302:	f203 1c01 	addw	ip, r3, #257	; 0x101
			for (int i = 0; i <= UART_BUFFER - offsetByte; i++) {
				uart_command[i] = DMA_RX_UART1_BUFFER[offsetByte + i];
 8003306:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800330a:	f800 ef01 	strb.w	lr, [r0, #1]!
	if (DMA_RX_UART1_BUFFER[UART_BUFFER - bytesRx - 1] == 0x0D
			|| DMA_RX_UART1_BUFFER[UART_BUFFER - bytesRx] == 0x0D
			|| DMA_RX_UART1_BUFFER[UART_BUFFER - 1] == 0x0D) {

		if (lastByteRx < bytesRx) {
			for (int i = 0; i <= UART_BUFFER - offsetByte; i++) {
 800330e:	4563      	cmp	r3, ip
 8003310:	d1f9      	bne.n	8003306 <StartDefaultTask+0xb2>
				uart_command[i] = DMA_RX_UART1_BUFFER[offsetByte + i];
			}
			offsetByte = 0;
		}
		for (int i = 0; i < UART_BUFFER - bytesRx; i++) {
 8003312:	2a00      	cmp	r2, #0
 8003314:	ddb4      	ble.n	8003280 <StartDefaultTask+0x2c>
 8003316:	f102 3eff 	add.w	lr, r2, #4294967295
 800331a:	4b07      	ldr	r3, [pc, #28]	; (8003338 <StartDefaultTask+0xe4>)
 800331c:	4a07      	ldr	r2, [pc, #28]	; (800333c <StartDefaultTask+0xe8>)
 800331e:	44be      	add	lr, r7
			uart_command[i] = DMA_RX_UART1_BUFFER[offsetByte + i];
 8003320:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003324:	f802 0f01 	strb.w	r0, [r2, #1]!
			for (int i = 0; i <= UART_BUFFER - offsetByte; i++) {
				uart_command[i] = DMA_RX_UART1_BUFFER[offsetByte + i];
			}
			offsetByte = 0;
		}
		for (int i = 0; i < UART_BUFFER - bytesRx; i++) {
 8003328:	4573      	cmp	r3, lr
 800332a:	d1f9      	bne.n	8003320 <StartDefaultTask+0xcc>
 800332c:	e7a8      	b.n	8003280 <StartDefaultTask+0x2c>
 800332e:	bf00      	nop
 8003330:	20000d2c 	.word	0x20000d2c
 8003334:	40020058 	.word	0x40020058
 8003338:	20000d2b 	.word	0x20000d2b
 800333c:	20000e2f 	.word	0x20000e2f
 8003340:	20001038 	.word	0x20001038
 8003344:	0800395c 	.word	0x0800395c
 8003348:	bacf914d 	.word	0xbacf914d

0800334c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800334c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800334e:	b0ad      	sub	sp, #180	; 0xb4
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003350:	2302      	movs	r3, #2
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003352:	2401      	movs	r4, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003354:	2710      	movs	r7, #16
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003356:	2600      	movs	r6, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003358:	2560      	movs	r5, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLN = 40;
 800335a:	2128      	movs	r1, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800335c:	2207      	movs	r2, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800335e:	a806      	add	r0, sp, #24
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003360:	9706      	str	r7, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003362:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003364:	9411      	str	r4, [sp, #68]	; 0x44

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003366:	960d      	str	r6, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003368:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800336a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800336c:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800336e:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003370:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003372:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003374:	f7fd fc66 	bl	8000c44 <HAL_RCC_OscConfig>
 8003378:	b100      	cbz	r0, 800337c <SystemClock_Config+0x30>
 800337a:	e7fe      	b.n	800337a <SystemClock_Config+0x2e>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800337c:	2104      	movs	r1, #4
 800337e:	4603      	mov	r3, r0

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003380:	2203      	movs	r2, #3
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003382:	250f      	movs	r5, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003384:	eb0d 0001 	add.w	r0, sp, r1
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003388:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800338a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800338c:	9305      	str	r3, [sp, #20]
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800338e:	9501      	str	r5, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003390:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003392:	f7fd ff07 	bl	80011a4 <HAL_RCC_ClockConfig>
 8003396:	4603      	mov	r3, r0
 8003398:	b100      	cbz	r0, 800339c <SystemClock_Config+0x50>
 800339a:	e7fe      	b.n	800339a <SystemClock_Config+0x4e>
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800339c:	a817      	add	r0, sp, #92	; 0x5c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800339e:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80033a0:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033a2:	f7fe f86f 	bl	8001484 <HAL_RCCEx_PeriphCLKConfig>
 80033a6:	b100      	cbz	r0, 80033aa <SystemClock_Config+0x5e>
 80033a8:	e7fe      	b.n	80033a8 <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80033aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80033ae:	f7fd fb49 	bl	8000a44 <HAL_PWREx_ControlVoltageScaling>
 80033b2:	4604      	mov	r4, r0
 80033b4:	b100      	cbz	r0, 80033b8 <SystemClock_Config+0x6c>
 80033b6:	e7fe      	b.n	80033b6 <SystemClock_Config+0x6a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80033b8:	f7fd ffaa 	bl	8001310 <HAL_RCC_GetHCLKFreq>
 80033bc:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <SystemClock_Config+0x94>)
 80033be:	fba3 3000 	umull	r3, r0, r3, r0
 80033c2:	0980      	lsrs	r0, r0, #6
 80033c4:	f7fd f916 	bl	80005f4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80033c8:	2004      	movs	r0, #4
 80033ca:	f7fd f92d 	bl	8000628 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80033ce:	4622      	mov	r2, r4
 80033d0:	4629      	mov	r1, r5
 80033d2:	f04f 30ff 	mov.w	r0, #4294967295
 80033d6:	f7fd f8c9 	bl	800056c <HAL_NVIC_SetPriority>
}
 80033da:	b02d      	add	sp, #180	; 0xb4
 80033dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033de:	bf00      	nop
 80033e0:	10624dd3 	.word	0x10624dd3

080033e4 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80033e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e8:	4d80      	ldr	r5, [pc, #512]	; (80035ec <main+0x208>)

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 80033ea:	4c81      	ldr	r4, [pc, #516]	; (80035f0 <main+0x20c>)
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80033ec:	b093      	sub	sp, #76	; 0x4c
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033ee:	f7fd f891 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033f2:	f7ff ffab 	bl	800334c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80033f8:	487e      	ldr	r0, [pc, #504]	; (80035f4 <main+0x210>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	64eb      	str	r3, [r5, #76]	; 0x4c
 8003400:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	9302      	str	r3, [sp, #8]
 8003408:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800340a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800340c:	f043 0302 	orr.w	r3, r3, #2
 8003410:	64eb      	str	r3, [r5, #76]	; 0x4c
 8003412:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003414:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8003418:	2200      	movs	r2, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800341a:	9303      	str	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 800341c:	2148      	movs	r1, #72	; 0x48

  /*Configure GPIO pins : LED1_Pin PB6 */
  GPIO_InitStruct.Pin = LED1_Pin|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	4616      	mov	r6, r2

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003420:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8003422:	f7fd fb01 	bl	8000a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin PB6 */
  GPIO_InitStruct.Pin = LED1_Pin|GPIO_PIN_6;
 8003426:	2248      	movs	r2, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003428:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800342a:	a90b      	add	r1, sp, #44	; 0x2c
 800342c:	4871      	ldr	r0, [pc, #452]	; (80035f4 <main+0x210>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin PB6 */
  GPIO_InitStruct.Pin = LED1_Pin|GPIO_PIN_6;
 800342e:	920b      	str	r2, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003430:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003432:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003434:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003436:	f7fd fa23 	bl	8000880 <HAL_GPIO_Init>
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800343a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	64ab      	str	r3, [r5, #72]	; 0x48
 8003442:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003444:	f003 0301 	and.w	r3, r3, #1

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8003448:	4632      	mov	r2, r6
 800344a:	2105      	movs	r1, #5
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800344c:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800344e:	200e      	movs	r0, #14
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003450:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8003452:	f7fd f88b 	bl	800056c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003456:	200e      	movs	r0, #14
 8003458:	f7fd f8c0 	bl	80005dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800345c:	4632      	mov	r2, r6
 800345e:	2105      	movs	r1, #5
 8003460:	200f      	movs	r0, #15
 8003462:	f7fd f883 	bl	800056c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003466:	200f      	movs	r0, #15
 8003468:	f7fd f8b8 	bl	80005dc <HAL_NVIC_EnableIRQ>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 800346c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8003470:	2240      	movs	r2, #64	; 0x40
  htim2.Init.Period = 11248;
 8003472:	f642 33f0 	movw	r3, #11248	; 0x2bf0
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003476:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
 8003478:	6066      	str	r6, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
  htim2.Init.Period = 11248;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800347a:	6126      	str	r6, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800347c:	61a6      	str	r6, [r4, #24]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 800347e:	6021      	str	r1, [r4, #0]
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8003480:	60a2      	str	r2, [r4, #8]
  htim2.Init.Period = 11248;
 8003482:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003484:	f7fe fbb2 	bl	8001bec <HAL_TIM_Base_Init>
 8003488:	b100      	cbz	r0, 800348c <main+0xa8>
 800348a:	e7fe      	b.n	800348a <main+0xa6>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800348c:	a912      	add	r1, sp, #72	; 0x48
 800348e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003492:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003496:	4620      	mov	r0, r4
 8003498:	f7fe fa8c 	bl	80019b4 <HAL_TIM_ConfigClockSource>
 800349c:	b100      	cbz	r0, 80034a0 <main+0xbc>
 800349e:	e7fe      	b.n	800349e <main+0xba>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80034a0:	4620      	mov	r0, r4
 80034a2:	f7fe fbbf 	bl	8001c24 <HAL_TIM_PWM_Init>
 80034a6:	4603      	mov	r3, r0
 80034a8:	b100      	cbz	r0, 80034ac <main+0xc8>
 80034aa:	e7fe      	b.n	80034aa <main+0xc6>
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034ac:	a904      	add	r1, sp, #16
 80034ae:	4620      	mov	r0, r4
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034b0:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034b2:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034b4:	f7fe fca0 	bl	8001df8 <HAL_TIMEx_MasterConfigSynchronization>
 80034b8:	4603      	mov	r3, r0
 80034ba:	b100      	cbz	r0, 80034be <main+0xda>
 80034bc:	e7fe      	b.n	80034bc <main+0xd8>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80034be:	2704      	movs	r7, #4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034c0:	2560      	movs	r5, #96	; 0x60
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034c2:	463a      	mov	r2, r7
 80034c4:	a90b      	add	r1, sp, #44	; 0x2c
 80034c6:	4620      	mov	r0, r4
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 80034c8:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034ca:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80034cc:	970f      	str	r7, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034ce:	950b      	str	r5, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034d0:	f7fe fbfe 	bl	8001cd0 <HAL_TIM_PWM_ConfigChannel>
 80034d4:	b100      	cbz	r0, 80034d8 <main+0xf4>
 80034d6:	e7fe      	b.n	80034d6 <main+0xf2>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034d8:	2208      	movs	r2, #8
 80034da:	a90b      	add	r1, sp, #44	; 0x2c
 80034dc:	4620      	mov	r0, r4
 80034de:	f7fe fbf7 	bl	8001cd0 <HAL_TIM_PWM_ConfigChannel>
 80034e2:	b100      	cbz	r0, 80034e6 <main+0x102>
 80034e4:	e7fe      	b.n	80034e4 <main+0x100>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034e6:	220c      	movs	r2, #12
 80034e8:	a90b      	add	r1, sp, #44	; 0x2c
 80034ea:	4620      	mov	r0, r4
 80034ec:	f7fe fbf0 	bl	8001cd0 <HAL_TIM_PWM_ConfigChannel>
 80034f0:	4606      	mov	r6, r0
 80034f2:	b100      	cbz	r0, 80034f6 <main+0x112>
 80034f4:	e7fe      	b.n	80034f4 <main+0x110>

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 80034f6:	4d40      	ldr	r5, [pc, #256]	; (80035f8 <main+0x214>)
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_TIM_MspPostInit(&htim2);
 80034f8:	4620      	mov	r0, r4
 80034fa:	f000 f8e9 	bl	80036d0 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034fe:	f04f 090c 	mov.w	r9, #12

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8003502:	493e      	ldr	r1, [pc, #248]	; (80035fc <main+0x218>)
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003504:	60ee      	str	r6, [r5, #12]
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 8003506:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800350a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800350e:	4628      	mov	r0, r5

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
 8003510:	612e      	str	r6, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003512:	61ae      	str	r6, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003514:	61ee      	str	r6, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003516:	622e      	str	r6, [r5, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003518:	626e      	str	r6, [r5, #36]	; 0x24

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 800351a:	6029      	str	r1, [r5, #0]
  huart1.Init.BaudRate = 115200;
 800351c:	606a      	str	r2, [r5, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800351e:	60ab      	str	r3, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003520:	f8c5 9014 	str.w	r9, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003524:	f7ff f81e 	bl	8002564 <HAL_UART_Init>
 8003528:	4680      	mov	r8, r0
 800352a:	b100      	cbz	r0, 800352e <main+0x14a>
 800352c:	e7fe      	b.n	800352c <main+0x148>
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, DMA_RX_UART1_BUFFER, UART_BUFFER);
 800352e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003532:	4933      	ldr	r1, [pc, #204]	; (8003600 <main+0x21c>)
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003534:	4e33      	ldr	r6, [pc, #204]	; (8003604 <main+0x220>)
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, DMA_RX_UART1_BUFFER, UART_BUFFER);
 8003536:	4628      	mov	r0, r5
 8003538:	f7fe fc84 	bl	8001e44 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start(&htim2);
 800353c:	4620      	mov	r0, r4
 800353e:	f7fe f9ff 	bl	8001940 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8003542:	4649      	mov	r1, r9
 8003544:	4620      	mov	r0, r4
 8003546:	f7fe fa0d 	bl	8001964 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800354a:	4639      	mov	r1, r7
 800354c:	4620      	mov	r0, r4
 800354e:	f7fe fa09 	bl	8001964 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003552:	2108      	movs	r1, #8
 8003554:	4620      	mov	r0, r4
 8003556:	f7fe fa05 	bl	8001964 <HAL_TIM_PWM_Start>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800355a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800355c:	ad0b      	add	r5, sp, #44	; 0x2c
 800355e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003560:	6833      	ldr	r3, [r6, #0]
 8003562:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003564:	4641      	mov	r1, r8
 8003566:	a80b      	add	r0, sp, #44	; 0x2c
 8003568:	f7ff f83a 	bl	80025e0 <osThreadCreate>
 800356c:	4b26      	ldr	r3, [pc, #152]	; (8003608 <main+0x224>)
 800356e:	4f27      	ldr	r7, [pc, #156]	; (800360c <main+0x228>)
 8003570:	6018      	str	r0, [r3, #0]

  /* USER CODE BEGIN 3 */

	  for (int j = 0;j<=10000;j++){}

	  htim2.Instance->CCR4 = PWMdata2[s]/37;
 8003572:	4e27      	ldr	r6, [pc, #156]	; (8003610 <main+0x22c>)
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8003574:	f7ff f82e 	bl	80025d4 <osKernelStart>

  /* USER CODE BEGIN 3 */

	  for (int j = 0;j<=10000;j++){}

	  htim2.Instance->CCR4 = PWMdata2[s]/37;
 8003578:	f8d4 e000 	ldr.w	lr, [r4]
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 800357c:	4642      	mov	r2, r8
  int v = 84;
  int s = 168;
 800357e:	20a8      	movs	r0, #168	; 0xa8
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
  int v = 84;
 8003580:	2154      	movs	r1, #84	; 0x54
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 8003582:	f242 7311 	movw	r3, #10001	; 0x2711
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

	  for (int j = 0;j<=10000;j++){}
 8003586:	3b01      	subs	r3, #1
 8003588:	d1fd      	bne.n	8003586 <main+0x1a2>

	  htim2.Instance->CCR4 = PWMdata2[s]/37;
 800358a:	f837 3010 	ldrh.w	r3, [r7, r0, lsl #1]
	  htim2.Instance->CCR2 = PWMdata2[v]/37;
 800358e:	f837 4011 	ldrh.w	r4, [r7, r1, lsl #1]
	  htim2.Instance->CCR3 = PWMdata2[i]/37;
 8003592:	f837 c012 	ldrh.w	ip, [r7, r2, lsl #1]

  /* USER CODE BEGIN 3 */

	  for (int j = 0;j<=10000;j++){}

	  htim2.Instance->CCR4 = PWMdata2[s]/37;
 8003596:	fba6 8503 	umull	r8, r5, r6, r3
 800359a:	1b5b      	subs	r3, r3, r5
 800359c:	eb05 0553 	add.w	r5, r5, r3, lsr #1
	  htim2.Instance->CCR2 = PWMdata2[v]/37;
 80035a0:	fba6 8304 	umull	r8, r3, r6, r4
 80035a4:	1ae4      	subs	r4, r4, r3
	  htim2.Instance->CCR3 = PWMdata2[i]/37;

	  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWMdata[s]);
	  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWMdata[v]);
	  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWMdata[i]);
	  i ++;
 80035a6:	3201      	adds	r2, #1
  /* USER CODE BEGIN 3 */

	  for (int j = 0;j<=10000;j++){}

	  htim2.Instance->CCR4 = PWMdata2[s]/37;
	  htim2.Instance->CCR2 = PWMdata2[v]/37;
 80035a8:	eb03 0454 	add.w	r4, r3, r4, lsr #1
	  htim2.Instance->CCR3 = PWMdata2[i]/37;
 80035ac:	fba6 830c 	umull	r8, r3, r6, ip
	  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWMdata[i]);
	  i ++;
	  v ++;
	  s ++;
	  if (i == 251){
		  i = 0;
 80035b0:	2afb      	cmp	r2, #251	; 0xfb

	  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWMdata[s]);
	  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWMdata[v]);
	  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWMdata[i]);
	  i ++;
	  v ++;
 80035b2:	f101 0101 	add.w	r1, r1, #1

	  for (int j = 0;j<=10000;j++){}

	  htim2.Instance->CCR4 = PWMdata2[s]/37;
	  htim2.Instance->CCR2 = PWMdata2[v]/37;
	  htim2.Instance->CCR3 = PWMdata2[i]/37;
 80035b6:	ebc3 0c0c 	rsb	ip, r3, ip
	  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWMdata[s]);
	  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWMdata[v]);
	  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWMdata[i]);
	  i ++;
	  v ++;
	  s ++;
 80035ba:	f100 0001 	add.w	r0, r0, #1
	  if (i == 251){
		  i = 0;
 80035be:	bf08      	it	eq
 80035c0:	2200      	moveq	r2, #0

	  for (int j = 0;j<=10000;j++){}

	  htim2.Instance->CCR4 = PWMdata2[s]/37;
	  htim2.Instance->CCR2 = PWMdata2[v]/37;
	  htim2.Instance->CCR3 = PWMdata2[i]/37;
 80035c2:	eb03 035c 	add.w	r3, r3, ip, lsr #1
	  s ++;
	  if (i == 251){
		  i = 0;
	  }
	  if (v == 251){
		  v = 0;
 80035c6:	29fb      	cmp	r1, #251	; 0xfb

  /* USER CODE BEGIN 3 */

	  for (int j = 0;j<=10000;j++){}

	  htim2.Instance->CCR4 = PWMdata2[s]/37;
 80035c8:	f3c5 154f 	ubfx	r5, r5, #5, #16
	  s ++;
	  if (i == 251){
		  i = 0;
	  }
	  if (v == 251){
		  v = 0;
 80035cc:	bf08      	it	eq
 80035ce:	2100      	moveq	r1, #0
  /* USER CODE BEGIN 3 */

	  for (int j = 0;j<=10000;j++){}

	  htim2.Instance->CCR4 = PWMdata2[s]/37;
	  htim2.Instance->CCR2 = PWMdata2[v]/37;
 80035d0:	f3c4 144f 	ubfx	r4, r4, #5, #16
	  }
	  if (v == 251){
		  v = 0;
	  }
	  if (s == 251){
		  s = 0;
 80035d4:	28fb      	cmp	r0, #251	; 0xfb

	  for (int j = 0;j<=10000;j++){}

	  htim2.Instance->CCR4 = PWMdata2[s]/37;
	  htim2.Instance->CCR2 = PWMdata2[v]/37;
	  htim2.Instance->CCR3 = PWMdata2[i]/37;
 80035d6:	f3c3 134f 	ubfx	r3, r3, #5, #16

  /* USER CODE BEGIN 3 */

	  for (int j = 0;j<=10000;j++){}

	  htim2.Instance->CCR4 = PWMdata2[s]/37;
 80035da:	f8ce 5040 	str.w	r5, [lr, #64]	; 0x40
	  }
	  if (v == 251){
		  v = 0;
	  }
	  if (s == 251){
		  s = 0;
 80035de:	bf08      	it	eq
 80035e0:	2000      	moveq	r0, #0
  /* USER CODE BEGIN 3 */

	  for (int j = 0;j<=10000;j++){}

	  htim2.Instance->CCR4 = PWMdata2[s]/37;
	  htim2.Instance->CCR2 = PWMdata2[v]/37;
 80035e2:	f8ce 4038 	str.w	r4, [lr, #56]	; 0x38
	  htim2.Instance->CCR3 = PWMdata2[i]/37;
 80035e6:	f8ce 303c 	str.w	r3, [lr, #60]	; 0x3c
 80035ea:	e7ca      	b.n	8003582 <main+0x19e>
 80035ec:	40021000 	.word	0x40021000
 80035f0:	20001038 	.word	0x20001038
 80035f4:	48000400 	.word	0x48000400
 80035f8:	20000fc0 	.word	0x20000fc0
 80035fc:	40013800 	.word	0x40013800
 8003600:	20000d2c 	.word	0x20000d2c
 8003604:	08003920 	.word	0x08003920
 8003608:	20000e2c 	.word	0x20000e2c
 800360c:	0800395c 	.word	0x0800395c
 8003610:	bacf914d 	.word	0xbacf914d

08003614 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003614:	e7fe      	b.n	8003614 <_Error_Handler>
 8003616:	bf00      	nop

08003618 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003618:	4b22      	ldr	r3, [pc, #136]	; (80036a4 <HAL_MspInit+0x8c>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800361a:	b500      	push	{lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800361c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	661a      	str	r2, [r3, #96]	; 0x60
 8003624:	6e1a      	ldr	r2, [r3, #96]	; 0x60
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003626:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003628:	f002 0201 	and.w	r2, r2, #1
 800362c:	9200      	str	r2, [sp, #0]
 800362e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003630:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003632:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003636:	659a      	str	r2, [r3, #88]	; 0x58
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003640:	2003      	movs	r0, #3
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
 8003642:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003644:	f7fc ff80 	bl	8000548 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003648:	2200      	movs	r2, #0
 800364a:	4611      	mov	r1, r2
 800364c:	f06f 000b 	mvn.w	r0, #11
 8003650:	f7fc ff8c 	bl	800056c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003654:	2200      	movs	r2, #0
 8003656:	4611      	mov	r1, r2
 8003658:	f06f 000a 	mvn.w	r0, #10
 800365c:	f7fc ff86 	bl	800056c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003660:	2200      	movs	r2, #0
 8003662:	4611      	mov	r1, r2
 8003664:	f06f 0009 	mvn.w	r0, #9
 8003668:	f7fc ff80 	bl	800056c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800366c:	2200      	movs	r2, #0
 800366e:	4611      	mov	r1, r2
 8003670:	f06f 0004 	mvn.w	r0, #4
 8003674:	f7fc ff7a 	bl	800056c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003678:	2200      	movs	r2, #0
 800367a:	4611      	mov	r1, r2
 800367c:	f06f 0003 	mvn.w	r0, #3
 8003680:	f7fc ff74 	bl	800056c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003684:	2200      	movs	r2, #0
 8003686:	210f      	movs	r1, #15
 8003688:	f06f 0001 	mvn.w	r0, #1
 800368c:	f7fc ff6e 	bl	800056c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003690:	2200      	movs	r2, #0
 8003692:	210f      	movs	r1, #15
 8003694:	f04f 30ff 	mov.w	r0, #4294967295
 8003698:	f7fc ff68 	bl	800056c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800369c:	b003      	add	sp, #12
 800369e:	f85d fb04 	ldr.w	pc, [sp], #4
 80036a2:	bf00      	nop
 80036a4:	40021000 	.word	0x40021000

080036a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80036a8:	6803      	ldr	r3, [r0, #0]
 80036aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ae:	d000      	beq.n	80036b2 <HAL_TIM_Base_MspInit+0xa>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80036b0:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036b2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000

  /* USER CODE END MspInit 1 */
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036b6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	659a      	str	r2, [r3, #88]	; 0x58
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80036ca:	b002      	add	sp, #8
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop

080036d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 80036d0:	6803      	ldr	r3, [r0, #0]
 80036d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d6:	d000      	beq.n	80036da <HAL_TIM_MspPostInit+0xa>
 80036d8:	4770      	bx	lr
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036da:	b530      	push	{r4, r5, lr}
 80036dc:	b087      	sub	sp, #28
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036e0:	2201      	movs	r2, #1
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80036e2:	250e      	movs	r5, #14
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e4:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e6:	a901      	add	r1, sp, #4
 80036e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80036ec:	9501      	str	r5, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ee:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036f4:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f6:	f7fd f8c3 	bl	8000880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80036fa:	b007      	add	sp, #28
 80036fc:	bd30      	pop	{r4, r5, pc}
 80036fe:	bf00      	nop

08003700 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003700:	4b2f      	ldr	r3, [pc, #188]	; (80037c0 <HAL_UART_MspInit+0xc0>)
 8003702:	6802      	ldr	r2, [r0, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d000      	beq.n	800370a <HAL_UART_MspInit+0xa>
 8003708:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800370a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800370e:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003710:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003712:	4e2c      	ldr	r6, [pc, #176]	; (80037c4 <HAL_UART_MspInit+0xc4>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003714:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003718:	661a      	str	r2, [r3, #96]	; 0x60
 800371a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800371c:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800371e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003722:	4604      	mov	r4, r0
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003724:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2500      	movs	r5, #0
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800372a:	9300      	str	r3, [sp, #0]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800372e:	2307      	movs	r3, #7
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003730:	2702      	movs	r7, #2
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003732:	9001      	str	r0, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003734:	a901      	add	r1, sp, #4
 8003736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800373c:	9305      	str	r3, [sp, #20]
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800373e:	f8dd e000 	ldr.w	lr, [sp]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003742:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003744:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003746:	f7fd f89b 	bl	8000880 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800374a:	4a1f      	ldr	r2, [pc, #124]	; (80037c8 <HAL_UART_MspInit+0xc8>)
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800374c:	6077      	str	r7, [r6, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800374e:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003750:	4630      	mov	r0, r6

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003752:	60b5      	str	r5, [r6, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003754:	60f5      	str	r5, [r6, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003756:	6175      	str	r5, [r6, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003758:	61b5      	str	r5, [r6, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800375a:	61f5      	str	r5, [r6, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800375c:	6235      	str	r5, [r6, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800375e:	6032      	str	r2, [r6, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003760:	6133      	str	r3, [r6, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003762:	f7fc ff6d 	bl	8000640 <HAL_DMA_Init>
 8003766:	bb00      	cbnz	r0, 80037aa <HAL_UART_MspInit+0xaa>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003768:	4d18      	ldr	r5, [pc, #96]	; (80037cc <HAL_UART_MspInit+0xcc>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800376a:	66e6      	str	r6, [r4, #108]	; 0x6c

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800376c:	2300      	movs	r3, #0
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800376e:	4f18      	ldr	r7, [pc, #96]	; (80037d0 <HAL_UART_MspInit+0xd0>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003770:	62b4      	str	r4, [r6, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003772:	2110      	movs	r1, #16

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8003774:	2602      	movs	r6, #2
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003776:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003778:	4628      	mov	r0, r5
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800377a:	602f      	str	r7, [r5, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 800377c:	606e      	str	r6, [r5, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800377e:	60a9      	str	r1, [r5, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003780:	612a      	str	r2, [r5, #16]

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003782:	60eb      	str	r3, [r5, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003784:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003786:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003788:	61eb      	str	r3, [r5, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800378a:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800378c:	f7fc ff58 	bl	8000640 <HAL_DMA_Init>
 8003790:	b980      	cbnz	r0, 80037b4 <HAL_UART_MspInit+0xb4>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003792:	2200      	movs	r2, #0
 8003794:	2105      	movs	r1, #5
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003796:	66a5      	str	r5, [r4, #104]	; 0x68

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003798:	2025      	movs	r0, #37	; 0x25
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800379a:	62ac      	str	r4, [r5, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800379c:	f7fc fee6 	bl	800056c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80037a0:	2025      	movs	r0, #37	; 0x25
 80037a2:	f7fc ff1b 	bl	80005dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80037a6:	b007      	add	sp, #28
 80037a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
 80037aa:	21c2      	movs	r1, #194	; 0xc2
 80037ac:	4809      	ldr	r0, [pc, #36]	; (80037d4 <HAL_UART_MspInit+0xd4>)
 80037ae:	f7ff ff31 	bl	8003614 <_Error_Handler>
 80037b2:	e7d9      	b.n	8003768 <HAL_UART_MspInit+0x68>
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
 80037b4:	21d3      	movs	r1, #211	; 0xd3
 80037b6:	4807      	ldr	r0, [pc, #28]	; (80037d4 <HAL_UART_MspInit+0xd4>)
 80037b8:	f7ff ff2c 	bl	8003614 <_Error_Handler>
 80037bc:	e7e9      	b.n	8003792 <HAL_UART_MspInit+0x92>
 80037be:	bf00      	nop
 80037c0:	40013800 	.word	0x40013800
 80037c4:	20000f78 	.word	0x20000f78
 80037c8:	40020058 	.word	0x40020058
 80037cc:	20000f30 	.word	0x20000f30
 80037d0:	40020044 	.word	0x40020044
 80037d4:	08003b5c 	.word	0x08003b5c

080037d8 <NMI_Handler>:
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop

080037dc <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80037dc:	e7fe      	b.n	80037dc <HardFault_Handler>
 80037de:	bf00      	nop

080037e0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80037e0:	e7fe      	b.n	80037e0 <MemManage_Handler>
 80037e2:	bf00      	nop

080037e4 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80037e4:	e7fe      	b.n	80037e4 <BusFault_Handler>
 80037e6:	bf00      	nop

080037e8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80037e8:	e7fe      	b.n	80037e8 <UsageFault_Handler>
 80037ea:	bf00      	nop

080037ec <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop

080037f0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80037f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037f2:	f7fc fe9b 	bl	800052c <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  osSystickHandler();
 80037fa:	f7fe bf11 	b.w	8002620 <osSystickHandler>
 80037fe:	bf00      	nop

08003800 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003800:	4801      	ldr	r0, [pc, #4]	; (8003808 <DMA1_Channel4_IRQHandler+0x8>)
 8003802:	f7fc bff1 	b.w	80007e8 <HAL_DMA_IRQHandler>
 8003806:	bf00      	nop
 8003808:	20000f30 	.word	0x20000f30

0800380c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800380c:	4801      	ldr	r0, [pc, #4]	; (8003814 <DMA1_Channel5_IRQHandler+0x8>)
 800380e:	f7fc bfeb 	b.w	80007e8 <HAL_DMA_IRQHandler>
 8003812:	bf00      	nop
 8003814:	20000f78 	.word	0x20000f78

08003818 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003818:	4801      	ldr	r0, [pc, #4]	; (8003820 <USART1_IRQHandler+0x8>)
 800381a:	f7fe bbb3 	b.w	8001f84 <HAL_UART_IRQHandler>
 800381e:	bf00      	nop
 8003820:	20000fc0 	.word	0x20000fc0

08003824 <SystemInit>:
  //  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  //#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003824:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <SystemInit+0x3c>)

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003826:	480f      	ldr	r0, [pc, #60]	; (8003864 <SystemInit+0x40>)
  //  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  //#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003828:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800382a:	2100      	movs	r1, #0
  //  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  //#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800382c:	f042 0201 	orr.w	r2, r2, #1
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003830:	b410      	push	{r4}
  //  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  //#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003832:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003834:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800383c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003840:	f44f 5480 	mov.w	r4, #4096	; 0x1000

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003844:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003846:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003848:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800384a:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800384e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003852:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003854:	6199      	str	r1, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003856:	6084      	str	r4, [r0, #8]
#endif
}
 8003858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800386c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800386e:	e003      	b.n	8003878 <LoopCopyDataInit>

08003870 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003872:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003874:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003876:	3104      	adds	r1, #4

08003878 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003878:	480b      	ldr	r0, [pc, #44]	; (80038a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800387a:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800387c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800387e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003880:	d3f6      	bcc.n	8003870 <CopyDataInit>
	ldr	r2, =_sbss
 8003882:	4a0b      	ldr	r2, [pc, #44]	; (80038b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003884:	e002      	b.n	800388c <LoopFillZerobss>

08003886 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003886:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003888:	f842 3b04 	str.w	r3, [r2], #4

0800388c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800388c:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <LoopForever+0x16>)
	cmp	r2, r3
 800388e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003890:	d3f9      	bcc.n	8003886 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003892:	f7ff ffc7 	bl	8003824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003896:	f000 f811 	bl	80038bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800389a:	f7ff fda3 	bl	80033e4 <main>

0800389e <LoopForever>:

LoopForever:
    b LoopForever
 800389e:	e7fe      	b.n	800389e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80038a0:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80038a4:	08003bd0 	.word	0x08003bd0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80038a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80038ac:	20000008 	.word	0x20000008
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80038b0:	20000008 	.word	0x20000008
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80038b4:	20001078 	.word	0x20001078

080038b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038b8:	e7fe      	b.n	80038b8 <ADC1_IRQHandler>
	...

080038bc <__libc_init_array>:
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <__libc_init_array+0x3c>)
 80038c0:	4c0e      	ldr	r4, [pc, #56]	; (80038fc <__libc_init_array+0x40>)
 80038c2:	1ae4      	subs	r4, r4, r3
 80038c4:	10a4      	asrs	r4, r4, #2
 80038c6:	2500      	movs	r5, #0
 80038c8:	461e      	mov	r6, r3
 80038ca:	42a5      	cmp	r5, r4
 80038cc:	d004      	beq.n	80038d8 <__libc_init_array+0x1c>
 80038ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038d2:	4798      	blx	r3
 80038d4:	3501      	adds	r5, #1
 80038d6:	e7f8      	b.n	80038ca <__libc_init_array+0xe>
 80038d8:	f000 f816 	bl	8003908 <_init>
 80038dc:	4c08      	ldr	r4, [pc, #32]	; (8003900 <__libc_init_array+0x44>)
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <__libc_init_array+0x48>)
 80038e0:	1ae4      	subs	r4, r4, r3
 80038e2:	10a4      	asrs	r4, r4, #2
 80038e4:	2500      	movs	r5, #0
 80038e6:	461e      	mov	r6, r3
 80038e8:	42a5      	cmp	r5, r4
 80038ea:	d004      	beq.n	80038f6 <__libc_init_array+0x3a>
 80038ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038f0:	4798      	blx	r3
 80038f2:	3501      	adds	r5, #1
 80038f4:	e7f8      	b.n	80038e8 <__libc_init_array+0x2c>
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
 80038f8:	08003bc8 	.word	0x08003bc8
 80038fc:	08003bc8 	.word	0x08003bc8
 8003900:	08003bcc 	.word	0x08003bcc
 8003904:	08003bc8 	.word	0x08003bc8

08003908 <_init>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	bf00      	nop
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr

08003914 <_fini>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	bf00      	nop
 8003918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391a:	bc08      	pop	{r3}
 800391c:	469e      	mov	lr, r3
 800391e:	4770      	bx	lr
