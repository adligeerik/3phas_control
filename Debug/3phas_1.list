
C:\Users\erikv\Documents\3phas\3phas_1\Debug\3phas_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000408c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800421c  0800421c  0001421c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080044ec  080044ec  000144ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080044f4  080044f4  000144f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000008  20000000  080044fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001328  20000008  08004504  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001330  08004504  00021330  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   000166ae  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003322  00000000  00000000  000366e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ef02  00000000  00000000  00039a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001108  00000000  00000000  00048910  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001a00  00000000  00000000  00049a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000903c  00000000  00000000  0004b418  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005fc0  00000000  00000000  00054454  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0005a414  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000036dc  00000000  00000000  0005a494  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000008 	.word	0x20000008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004204 	.word	0x08004204

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	08004204 	.word	0x08004204

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97e 	b.w	80004e4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460e      	mov	r6, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9d08      	ldr	r5, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d150      	bne.n	80002b2 <__udivmoddi4+0xb2>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96c      	bls.n	80002f0 <__udivmoddi4+0xf0>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0420 	rsb	r4, lr, #32
 8000224:	fa20 f404 	lsr.w	r4, r0, r4
 8000228:	fa01 f60e 	lsl.w	r6, r1, lr
 800022c:	ea44 0c06 	orr.w	ip, r4, r6
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800023c:	0c22      	lsrs	r2, r4, #16
 800023e:	fbbc f0f9 	udiv	r0, ip, r9
 8000242:	fa1f f887 	uxth.w	r8, r7
 8000246:	fb09 c610 	mls	r6, r9, r0, ip
 800024a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800024e:	fb00 f308 	mul.w	r3, r0, r8
 8000252:	42b3      	cmp	r3, r6
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x6a>
 8000256:	19f6      	adds	r6, r6, r7
 8000258:	f100 32ff 	add.w	r2, r0, #4294967295
 800025c:	f080 8122 	bcs.w	80004a4 <__udivmoddi4+0x2a4>
 8000260:	42b3      	cmp	r3, r6
 8000262:	f240 811f 	bls.w	80004a4 <__udivmoddi4+0x2a4>
 8000266:	3802      	subs	r0, #2
 8000268:	443e      	add	r6, r7
 800026a:	1af6      	subs	r6, r6, r3
 800026c:	b2a2      	uxth	r2, r4
 800026e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000272:	fb09 6613 	mls	r6, r9, r3, r6
 8000276:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800027a:	fb03 f808 	mul.w	r8, r3, r8
 800027e:	45a0      	cmp	r8, r4
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x96>
 8000282:	19e4      	adds	r4, r4, r7
 8000284:	f103 32ff 	add.w	r2, r3, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x2a0>
 800028c:	45a0      	cmp	r8, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x2a0>
 8000292:	3b02      	subs	r3, #2
 8000294:	443c      	add	r4, r7
 8000296:	ebc8 0404 	rsb	r4, r8, r4
 800029a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	2d00      	cmp	r5, #0
 80002a2:	d062      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a4:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a8:	2300      	movs	r3, #0
 80002aa:	602c      	str	r4, [r5, #0]
 80002ac:	606b      	str	r3, [r5, #4]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d907      	bls.n	80002c6 <__udivmoddi4+0xc6>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	d055      	beq.n	8000366 <__udivmoddi4+0x166>
 80002ba:	2100      	movs	r1, #0
 80002bc:	e885 0041 	stmia.w	r5, {r0, r6}
 80002c0:	4608      	mov	r0, r1
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	f040 8090 	bne.w	80003f0 <__udivmoddi4+0x1f0>
 80002d0:	42b3      	cmp	r3, r6
 80002d2:	d302      	bcc.n	80002da <__udivmoddi4+0xda>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	f200 80f8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 80002da:	1a84      	subs	r4, r0, r2
 80002dc:	eb66 0603 	sbc.w	r6, r6, r3
 80002e0:	2001      	movs	r0, #1
 80002e2:	46b4      	mov	ip, r6
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d040      	beq.n	800036a <__udivmoddi4+0x16a>
 80002e8:	e885 1010 	stmia.w	r5, {r4, ip}
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	b912      	cbnz	r2, 80002f8 <__udivmoddi4+0xf8>
 80002f2:	2701      	movs	r7, #1
 80002f4:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f8:	fab7 fe87 	clz	lr, r7
 80002fc:	f1be 0f00 	cmp.w	lr, #0
 8000300:	d135      	bne.n	800036e <__udivmoddi4+0x16e>
 8000302:	1bf3      	subs	r3, r6, r7
 8000304:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000312:	0c22      	lsrs	r2, r4, #16
 8000314:	fb08 3610 	mls	r6, r8, r0, r3
 8000318:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800031c:	fb0c f300 	mul.w	r3, ip, r0
 8000320:	42b3      	cmp	r3, r6
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19f6      	adds	r6, r6, r7
 8000326:	f100 32ff 	add.w	r2, r0, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42b3      	cmp	r3, r6
 800032e:	f200 80ce 	bhi.w	80004ce <__udivmoddi4+0x2ce>
 8000332:	4610      	mov	r0, r2
 8000334:	1af6      	subs	r6, r6, r3
 8000336:	b2a2      	uxth	r2, r4
 8000338:	fbb6 f3f8 	udiv	r3, r6, r8
 800033c:	fb08 6613 	mls	r6, r8, r3, r6
 8000340:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000344:	fb0c fc03 	mul.w	ip, ip, r3
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b5 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 800035a:	4613      	mov	r3, r2
 800035c:	ebcc 0404 	rsb	r4, ip, r4
 8000360:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000364:	e79c      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000366:	4629      	mov	r1, r5
 8000368:	4628      	mov	r0, r5
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0120 	rsb	r1, lr, #32
 8000372:	fa06 f30e 	lsl.w	r3, r6, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f901 	lsr.w	r9, r0, r1
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	40ce      	lsrs	r6, r1
 8000384:	ea49 0903 	orr.w	r9, r9, r3
 8000388:	fbb6 faf8 	udiv	sl, r6, r8
 800038c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000390:	fb08 661a 	mls	r6, r8, sl, r6
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800039c:	fb0a f20c 	mul.w	r2, sl, ip
 80003a0:	429a      	cmp	r2, r3
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1be>
 80003a8:	19db      	adds	r3, r3, r7
 80003aa:	f10a 31ff 	add.w	r1, sl, #4294967295
 80003ae:	f080 8087 	bcs.w	80004c0 <__udivmoddi4+0x2c0>
 80003b2:	429a      	cmp	r2, r3
 80003b4:	f240 8084 	bls.w	80004c0 <__udivmoddi4+0x2c0>
 80003b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80003bc:	443b      	add	r3, r7
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fa1f f989 	uxth.w	r9, r9
 80003c4:	fbb3 f1f8 	udiv	r1, r3, r8
 80003c8:	fb08 3311 	mls	r3, r8, r1, r3
 80003cc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80003d0:	fb01 f60c 	mul.w	r6, r1, ip
 80003d4:	429e      	cmp	r6, r3
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0x1e8>
 80003d8:	19db      	adds	r3, r3, r7
 80003da:	f101 32ff 	add.w	r2, r1, #4294967295
 80003de:	d26b      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 80003e0:	429e      	cmp	r6, r3
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 80003e4:	3902      	subs	r1, #2
 80003e6:	443b      	add	r3, r7
 80003e8:	1b9b      	subs	r3, r3, r6
 80003ea:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80003ee:	e78e      	b.n	800030e <__udivmoddi4+0x10e>
 80003f0:	f1c1 0e20 	rsb	lr, r1, #32
 80003f4:	fa22 f40e 	lsr.w	r4, r2, lr
 80003f8:	408b      	lsls	r3, r1
 80003fa:	4323      	orrs	r3, r4
 80003fc:	fa20 f70e 	lsr.w	r7, r0, lr
 8000400:	fa06 f401 	lsl.w	r4, r6, r1
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	fa26 f60e 	lsr.w	r6, r6, lr
 800040c:	433c      	orrs	r4, r7
 800040e:	fbb6 f9fc 	udiv	r9, r6, ip
 8000412:	0c27      	lsrs	r7, r4, #16
 8000414:	fb0c 6619 	mls	r6, ip, r9, r6
 8000418:	fa1f f883 	uxth.w	r8, r3
 800041c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000420:	fb09 f708 	mul.w	r7, r9, r8
 8000424:	42b7      	cmp	r7, r6
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	fa00 fa01 	lsl.w	sl, r0, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x242>
 8000430:	18f6      	adds	r6, r6, r3
 8000432:	f109 30ff 	add.w	r0, r9, #4294967295
 8000436:	d241      	bcs.n	80004bc <__udivmoddi4+0x2bc>
 8000438:	42b7      	cmp	r7, r6
 800043a:	d93f      	bls.n	80004bc <__udivmoddi4+0x2bc>
 800043c:	f1a9 0902 	sub.w	r9, r9, #2
 8000440:	441e      	add	r6, r3
 8000442:	1bf6      	subs	r6, r6, r7
 8000444:	b2a0      	uxth	r0, r4
 8000446:	fbb6 f4fc 	udiv	r4, r6, ip
 800044a:	fb0c 6614 	mls	r6, ip, r4, r6
 800044e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000452:	fb04 f808 	mul.w	r8, r4, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x26a>
 800045a:	18ff      	adds	r7, r7, r3
 800045c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000460:	d228      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d926      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 8000466:	3c02      	subs	r4, #2
 8000468:	441f      	add	r7, r3
 800046a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800046e:	ebc8 0707 	rsb	r7, r8, r7
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	4644      	mov	r4, r8
 800047a:	464e      	mov	r6, r9
 800047c:	d314      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	d029      	beq.n	80004d4 <__udivmoddi4+0x2d4>
 8000480:	b365      	cbz	r5, 80004dc <__udivmoddi4+0x2dc>
 8000482:	ebba 0304 	subs.w	r3, sl, r4
 8000486:	eb67 0706 	sbc.w	r7, r7, r6
 800048a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800048e:	40cb      	lsrs	r3, r1
 8000490:	40cf      	lsrs	r7, r1
 8000492:	ea4e 0303 	orr.w	r3, lr, r3
 8000496:	e885 0088 	stmia.w	r5, {r3, r7}
 800049a:	2100      	movs	r1, #0
 800049c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a0:	4613      	mov	r3, r2
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x96>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6e0      	b.n	800026a <__udivmoddi4+0x6a>
 80004a8:	ebb8 0402 	subs.w	r4, r8, r2
 80004ac:	eb69 0603 	sbc.w	r6, r9, r3
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7e5      	b.n	8000480 <__udivmoddi4+0x280>
 80004b4:	4604      	mov	r4, r0
 80004b6:	e7d8      	b.n	800046a <__udivmoddi4+0x26a>
 80004b8:	4611      	mov	r1, r2
 80004ba:	e795      	b.n	80003e8 <__udivmoddi4+0x1e8>
 80004bc:	4681      	mov	r9, r0
 80004be:	e7c0      	b.n	8000442 <__udivmoddi4+0x242>
 80004c0:	468a      	mov	sl, r1
 80004c2:	e77c      	b.n	80003be <__udivmoddi4+0x1be>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e748      	b.n	800035c <__udivmoddi4+0x15c>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e70a      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443e      	add	r6, r7
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x134>
 80004d4:	45c2      	cmp	sl, r8
 80004d6:	d3e7      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80004d8:	463e      	mov	r6, r7
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x280>
 80004dc:	4629      	mov	r1, r5
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_InitTick+0x24>)
 80004ea:	4a09      	ldr	r2, [pc, #36]	; (8000510 <HAL_InitTick+0x28>)
 80004ec:	681b      	ldr	r3, [r3, #0]
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004ee:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004f0:	fba2 2303 	umull	r2, r3, r2, r3
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f4:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004f6:	0998      	lsrs	r0, r3, #6
 80004f8:	f000 f87c 	bl	80005f4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80004fc:	4621      	mov	r1, r4
 80004fe:	2200      	movs	r2, #0
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f832 	bl	800056c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000508:	2000      	movs	r0, #0
 800050a:	bd10      	pop	{r4, pc}
 800050c:	20000004 	.word	0x20000004
 8000510:	10624dd3 	.word	0x10624dd3

08000514 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000516:	2003      	movs	r0, #3
 8000518:	f000 f816 	bl	8000548 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051c:	200f      	movs	r0, #15
 800051e:	f7ff ffe3 	bl	80004e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000522:	f003 fc85 	bl	8003e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000526:	2000      	movs	r0, #0
 8000528:	bd08      	pop	{r3, pc}
 800052a:	bf00      	nop

0800052c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800052c:	4a02      	ldr	r2, [pc, #8]	; (8000538 <HAL_IncTick+0xc>)
 800052e:	6813      	ldr	r3, [r2, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000d28 	.word	0x20000d28

0800053c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800053c:	4b01      	ldr	r3, [pc, #4]	; (8000544 <HAL_GetTick+0x8>)
 800053e:	6818      	ldr	r0, [r3, #0]
}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000d28 	.word	0x20000d28

08000548 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000548:	4a07      	ldr	r2, [pc, #28]	; (8000568 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800054a:	68d1      	ldr	r1, [r2, #12]
 800054c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000550:	400b      	ands	r3, r1
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000552:	0200      	lsls	r0, r0, #8
 8000554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000558:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800055c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000560:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000562:	60d3      	str	r3, [r2, #12]
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <HAL_NVIC_SetPriority+0x68>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000574:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000576:	f1c3 0507 	rsb	r5, r3, #7
 800057a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800057c:	f103 0404 	add.w	r4, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000580:	bf28      	it	cs
 8000582:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000584:	2c06      	cmp	r4, #6
 8000586:	d918      	bls.n	80005ba <HAL_NVIC_SetPriority+0x4e>
 8000588:	3b03      	subs	r3, #3
 800058a:	2401      	movs	r4, #1
 800058c:	409c      	lsls	r4, r3
 800058e:	3c01      	subs	r4, #1
 8000590:	4022      	ands	r2, r4

  return (
 8000592:	2401      	movs	r4, #1
 8000594:	40ac      	lsls	r4, r5
 8000596:	3c01      	subs	r4, #1
 8000598:	4021      	ands	r1, r4
 800059a:	fa01 f303 	lsl.w	r3, r1, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800059e:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80005a0:	ea42 0203 	orr.w	r2, r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80005a4:	db0c      	blt.n	80005c0 <HAL_NVIC_SetPriority+0x54>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005aa:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005ae:	0112      	lsls	r2, r2, #4
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005b6:	bc30      	pop	{r4, r5}
 80005b8:	4770      	bx	lr
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ba:	2200      	movs	r2, #0
 80005bc:	4613      	mov	r3, r2
 80005be:	e7e8      	b.n	8000592 <HAL_NVIC_SetPriority+0x26>
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_NVIC_SetPriority+0x6c>)
 80005c2:	f000 000f 	and.w	r0, r0, #15
 80005c6:	0112      	lsls	r2, r2, #4
 80005c8:	4403      	add	r3, r0
 80005ca:	b2d2      	uxtb	r2, r2
 80005cc:	761a      	strb	r2, [r3, #24]
 80005ce:	bc30      	pop	{r4, r5}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	e000ed00 	.word	0xe000ed00
 80005d8:	e000ecfc 	.word	0xe000ecfc

080005dc <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005dc:	f000 011f 	and.w	r1, r0, #31
 80005e0:	2301      	movs	r3, #1
 80005e2:	0940      	lsrs	r0, r0, #5
 80005e4:	4a02      	ldr	r2, [pc, #8]	; (80005f0 <HAL_NVIC_EnableIRQ+0x14>)
 80005e6:	408b      	lsls	r3, r1
 80005e8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005f4:	3801      	subs	r0, #1
 80005f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005fa:	d20e      	bcs.n	800061a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005fe:	b410      	push	{r4}
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	4c08      	ldr	r4, [pc, #32]	; (8000624 <HAL_SYSTICK_Config+0x30>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000602:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	20f0      	movs	r0, #240	; 0xf0
 8000606:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800060a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800060c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800060e:	4610      	mov	r0, r2
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000612:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000618:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800061a:	2001      	movs	r0, #1
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000e010 	.word	0xe000e010
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800062a:	6813      	ldr	r3, [r2, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800062c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800062e:	bf0c      	ite	eq
 8000630:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000634:	f023 0304 	bicne.w	r3, r3, #4
 8000638:	6013      	str	r3, [r2, #0]
 800063a:	4770      	bx	lr
 800063c:	e000e010 	.word	0xe000e010

08000640 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000640:	2800      	cmp	r0, #0
 8000642:	d04b      	beq.n	80006dc <HAL_DMA_Init+0x9c>
 8000644:	4603      	mov	r3, r0
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000646:	4a2f      	ldr	r2, [pc, #188]	; (8000704 <HAL_DMA_Init+0xc4>)
 8000648:	6800      	ldr	r0, [r0, #0]
 800064a:	4290      	cmp	r0, r2
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800064c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800064e:	d941      	bls.n	80006d4 <HAL_DMA_Init+0x94>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000650:	4a2d      	ldr	r2, [pc, #180]	; (8000708 <HAL_DMA_Init+0xc8>)
 8000652:	492e      	ldr	r1, [pc, #184]	; (800070c <HAL_DMA_Init+0xcc>)
    hdma->DmaBaseAddress = DMA2;
 8000654:	4c2e      	ldr	r4, [pc, #184]	; (8000710 <HAL_DMA_Init+0xd0>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000656:	689f      	ldr	r7, [r3, #8]
 8000658:	68de      	ldr	r6, [r3, #12]
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 800065a:	641c      	str	r4, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800065c:	4402      	add	r2, r0
 800065e:	fba1 1202 	umull	r1, r2, r1, r2
 8000662:	0912      	lsrs	r2, r2, #4
 8000664:	0092      	lsls	r2, r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000666:	f103 0114 	add.w	r1, r3, #20
 800066a:	691c      	ldr	r4, [r3, #16]
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800066c:	645a      	str	r2, [r3, #68]	; 0x44
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800066e:	c926      	ldmia	r1, {r1, r2, r5}
 8000670:	433e      	orrs	r6, r7
 8000672:	4326      	orrs	r6, r4
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000674:	2402      	movs	r4, #2
 8000676:	f883 4025 	strb.w	r4, [r3, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800067a:	430e      	orrs	r6, r1

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800067c:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800067e:	6a1c      	ldr	r4, [r3, #32]
 8000680:	4332      	orrs	r2, r6
 8000682:	4315      	orrs	r5, r2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000684:	f421 42ff 	bic.w	r2, r1, #32640	; 0x7f80
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000688:	432c      	orrs	r4, r5

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800068a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800068e:	4322      	orrs	r2, r4
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000690:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000694:	6002      	str	r2, [r0, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000696:	d010      	beq.n	80006ba <HAL_DMA_Init+0x7a>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000698:	4a1e      	ldr	r2, [pc, #120]	; (8000714 <HAL_DMA_Init+0xd4>)
 800069a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800069c:	4291      	cmp	r1, r2
 800069e:	d01f      	beq.n	80006e0 <HAL_DMA_Init+0xa0>
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 80006a0:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <HAL_DMA_Init+0xd8>)
 80006a2:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80006a4:	6814      	ldr	r4, [r2, #0]
 80006a6:	200f      	movs	r0, #15
 80006a8:	40a8      	lsls	r0, r5
 80006aa:	ea24 0000 	bic.w	r0, r4, r0
 80006ae:	6010      	str	r0, [r2, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex));
 80006b0:	6859      	ldr	r1, [r3, #4]
 80006b2:	6810      	ldr	r0, [r2, #0]
 80006b4:	40a9      	lsls	r1, r5
 80006b6:	4301      	orrs	r1, r0
 80006b8:	6011      	str	r1, [r2, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80006ba:	2000      	movs	r0, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80006bc:	2201      	movs	r2, #1
  hdma->XferHalfCpltCallback = NULL;
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006be:	63d8      	str	r0, [r3, #60]	; 0x3c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80006c0:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80006c2:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80006c4:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80006c6:	6398      	str	r0, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80006c8:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80006cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
}
 80006d0:	bcf0      	pop	{r4, r5, r6, r7}
 80006d2:	4770      	bx	lr

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80006d4:	4a11      	ldr	r2, [pc, #68]	; (800071c <HAL_DMA_Init+0xdc>)
 80006d6:	490d      	ldr	r1, [pc, #52]	; (800070c <HAL_DMA_Init+0xcc>)
    hdma->DmaBaseAddress = DMA1;
 80006d8:	4c0e      	ldr	r4, [pc, #56]	; (8000714 <HAL_DMA_Init+0xd4>)
 80006da:	e7bc      	b.n	8000656 <HAL_DMA_Init+0x16>
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80006dc:	2001      	movs	r0, #1
 80006de:	4770      	bx	lr
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 80006e0:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 80006e2:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 80006e6:	200f      	movs	r0, #15
 80006e8:	40a8      	lsls	r0, r5
 80006ea:	ea24 0000 	bic.w	r0, r4, r0
 80006ee:	f8c2 00a8 	str.w	r0, [r2, #168]	; 0xa8

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex));
 80006f2:	6859      	ldr	r1, [r3, #4]
 80006f4:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
 80006f8:	40a9      	lsls	r1, r5
 80006fa:	4301      	orrs	r1, r0
 80006fc:	f8c2 10a8 	str.w	r1, [r2, #168]	; 0xa8
 8000700:	e7db      	b.n	80006ba <HAL_DMA_Init+0x7a>
 8000702:	bf00      	nop
 8000704:	40020407 	.word	0x40020407
 8000708:	bffdfbf8 	.word	0xbffdfbf8
 800070c:	cccccccd 	.word	0xcccccccd
 8000710:	40020400 	.word	0x40020400
 8000714:	40020000 	.word	0x40020000
 8000718:	400204a8 	.word	0x400204a8
 800071c:	bffdfff8 	.word	0xbffdfff8

08000720 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000720:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000722:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8000726:	2c01      	cmp	r4, #1
 8000728:	d00c      	beq.n	8000744 <HAL_DMA_Start_IT+0x24>

  if(HAL_DMA_STATE_READY == hdma->State)
 800072a:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800072e:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8000730:	b2e4      	uxtb	r4, r4
 8000732:	42ac      	cmp	r4, r5

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000734:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000738:	d006      	beq.n	8000748 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800073a:	2300      	movs	r3, #0
 800073c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000740:	2002      	movs	r0, #2
 8000742:	bdf0      	pop	{r4, r5, r6, r7, pc}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000744:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8000746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000748:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hdma);

  if(HAL_DMA_STATE_READY == hdma->State)
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800074a:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800074c:	2600      	movs	r6, #0
  __HAL_LOCK(hdma);

  if(HAL_DMA_STATE_READY == hdma->State)
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800074e:	f880 7025 	strb.w	r7, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000752:	63c6      	str	r6, [r0, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000754:	682e      	ldr	r6, [r5, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000756:	6c07      	ldr	r7, [r0, #64]	; 0x40
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000758:	f026 0e01 	bic.w	lr, r6, #1
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800075c:	6c46      	ldr	r6, [r0, #68]	; 0x44
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800075e:	f8c5 e000 	str.w	lr, [r5]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000762:	40b4      	lsls	r4, r6

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000764:	6886      	ldr	r6, [r0, #8]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000766:	607c      	str	r4, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000768:	606b      	str	r3, [r5, #4]
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800076a:	6b03      	ldr	r3, [r0, #48]	; 0x30

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800076c:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800076e:	bf0b      	itete	eq
 8000770:	60aa      	streq	r2, [r5, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000772:	60a9      	strne	r1, [r5, #8]
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000774:	60e9      	streq	r1, [r5, #12]
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000776:	60ea      	strne	r2, [r5, #12]
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000778:	b14b      	cbz	r3, 800078e <HAL_DMA_Start_IT+0x6e>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800077a:	682b      	ldr	r3, [r5, #0]
 800077c:	f043 030e 	orr.w	r3, r3, #14
 8000780:	602b      	str	r3, [r5, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000782:	682b      	ldr	r3, [r5, #0]
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	602b      	str	r3, [r5, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 800078a:	2000      	movs	r0, #0
 800078c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800078e:	682b      	ldr	r3, [r5, #0]
 8000790:	f023 0304 	bic.w	r3, r3, #4
 8000794:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000796:	682b      	ldr	r3, [r5, #0]
 8000798:	f043 030a 	orr.w	r3, r3, #10
 800079c:	602b      	str	r3, [r5, #0]
 800079e:	e7f0      	b.n	8000782 <HAL_DMA_Start_IT+0x62>

080007a0 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80007a0:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80007a4:	2a02      	cmp	r2, #2
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80007a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80007a8:	d003      	beq.n	80007b2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007aa:	2204      	movs	r2, #4
 80007ac:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 80007ae:	2001      	movs	r0, #1
 80007b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007b2:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007b4:	6c41      	ldr	r1, [r0, #68]	; 0x44
    status = HAL_ERROR;
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007b6:	6814      	ldr	r4, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007b8:	6c07      	ldr	r7, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80007ba:	6b86      	ldr	r6, [r0, #56]	; 0x38
    status = HAL_ERROR;
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007bc:	f024 040e 	bic.w	r4, r4, #14
 80007c0:	6014      	str	r4, [r2, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80007c2:	6814      	ldr	r4, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007c4:	2501      	movs	r5, #1
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80007c6:	f024 0401 	bic.w	r4, r4, #1
 80007ca:	6014      	str	r4, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007cc:	fa05 f101 	lsl.w	r1, r5, r1

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007d0:	2400      	movs	r4, #0
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007d2:	6079      	str	r1, [r7, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80007d4:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007d8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80007dc:	b116      	cbz	r6, 80007e4 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 80007de:	47b0      	blx	r6
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
 80007e0:	4620      	mov	r0, r4
 80007e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007e4:	4630      	mov	r0, r6
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80007e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080007e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80007e8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80007ea:	6c05      	ldr	r5, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80007ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80007ee:	6829      	ldr	r1, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80007f0:	6804      	ldr	r4, [r0, #0]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80007f2:	2304      	movs	r3, #4
 80007f4:	4093      	lsls	r3, r2
 80007f6:	4219      	tst	r1, r3
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
 80007f8:	6826      	ldr	r6, [r4, #0]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80007fa:	d00d      	beq.n	8000818 <HAL_DMA_IRQHandler+0x30>
 80007fc:	0777      	lsls	r7, r6, #29
 80007fe:	d50b      	bpl.n	8000818 <HAL_DMA_IRQHandler+0x30>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000800:	6822      	ldr	r2, [r4, #0]
 8000802:	0692      	lsls	r2, r2, #26
 8000804:	d403      	bmi.n	800080e <HAL_DMA_IRQHandler+0x26>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000806:	6822      	ldr	r2, [r4, #0]
 8000808:	f022 0204 	bic.w	r2, r2, #4
 800080c:	6022      	str	r2, [r4, #0]
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800080e:	6b02      	ldr	r2, [r0, #48]	; 0x30
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8000810:	606b      	str	r3, [r5, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000812:	b1c2      	cbz	r2, 8000846 <HAL_DMA_IRQHandler+0x5e>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8000814:	bcf0      	pop	{r4, r5, r6, r7}
    __HAL_UNLOCK(hdma);

    if(hdma->XferCpltCallback != NULL)
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000816:	4710      	bx	r2
        hdma->XferHalfCpltCallback(hdma);
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000818:	2302      	movs	r3, #2
 800081a:	4093      	lsls	r3, r2
 800081c:	4219      	tst	r1, r3
 800081e:	d014      	beq.n	800084a <HAL_DMA_IRQHandler+0x62>
 8000820:	07b7      	lsls	r7, r6, #30
 8000822:	d512      	bpl.n	800084a <HAL_DMA_IRQHandler+0x62>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000824:	6822      	ldr	r2, [r4, #0]
 8000826:	0692      	lsls	r2, r2, #26
 8000828:	d406      	bmi.n	8000838 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800082a:	6822      	ldr	r2, [r4, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800082c:	2101      	movs	r1, #1
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800082e:	f022 020a 	bic.w	r2, r2, #10
 8000832:	6022      	str	r2, [r4, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000834:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if(hdma->XferCpltCallback != NULL)
 8000838:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 800083a:	606b      	str	r3, [r5, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800083c:	2300      	movs	r3, #0
 800083e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000842:	2a00      	cmp	r2, #0
 8000844:	d1e6      	bne.n	8000814 <HAL_DMA_IRQHandler+0x2c>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8000846:	bcf0      	pop	{r4, r5, r6, r7}
 8000848:	4770      	bx	lr
      hdma->XferCpltCallback(hdma);
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800084a:	2308      	movs	r3, #8
 800084c:	4093      	lsls	r3, r2
 800084e:	420b      	tst	r3, r1
 8000850:	d0f9      	beq.n	8000846 <HAL_DMA_IRQHandler+0x5e>
 8000852:	0733      	lsls	r3, r6, #28
 8000854:	d5f7      	bpl.n	8000846 <HAL_DMA_IRQHandler+0x5e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000856:	6821      	ldr	r1, [r4, #0]
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8000858:	6b46      	ldr	r6, [r0, #52]	; 0x34
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800085a:	2301      	movs	r3, #1
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800085c:	f021 010e 	bic.w	r1, r1, #14

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000860:	fa03 f202 	lsl.w	r2, r3, r2

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000864:	2700      	movs	r7, #0
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000866:	6021      	str	r1, [r4, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000868:	606a      	str	r2, [r5, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800086a:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800086c:	f880 7024 	strb.w	r7, [r0, #36]	; 0x24

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000870:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8000874:	2e00      	cmp	r6, #0
 8000876:	d0e6      	beq.n	8000846 <HAL_DMA_IRQHandler+0x5e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000878:	4633      	mov	r3, r6
    }
  }
  return;
}
 800087a:	bcf0      	pop	{r4, r5, r6, r7}
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800087c:	4718      	bx	r3
 800087e:	bf00      	nop

08000880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000880:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000882:	6809      	ldr	r1, [r1, #0]
 8000884:	2900      	cmp	r1, #0
 8000886:	f000 80c6 	beq.w	8000a16 <HAL_GPIO_Init+0x196>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800088a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800088e:	f8df e194 	ldr.w	lr, [pc, #404]	; 8000a24 <HAL_GPIO_Init+0x1a4>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000892:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000894:	2500      	movs	r5, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000896:	f04f 0801 	mov.w	r8, #1
 800089a:	e070      	b.n	800097e <HAL_GPIO_Init+0xfe>
 800089c:	ea4f 0945 	mov.w	r9, r5, lsl #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80008a0:	2303      	movs	r3, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a2:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80008a6:	fa03 f309 	lsl.w	r3, r3, r9
 80008aa:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008ac:	f004 0b03 	and.w	fp, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80008b0:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008b4:	fa0b fb09 	lsl.w	fp, fp, r9
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b8:	3f01      	subs	r7, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008ba:	ea4b 0a0a 	orr.w	sl, fp, sl
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008be:	2f01      	cmp	r7, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 80008c0:	f8c0 a000 	str.w	sl, [r0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c4:	f240 808b 	bls.w	80009de <HAL_GPIO_Init+0x15e>
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008c8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80008ca:	f8dc 2008 	ldr.w	r2, [ip, #8]

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80008ce:	403b      	ands	r3, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80008d0:	fa02 f209 	lsl.w	r2, r2, r9
 80008d4:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 80008d6:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008d8:	00e3      	lsls	r3, r4, #3
 80008da:	d54c      	bpl.n	8000976 <HAL_GPIO_Init+0xf6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008dc:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <HAL_GPIO_Init+0x198>)
 80008de:	4a4e      	ldr	r2, [pc, #312]	; (8000a18 <HAL_GPIO_Init+0x198>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	6613      	str	r3, [r2, #96]	; 0x60
 80008e8:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80008ea:	f025 0203 	bic.w	r2, r5, #3
 80008ee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80008fa:	9301      	str	r3, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008fc:	f005 0303 	and.w	r3, r5, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000900:	9f01      	ldr	r7, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8000902:	6897      	ldr	r7, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	f04f 090f 	mov.w	r9, #15
 800090a:	fa09 f903 	lsl.w	r9, r9, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800090e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000912:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000916:	d079      	beq.n	8000a0c <HAL_GPIO_Init+0x18c>
 8000918:	4f40      	ldr	r7, [pc, #256]	; (8000a1c <HAL_GPIO_Init+0x19c>)
 800091a:	42b8      	cmp	r0, r7
 800091c:	d078      	beq.n	8000a10 <HAL_GPIO_Init+0x190>
 800091e:	4f40      	ldr	r7, [pc, #256]	; (8000a20 <HAL_GPIO_Init+0x1a0>)
 8000920:	42b8      	cmp	r0, r7
 8000922:	bf0c      	ite	eq
 8000924:	2702      	moveq	r7, #2
 8000926:	2707      	movne	r7, #7
 8000928:	fa07 f303 	lsl.w	r3, r7, r3
 800092c:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 8000930:	6093      	str	r3, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000932:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8000936:	43f2      	mvns	r2, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000938:	03e7      	lsls	r7, r4, #15
        {
          temp |= iocurrent;
 800093a:	bf4c      	ite	mi
 800093c:	4333      	orrmi	r3, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
        temp &= ~((uint32_t)iocurrent);
 800093e:	4013      	andpl	r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8000940:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR1;
 8000944:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000948:	03a7      	lsls	r7, r4, #14
        {
          temp |= iocurrent;
 800094a:	bf4c      	ite	mi
 800094c:	4333      	orrmi	r3, r6
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;

        temp = EXTI->EMR1;
        temp &= ~((uint32_t)iocurrent);
 800094e:	4013      	andpl	r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8000950:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000954:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000958:	02e7      	lsls	r7, r4, #11
        {
          temp |= iocurrent;
 800095a:	bf4c      	ite	mi
 800095c:	4333      	orrmi	r3, r6
        }
        EXTI->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~((uint32_t)iocurrent);
 800095e:	4013      	andpl	r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8000960:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR1;
 8000964:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000968:	02a4      	lsls	r4, r4, #10
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
 800096a:	bf54      	ite	pl
 800096c:	ea02 0603 	andpl.w	r6, r2, r3
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000970:	431e      	orrmi	r6, r3
        }
        EXTI->FTSR1 = temp;
 8000972:	f8ce 600c 	str.w	r6, [lr, #12]
      }
    }
    
    position++;
 8000976:	3501      	adds	r5, #1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000978:	fa31 f305 	lsrs.w	r3, r1, r5
 800097c:	d043      	beq.n	8000a06 <HAL_GPIO_Init+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800097e:	fa08 f205 	lsl.w	r2, r8, r5

    if(iocurrent)
 8000982:	ea12 0601 	ands.w	r6, r2, r1
 8000986:	d0f6      	beq.n	8000976 <HAL_GPIO_Init+0xf6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000988:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800098c:	f024 0710 	bic.w	r7, r4, #16
 8000990:	2f02      	cmp	r7, #2
 8000992:	d183      	bne.n	800089c <HAL_GPIO_Init+0x1c>
 8000994:	ea4f 0ad5 	mov.w	sl, r5, lsr #3
 8000998:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800099c:	f005 0707 	and.w	r7, r5, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80009a0:	f8da 3020 	ldr.w	r3, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80009a4:	00bf      	lsls	r7, r7, #2
 80009a6:	f04f 090f 	mov.w	r9, #15
 80009aa:	fa09 fb07 	lsl.w	fp, r9, r7
 80009ae:	ea23 090b 	bic.w	r9, r3, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80009b2:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80009b6:	40bb      	lsls	r3, r7
 80009b8:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->AFR[position >> 3] = temp;
 80009bc:	f8ca 3020 	str.w	r3, [sl, #32]
 80009c0:	ea4f 0945 	mov.w	r9, r5, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80009c4:	2303      	movs	r3, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80009c8:	fa03 f309 	lsl.w	r3, r3, r9
 80009cc:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009ce:	f004 0a03 	and.w	sl, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80009d2:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80009d4:	fa0a fa09 	lsl.w	sl, sl, r9
 80009d8:	ea4a 0707 	orr.w	r7, sl, r7
      GPIOx->MODER = temp;
 80009dc:	6007      	str	r7, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009de:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80009e0:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2));
 80009e4:	f8dc 700c 	ldr.w	r7, [ip, #12]
 80009e8:	fa07 f709 	lsl.w	r7, r7, r9
 80009ec:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80009f0:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80009f4:	f3c4 1a00 	ubfx	sl, r4, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009f8:	ea27 0702 	bic.w	r7, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80009fc:	4652      	mov	r2, sl
 80009fe:	40aa      	lsls	r2, r5
 8000a00:	433a      	orrs	r2, r7
        GPIOx->OTYPER = temp;
 8000a02:	6042      	str	r2, [r0, #4]
 8000a04:	e760      	b.n	80008c8 <HAL_GPIO_Init+0x48>
      }
    }
    
    position++;
  }
}
 8000a06:	b003      	add	sp, #12
 8000a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e78d      	b.n	800092c <HAL_GPIO_Init+0xac>
 8000a10:	fa08 f303 	lsl.w	r3, r8, r3
 8000a14:	e78a      	b.n	800092c <HAL_GPIO_Init+0xac>
 8000a16:	4770      	bx	lr
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	48000400 	.word	0x48000400
 8000a20:	48000800 	.word	0x48000800
 8000a24:	40010400 	.word	0x40010400

08000a28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a28:	b90a      	cbnz	r2, 8000a2e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a2a:	6281      	str	r1, [r0, #40]	; 0x28
 8000a2c:	4770      	bx	lr
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a2e:	6181      	str	r1, [r0, #24]
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000a34:	6943      	ldr	r3, [r0, #20]
 8000a36:	4059      	eors	r1, r3
 8000a38:	6141      	str	r1, [r0, #20]
 8000a3a:	4770      	bx	lr

08000a3c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <HAL_PWREx_GetVoltageRange+0xc>)
 8000a3e:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8000a40:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40007000 	.word	0x40007000

08000a4c <HAL_PWREx_ControlVoltageScaling>:
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a4c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000a50:	d00e      	beq.n	8000a70 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000a52:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 8000a54:	6813      	ldr	r3, [r2, #0]
 8000a56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a5e:	d005      	beq.n	8000a6c <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a60:	6813      	ldr	r3, [r2, #0]
 8000a62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	4770      	bx	lr
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a70:	4911      	ldr	r1, [pc, #68]	; (8000ab8 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 8000a72:	680b      	ldr	r3, [r1, #0]
 8000a74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a7c:	d0f6      	beq.n	8000a6c <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a7e:	6808      	ldr	r0, [r1, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <HAL_PWREx_ControlVoltageScaling+0x74>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a84:	f420 60c0 	bic.w	r0, r0, #1536	; 0x600
 8000a88:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8000a8c:	6008      	str	r0, [r1, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	fba2 2303 	umull	r2, r3, r2, r3
 8000a94:	0c9a      	lsrs	r2, r3, #18
 8000a96:	2332      	movs	r3, #50	; 0x32
 8000a98:	fb03 f302 	mul.w	r3, r3, r2
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000a9c:	b913      	cbnz	r3, 8000aa4 <HAL_PWREx_ControlVoltageScaling+0x58>
 8000a9e:	e004      	b.n	8000aaa <HAL_PWREx_ControlVoltageScaling+0x5e>
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	d002      	beq.n	8000aaa <HAL_PWREx_ControlVoltageScaling+0x5e>
 8000aa4:	694a      	ldr	r2, [r1, #20]
 8000aa6:	0552      	lsls	r2, r2, #21
 8000aa8:	d4fa      	bmi.n	8000aa0 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000aaa:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_PWREx_ControlVoltageScaling+0x6c>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	055b      	lsls	r3, r3, #21
 8000ab0:	d5dc      	bpl.n	8000a6c <HAL_PWREx_ControlVoltageScaling+0x20>
      {
        return HAL_TIMEOUT;
 8000ab2:	2003      	movs	r0, #3
    }
  }
#endif  
  
  return HAL_OK;
}  
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40007000 	.word	0x40007000
 8000abc:	20000004 	.word	0x20000004
 8000ac0:	431bde83 	.word	0x431bde83

08000ac4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000ac4:	b530      	push	{r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000ac6:	4d20      	ldr	r5, [pc, #128]	; (8000b48 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8000ac8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000aca:	00db      	lsls	r3, r3, #3
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000acc:	b083      	sub	sp, #12
 8000ace:	4604      	mov	r4, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000ad0:	d51a      	bpl.n	8000b08 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000ad2:	f7ff ffb3 	bl	8000a3c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ad6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000ada:	d027      	beq.n	8000b2c <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8000adc:	2c80      	cmp	r4, #128	; 0x80
 8000ade:	d82c      	bhi.n	8000b3a <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8000ae0:	d02f      	beq.n	8000b42 <RCC_SetFlashLatencyFromMSIRange+0x7e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000ae2:	f1a4 0270 	sub.w	r2, r4, #112	; 0x70
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	0952      	lsrs	r2, r2, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000aec:	4917      	ldr	r1, [pc, #92]	; (8000b4c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8000aee:	680b      	ldr	r3, [r1, #0]
 8000af0:	f023 0307 	bic.w	r3, r3, #7
 8000af4:	4313      	orrs	r3, r2
 8000af6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8000af8:	6808      	ldr	r0, [r1, #0]
 8000afa:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000afe:	1a80      	subs	r0, r0, r2
 8000b00:	bf18      	it	ne
 8000b02:	2001      	movne	r0, #1
 8000b04:	b003      	add	sp, #12
 8000b06:	bd30      	pop	{r4, r5, pc}
  {
    vos = HAL_PWREx_GetVoltageRange();
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b08:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	65ab      	str	r3, [r5, #88]	; 0x58
 8000b10:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000b1a:	f7ff ff8f 	bl	8000a3c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000b1e:	6dab      	ldr	r3, [r5, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b20:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
 8000b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b28:	65ab      	str	r3, [r5, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b2a:	d1d7      	bne.n	8000adc <RCC_SetFlashLatencyFromMSIRange+0x18>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000b2c:	2c80      	cmp	r4, #128	; 0x80
 8000b2e:	d906      	bls.n	8000b3e <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000b30:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000b32:	bf8c      	ite	hi
 8000b34:	2202      	movhi	r2, #2
 8000b36:	2201      	movls	r2, #1
 8000b38:	e7d8      	b.n	8000aec <RCC_SetFlashLatencyFromMSIRange+0x28>
    }
#else
    if(msirange > RCC_MSIRANGE_8)
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	e7d6      	b.n	8000aec <RCC_SetFlashLatencyFromMSIRange+0x28>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000b3e:	2200      	movs	r2, #0
 8000b40:	e7d4      	b.n	8000aec <RCC_SetFlashLatencyFromMSIRange+0x28>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8000b42:	2202      	movs	r2, #2
 8000b44:	e7d2      	b.n	8000aec <RCC_SetFlashLatencyFromMSIRange+0x28>
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40022000 	.word	0x40022000

08000b50 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000b50:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <HAL_RCC_GetSysClockFreq+0xec>)
 8000b52:	689a      	ldr	r2, [r3, #8]
 8000b54:	f012 0f0c 	tst.w	r2, #12
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000b58:	b430      	push	{r4, r5}
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000b5a:	d039      	beq.n	8000bd0 <HAL_RCC_GetSysClockFreq+0x80>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000b5c:	689a      	ldr	r2, [r3, #8]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000b5e:	f002 020c 	and.w	r2, r2, #12
 8000b62:	2a0c      	cmp	r2, #12
 8000b64:	d02f      	beq.n	8000bc6 <HAL_RCC_GetSysClockFreq+0x76>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000b66:	4a35      	ldr	r2, [pc, #212]	; (8000c3c <HAL_RCC_GetSysClockFreq+0xec>)
 8000b68:	6893      	ldr	r3, [r2, #8]
 8000b6a:	f003 030c 	and.w	r3, r3, #12
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	d055      	beq.n	8000c1e <HAL_RCC_GetSysClockFreq+0xce>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000b72:	6893      	ldr	r3, [r2, #8]
 8000b74:	f003 030c 	and.w	r3, r3, #12
 8000b78:	2b08      	cmp	r3, #8
 8000b7a:	d05c      	beq.n	8000c36 <HAL_RCC_GetSysClockFreq+0xe6>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000b7c:	4c2f      	ldr	r4, [pc, #188]	; (8000c3c <HAL_RCC_GetSysClockFreq+0xec>)
 8000b7e:	68a1      	ldr	r1, [r4, #8]
 8000b80:	f001 010c 	and.w	r1, r1, #12
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;
 8000b84:	2000      	movs	r0, #0
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000b86:	290c      	cmp	r1, #12
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000b88:	4605      	mov	r5, r0
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000b8a:	d13d      	bne.n	8000c08 <HAL_RCC_GetSysClockFreq+0xb8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000b8c:	68e1      	ldr	r1, [r4, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000b8e:	68e2      	ldr	r2, [r4, #12]

    switch (pllsource)
 8000b90:	f001 0103 	and.w	r1, r1, #3

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000b94:	f3c2 1202 	ubfx	r2, r2, #4, #3

    switch (pllsource)
 8000b98:	2902      	cmp	r1, #2

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000b9a:	f102 0301 	add.w	r3, r2, #1

    switch (pllsource)
 8000b9e:	d041      	beq.n	8000c24 <HAL_RCC_GetSysClockFreq+0xd4>
 8000ba0:	2903      	cmp	r1, #3
 8000ba2:	d033      	beq.n	8000c0c <HAL_RCC_GetSysClockFreq+0xbc>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ba4:	fbb5 f3f3 	udiv	r3, r5, r3
 8000ba8:	68e2      	ldr	r2, [r4, #12]
 8000baa:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8000bae:	fb03 f302 	mul.w	r3, r3, r2
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000bb2:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <HAL_RCC_GetSysClockFreq+0xec>)
 8000bb4:	68d0      	ldr	r0, [r2, #12]
    sysclockfreq = pllvco/pllr;
 8000bb6:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8000bba:	3001      	adds	r0, #1
 8000bbc:	0040      	lsls	r0, r0, #1
  }

  return sysclockfreq;
}
 8000bbe:	bc30      	pop	{r4, r5}
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
 8000bc0:	fbb3 f0f0 	udiv	r0, r3, r0
  }

  return sysclockfreq;
}
 8000bc4:	4770      	bx	lr
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d1ca      	bne.n	8000b66 <HAL_RCC_GetSysClockFreq+0x16>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <HAL_RCC_GetSysClockFreq+0xec>)
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000bd2:	491b      	ldr	r1, [pc, #108]	; (8000c40 <HAL_RCC_GetSysClockFreq+0xf0>)
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	0712      	lsls	r2, r2, #28
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000bd8:	bf54      	ite	pl
 8000bda:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000bde:	681b      	ldrmi	r3, [r3, #0]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8000be0:	4a16      	ldr	r2, [pc, #88]	; (8000c3c <HAL_RCC_GetSysClockFreq+0xec>)
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000be2:	bf54      	ite	pl
 8000be4:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000be8:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8000bec:	6892      	ldr	r2, [r2, #8]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000bee:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8000bf2:	f012 0f0c 	tst.w	r2, #12
 8000bf6:	bf0c      	ite	eq
 8000bf8:	4628      	moveq	r0, r5
 8000bfa:	2000      	movne	r0, #0
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000bfc:	4c0f      	ldr	r4, [pc, #60]	; (8000c3c <HAL_RCC_GetSysClockFreq+0xec>)
 8000bfe:	68a1      	ldr	r1, [r4, #8]
 8000c00:	f001 010c 	and.w	r1, r1, #12
 8000c04:	290c      	cmp	r1, #12
 8000c06:	d0c1      	beq.n	8000b8c <HAL_RCC_GetSysClockFreq+0x3c>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }

  return sysclockfreq;
}
 8000c08:	bc30      	pop	{r4, r5}
 8000c0a:	4770      	bx	lr
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000c0c:	68e0      	ldr	r0, [r4, #12]
 8000c0e:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <HAL_RCC_GetSysClockFreq+0xf4>)
 8000c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c14:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8000c18:	fb02 f300 	mul.w	r3, r2, r0
      break;
 8000c1c:	e7c9      	b.n	8000bb2 <HAL_RCC_GetSysClockFreq+0x62>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000c1e:	480a      	ldr	r0, [pc, #40]	; (8000c48 <HAL_RCC_GetSysClockFreq+0xf8>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000c20:	2500      	movs	r5, #0
 8000c22:	e7eb      	b.n	8000bfc <HAL_RCC_GetSysClockFreq+0xac>
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;

    switch (pllsource)
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000c24:	68e0      	ldr	r0, [r4, #12]
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000c28:	fbb1 f2f3 	udiv	r2, r1, r3
 8000c2c:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8000c30:	fb02 f300 	mul.w	r3, r2, r0
      break;
 8000c34:	e7bd      	b.n	8000bb2 <HAL_RCC_GetSysClockFreq+0x62>
    sysclockfreq = HSI_VALUE;
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000c36:	4803      	ldr	r0, [pc, #12]	; (8000c44 <HAL_RCC_GetSysClockFreq+0xf4>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000c38:	2500      	movs	r5, #0
 8000c3a:	e7df      	b.n	8000bfc <HAL_RCC_GetSysClockFreq+0xac>
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	080044bc 	.word	0x080044bc
 8000c44:	007a1200 	.word	0x007a1200
 8000c48:	00f42400 	.word	0x00f42400

08000c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c50:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c52:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c54:	06d8      	lsls	r0, r3, #27
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c56:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c58:	d557      	bpl.n	8000d0a <HAL_RCC_OscConfig+0xbe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000c5a:	4bb4      	ldr	r3, [pc, #720]	; (8000f2c <HAL_RCC_OscConfig+0x2e0>)
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	f012 0f0c 	tst.w	r2, #12
 8000c62:	f040 8157 	bne.w	8000f14 <HAL_RCC_OscConfig+0x2c8>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	0799      	lsls	r1, r3, #30
 8000c6a:	d503      	bpl.n	8000c74 <HAL_RCC_OscConfig+0x28>
 8000c6c:	69ab      	ldr	r3, [r5, #24]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 81c9 	beq.w	8001006 <HAL_RCC_OscConfig+0x3ba>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c74:	4bad      	ldr	r3, [pc, #692]	; (8000f2c <HAL_RCC_OscConfig+0x2e0>)
 8000c76:	6a28      	ldr	r0, [r5, #32]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	0712      	lsls	r2, r2, #28
 8000c7c:	bf56      	itet	pl
 8000c7e:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8000c82:	681b      	ldrmi	r3, [r3, #0]
 8000c84:	091b      	lsrpl	r3, r3, #4
 8000c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c8a:	4283      	cmp	r3, r0
 8000c8c:	d217      	bcs.n	8000cbe <HAL_RCC_OscConfig+0x72>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c8e:	f7ff ff19 	bl	8000ac4 <RCC_SetFlashLatencyFromMSIRange>
 8000c92:	2800      	cmp	r0, #0
 8000c94:	f040 81b7 	bne.w	8001006 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_ERROR;
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c98:	4ba4      	ldr	r3, [pc, #656]	; (8000f2c <HAL_RCC_OscConfig+0x2e0>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	f042 0208 	orr.w	r2, r2, #8
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	6819      	ldr	r1, [r3, #0]
 8000ca4:	6a2a      	ldr	r2, [r5, #32]
 8000ca6:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8000caa:	430a      	orrs	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	69e9      	ldr	r1, [r5, #28]
 8000cb2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000cb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	e015      	b.n	8000cea <HAL_RCC_OscConfig+0x9e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cbe:	4b9b      	ldr	r3, [pc, #620]	; (8000f2c <HAL_RCC_OscConfig+0x2e0>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	f042 0208 	orr.w	r2, r2, #8
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cce:	4302      	orrs	r2, r0
 8000cd0:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	69e9      	ldr	r1, [r5, #28]
 8000cd6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000cda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000cde:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ce0:	f7ff fef0 	bl	8000ac4 <RCC_SetFlashLatencyFromMSIRange>
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	f040 818e 	bne.w	8001006 <HAL_RCC_OscConfig+0x3ba>
            return HAL_ERROR;
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000cea:	f7ff ff31 	bl	8000b50 <HAL_RCC_GetSysClockFreq>
 8000cee:	4b8f      	ldr	r3, [pc, #572]	; (8000f2c <HAL_RCC_OscConfig+0x2e0>)
 8000cf0:	498f      	ldr	r1, [pc, #572]	; (8000f30 <HAL_RCC_OscConfig+0x2e4>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	4a8f      	ldr	r2, [pc, #572]	; (8000f34 <HAL_RCC_OscConfig+0x2e8>)
 8000cf6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cfa:	5ccb      	ldrb	r3, [r1, r3]
 8000cfc:	fa20 f303 	lsr.w	r3, r0, r3

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8000d00:	200f      	movs	r0, #15
            return HAL_ERROR;
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000d02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8000d04:	f7ff fbf0 	bl	80004e8 <HAL_InitTick>
 8000d08:	682b      	ldr	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d0a:	07d9      	lsls	r1, r3, #31
 8000d0c:	d52f      	bpl.n	8000d6e <HAL_RCC_OscConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000d0e:	4987      	ldr	r1, [pc, #540]	; (8000f2c <HAL_RCC_OscConfig+0x2e0>)
 8000d10:	688a      	ldr	r2, [r1, #8]
 8000d12:	f002 020c 	and.w	r2, r2, #12
 8000d16:	2a08      	cmp	r2, #8
 8000d18:	f000 816c 	beq.w	8000ff4 <HAL_RCC_OscConfig+0x3a8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d1c:	688a      	ldr	r2, [r1, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000d1e:	f002 020c 	and.w	r2, r2, #12
 8000d22:	2a0c      	cmp	r2, #12
 8000d24:	f000 8160 	beq.w	8000fe8 <HAL_RCC_OscConfig+0x39c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d28:	686b      	ldr	r3, [r5, #4]
 8000d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d2e:	f000 816e 	beq.w	800100e <HAL_RCC_OscConfig+0x3c2>
 8000d32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d36:	f000 81dc 	beq.w	80010f2 <HAL_RCC_OscConfig+0x4a6>
 8000d3a:	4c7c      	ldr	r4, [pc, #496]	; (8000f2c <HAL_RCC_OscConfig+0x2e0>)
 8000d3c:	6822      	ldr	r2, [r4, #0]
 8000d3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d42:	6022      	str	r2, [r4, #0]
 8000d44:	6822      	ldr	r2, [r4, #0]
 8000d46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d4a:	6022      	str	r2, [r4, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f040 8163 	bne.w	8001018 <HAL_RCC_OscConfig+0x3cc>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d52:	f7ff fbf3 	bl	800053c <HAL_GetTick>
 8000d56:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000d58:	e005      	b.n	8000d66 <HAL_RCC_OscConfig+0x11a>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d5a:	f7ff fbef 	bl	800053c <HAL_GetTick>
 8000d5e:	1b80      	subs	r0, r0, r6
 8000d60:	2864      	cmp	r0, #100	; 0x64
 8000d62:	f200 818d 	bhi.w	8001080 <HAL_RCC_OscConfig+0x434>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	039f      	lsls	r7, r3, #14
 8000d6a:	d4f6      	bmi.n	8000d5a <HAL_RCC_OscConfig+0x10e>
 8000d6c:	682b      	ldr	r3, [r5, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d6e:	079e      	lsls	r6, r3, #30
 8000d70:	d52b      	bpl.n	8000dca <HAL_RCC_OscConfig+0x17e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000d72:	496e      	ldr	r1, [pc, #440]	; (8000f2c <HAL_RCC_OscConfig+0x2e0>)
 8000d74:	688a      	ldr	r2, [r1, #8]
 8000d76:	f002 020c 	and.w	r2, r2, #12
 8000d7a:	2a04      	cmp	r2, #4
 8000d7c:	f000 8160 	beq.w	8001040 <HAL_RCC_OscConfig+0x3f4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d80:	688a      	ldr	r2, [r1, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000d82:	f002 020c 	and.w	r2, r2, #12
 8000d86:	2a0c      	cmp	r2, #12
 8000d88:	f000 8154 	beq.w	8001034 <HAL_RCC_OscConfig+0x3e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d8c:	68eb      	ldr	r3, [r5, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d8e:	4c67      	ldr	r4, [pc, #412]	; (8000f2c <HAL_RCC_OscConfig+0x2e0>)
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f000 8117 	beq.w	8000fc4 <HAL_RCC_OscConfig+0x378>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d96:	6823      	ldr	r3, [r4, #0]
 8000d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9c:	6023      	str	r3, [r4, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d9e:	f7ff fbcd 	bl	800053c <HAL_GetTick>
 8000da2:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000da4:	e005      	b.n	8000db2 <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da6:	f7ff fbc9 	bl	800053c <HAL_GetTick>
 8000daa:	1b80      	subs	r0, r0, r6
 8000dac:	2802      	cmp	r0, #2
 8000dae:	f200 8167 	bhi.w	8001080 <HAL_RCC_OscConfig+0x434>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000db2:	6823      	ldr	r3, [r4, #0]
 8000db4:	4a5d      	ldr	r2, [pc, #372]	; (8000f2c <HAL_RCC_OscConfig+0x2e0>)
 8000db6:	0558      	lsls	r0, r3, #21
 8000db8:	d5f5      	bpl.n	8000da6 <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dba:	6853      	ldr	r3, [r2, #4]
 8000dbc:	6929      	ldr	r1, [r5, #16]
 8000dbe:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000dc2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000dc6:	6053      	str	r3, [r2, #4]
 8000dc8:	682b      	ldr	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dca:	071a      	lsls	r2, r3, #28
 8000dcc:	d519      	bpl.n	8000e02 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dce:	696b      	ldr	r3, [r5, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dd0:	4c56      	ldr	r4, [pc, #344]	; (8000f2c <HAL_RCC_OscConfig+0x2e0>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 80e2 	beq.w	8000f9c <HAL_RCC_OscConfig+0x350>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dd8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000de4:	f7ff fbaa 	bl	800053c <HAL_GetTick>
 8000de8:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000dea:	e005      	b.n	8000df8 <HAL_RCC_OscConfig+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dec:	f7ff fba6 	bl	800053c <HAL_GetTick>
 8000df0:	1b80      	subs	r0, r0, r6
 8000df2:	2802      	cmp	r0, #2
 8000df4:	f200 8144 	bhi.w	8001080 <HAL_RCC_OscConfig+0x434>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000df8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000dfc:	079b      	lsls	r3, r3, #30
 8000dfe:	d5f5      	bpl.n	8000dec <HAL_RCC_OscConfig+0x1a0>
 8000e00:	682b      	ldr	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e02:	0758      	lsls	r0, r3, #29
 8000e04:	d53f      	bpl.n	8000e86 <HAL_RCC_OscConfig+0x23a>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000e06:	4b49      	ldr	r3, [pc, #292]	; (8000f2c <HAL_RCC_OscConfig+0x2e0>)
 8000e08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e0a:	00d1      	lsls	r1, r2, #3
 8000e0c:	f100 813c 	bmi.w	8001088 <HAL_RCC_OscConfig+0x43c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e16:	659a      	str	r2, [r3, #88]	; 0x58
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e22:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e24:	4c44      	ldr	r4, [pc, #272]	; (8000f38 <HAL_RCC_OscConfig+0x2ec>)
 8000e26:	6823      	ldr	r3, [r4, #0]
 8000e28:	05da      	lsls	r2, r3, #23
 8000e2a:	f140 8119 	bpl.w	8001060 <HAL_RCC_OscConfig+0x414>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e2e:	68ab      	ldr	r3, [r5, #8]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	f000 8170 	beq.w	8001116 <HAL_RCC_OscConfig+0x4ca>
 8000e36:	2b05      	cmp	r3, #5
 8000e38:	f000 8128 	beq.w	800108c <HAL_RCC_OscConfig+0x440>
 8000e3c:	4c3b      	ldr	r4, [pc, #236]	; (8000f2c <HAL_RCC_OscConfig+0x2e0>)
 8000e3e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000e42:	f022 0201 	bic.w	r2, r2, #1
 8000e46:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000e4a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000e4e:	f022 0204 	bic.w	r2, r2, #4
 8000e52:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f040 8125 	bne.w	80010a6 <HAL_RCC_OscConfig+0x45a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e5c:	f7ff fb6e 	bl	800053c <HAL_GetTick>

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e60:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e64:	4680      	mov	r8, r0

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8000e66:	e006      	b.n	8000e76 <HAL_RCC_OscConfig+0x22a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e68:	f7ff fb68 	bl	800053c <HAL_GetTick>
 8000e6c:	ebc8 0000 	rsb	r0, r8, r0
 8000e70:	42b8      	cmp	r0, r7
 8000e72:	f200 8105 	bhi.w	8001080 <HAL_RCC_OscConfig+0x434>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8000e76:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000e7a:	0799      	lsls	r1, r3, #30
 8000e7c:	d4f4      	bmi.n	8000e68 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	f040 8151 	bne.w	8001126 <HAL_RCC_OscConfig+0x4da>
 8000e84:	682b      	ldr	r3, [r5, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e86:	069a      	lsls	r2, r3, #26
 8000e88:	d518      	bpl.n	8000ebc <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000e8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000e8c:	4c27      	ldr	r4, [pc, #156]	; (8000f2c <HAL_RCC_OscConfig+0x2e0>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 811b 	beq.w	80010ca <HAL_RCC_OscConfig+0x47e>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000e94:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ea0:	f7ff fb4c 	bl	800053c <HAL_GetTick>
 8000ea4:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8000ea6:	e005      	b.n	8000eb4 <HAL_RCC_OscConfig+0x268>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000ea8:	f7ff fb48 	bl	800053c <HAL_GetTick>
 8000eac:	1b80      	subs	r0, r0, r6
 8000eae:	2802      	cmp	r0, #2
 8000eb0:	f200 80e6 	bhi.w	8001080 <HAL_RCC_OscConfig+0x434>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8000eb4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8000eb8:	079b      	lsls	r3, r3, #30
 8000eba:	d5f5      	bpl.n	8000ea8 <HAL_RCC_OscConfig+0x25c>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000ebc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000ebe:	b32a      	cbz	r2, 8000f0c <HAL_RCC_OscConfig+0x2c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <HAL_RCC_OscConfig+0x2e0>)
 8000ec2:	6899      	ldr	r1, [r3, #8]
 8000ec4:	f001 010c 	and.w	r1, r1, #12
 8000ec8:	290c      	cmp	r1, #12
 8000eca:	f000 809c 	beq.w	8001006 <HAL_RCC_OscConfig+0x3ba>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000ece:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8000ed6:	601a      	str	r2, [r3, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000ed8:	f000 812b 	beq.w	8001132 <HAL_RCC_OscConfig+0x4e6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	f140 8114 	bpl.w	800110c <HAL_RCC_OscConfig+0x4c0>
        }

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8000ee4:	4c11      	ldr	r4, [pc, #68]	; (8000f2c <HAL_RCC_OscConfig+0x2e0>)
 8000ee6:	68e3      	ldr	r3, [r4, #12]
 8000ee8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef0:	60e3      	str	r3, [r4, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef2:	f7ff fb23 	bl	800053c <HAL_GetTick>
 8000ef6:	4605      	mov	r5, r0

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000ef8:	e005      	b.n	8000f06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000efa:	f7ff fb1f 	bl	800053c <HAL_GetTick>
 8000efe:	1b40      	subs	r0, r0, r5
 8000f00:	2802      	cmp	r0, #2
 8000f02:	f200 80bd 	bhi.w	8001080 <HAL_RCC_OscConfig+0x434>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	019b      	lsls	r3, r3, #6
 8000f0a:	d4f6      	bmi.n	8000efa <HAL_RCC_OscConfig+0x2ae>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000f0c:	2000      	movs	r0, #0
}
 8000f0e:	b002      	add	sp, #8
 8000f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f14:	69aa      	ldr	r2, [r5, #24]
 8000f16:	b372      	cbz	r2, 8000f76 <HAL_RCC_OscConfig+0x32a>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	f042 0201 	orr.w	r2, r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000f20:	461c      	mov	r4, r3
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f22:	f7ff fb0b 	bl	800053c <HAL_GetTick>
 8000f26:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000f28:	e00e      	b.n	8000f48 <HAL_RCC_OscConfig+0x2fc>
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	080044a4 	.word	0x080044a4
 8000f34:	20000004 	.word	0x20000004
 8000f38:	40007000 	.word	0x40007000
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fafe 	bl	800053c <HAL_GetTick>
 8000f40:	1b80      	subs	r0, r0, r6
 8000f42:	2802      	cmp	r0, #2
 8000f44:	f200 809c 	bhi.w	8001080 <HAL_RCC_OscConfig+0x434>

        /* Get timeout */
        tickstart = HAL_GetTick();

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	4a97      	ldr	r2, [pc, #604]	; (80011a8 <HAL_RCC_OscConfig+0x55c>)
 8000f4c:	079f      	lsls	r7, r3, #30
 8000f4e:	d5f5      	bpl.n	8000f3c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f50:	6813      	ldr	r3, [r2, #0]
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	6811      	ldr	r1, [r2, #0]
 8000f5a:	6a2b      	ldr	r3, [r5, #32]
 8000f5c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 8000f60:	430b      	orrs	r3, r1
 8000f62:	6013      	str	r3, [r2, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f64:	6853      	ldr	r3, [r2, #4]
 8000f66:	69e9      	ldr	r1, [r5, #28]
 8000f68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000f70:	6053      	str	r3, [r2, #4]
 8000f72:	682b      	ldr	r3, [r5, #0]
 8000f74:	e6c9      	b.n	8000d0a <HAL_RCC_OscConfig+0xbe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	f022 0201 	bic.w	r2, r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000f7e:	461c      	mov	r4, r3
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fadc 	bl	800053c <HAL_GetTick>
 8000f84:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000f86:	e004      	b.n	8000f92 <HAL_RCC_OscConfig+0x346>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f88:	f7ff fad8 	bl	800053c <HAL_GetTick>
 8000f8c:	1b80      	subs	r0, r0, r6
 8000f8e:	2802      	cmp	r0, #2
 8000f90:	d876      	bhi.n	8001080 <HAL_RCC_OscConfig+0x434>

        /* Get timeout */
        tickstart = HAL_GetTick();

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	0798      	lsls	r0, r3, #30
 8000f96:	d4f7      	bmi.n	8000f88 <HAL_RCC_OscConfig+0x33c>
 8000f98:	682b      	ldr	r3, [r5, #0]
 8000f9a:	e6b6      	b.n	8000d0a <HAL_RCC_OscConfig+0xbe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000fa0:	f023 0301 	bic.w	r3, r3, #1
 8000fa4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fa8:	f7ff fac8 	bl	800053c <HAL_GetTick>
 8000fac:	4606      	mov	r6, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000fae:	e004      	b.n	8000fba <HAL_RCC_OscConfig+0x36e>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fac4 	bl	800053c <HAL_GetTick>
 8000fb4:	1b80      	subs	r0, r0, r6
 8000fb6:	2802      	cmp	r0, #2
 8000fb8:	d862      	bhi.n	8001080 <HAL_RCC_OscConfig+0x434>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000fba:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000fbe:	079f      	lsls	r7, r3, #30
 8000fc0:	d4f6      	bmi.n	8000fb0 <HAL_RCC_OscConfig+0x364>
 8000fc2:	e71d      	b.n	8000e00 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc4:	6823      	ldr	r3, [r4, #0]
 8000fc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fca:	6023      	str	r3, [r4, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fab6 	bl	800053c <HAL_GetTick>
 8000fd0:	4606      	mov	r6, r0

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000fd2:	e004      	b.n	8000fde <HAL_RCC_OscConfig+0x392>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fab2 	bl	800053c <HAL_GetTick>
 8000fd8:	1b80      	subs	r0, r0, r6
 8000fda:	2802      	cmp	r0, #2
 8000fdc:	d850      	bhi.n	8001080 <HAL_RCC_OscConfig+0x434>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000fde:	6823      	ldr	r3, [r4, #0]
 8000fe0:	0559      	lsls	r1, r3, #21
 8000fe2:	d4f7      	bmi.n	8000fd4 <HAL_RCC_OscConfig+0x388>
 8000fe4:	682b      	ldr	r3, [r5, #0]
 8000fe6:	e6f0      	b.n	8000dca <HAL_RCC_OscConfig+0x17e>
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe8:	68ca      	ldr	r2, [r1, #12]
 8000fea:	f002 0203 	and.w	r2, r2, #3
 8000fee:	2a03      	cmp	r2, #3
 8000ff0:	f47f ae9a 	bne.w	8000d28 <HAL_RCC_OscConfig+0xdc>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff4:	4a6c      	ldr	r2, [pc, #432]	; (80011a8 <HAL_RCC_OscConfig+0x55c>)
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	0392      	lsls	r2, r2, #14
 8000ffa:	f57f aeb8 	bpl.w	8000d6e <HAL_RCC_OscConfig+0x122>
 8000ffe:	686a      	ldr	r2, [r5, #4]
 8001000:	2a00      	cmp	r2, #0
 8001002:	f47f aeb4 	bne.w	8000d6e <HAL_RCC_OscConfig+0x122>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001006:	2001      	movs	r0, #1
    }
  }
  return HAL_OK;
}
 8001008:	b002      	add	sp, #8
 800100a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800100e:	4a66      	ldr	r2, [pc, #408]	; (80011a8 <HAL_RCC_OscConfig+0x55c>)
 8001010:	6813      	ldr	r3, [r2, #0]
 8001012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001018:	f7ff fa90 	bl	800053c <HAL_GetTick>

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800101c:	4c62      	ldr	r4, [pc, #392]	; (80011a8 <HAL_RCC_OscConfig+0x55c>)

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101e:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001020:	e004      	b.n	800102c <HAL_RCC_OscConfig+0x3e0>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001022:	f7ff fa8b 	bl	800053c <HAL_GetTick>
 8001026:	1b80      	subs	r0, r0, r6
 8001028:	2864      	cmp	r0, #100	; 0x64
 800102a:	d829      	bhi.n	8001080 <HAL_RCC_OscConfig+0x434>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	039b      	lsls	r3, r3, #14
 8001030:	d5f7      	bpl.n	8001022 <HAL_RCC_OscConfig+0x3d6>
 8001032:	e69b      	b.n	8000d6c <HAL_RCC_OscConfig+0x120>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001034:	68ca      	ldr	r2, [r1, #12]
 8001036:	f002 0203 	and.w	r2, r2, #3
 800103a:	2a02      	cmp	r2, #2
 800103c:	f47f aea6 	bne.w	8000d8c <HAL_RCC_OscConfig+0x140>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001040:	4a59      	ldr	r2, [pc, #356]	; (80011a8 <HAL_RCC_OscConfig+0x55c>)
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	0554      	lsls	r4, r2, #21
 8001046:	d502      	bpl.n	800104e <HAL_RCC_OscConfig+0x402>
 8001048:	68ea      	ldr	r2, [r5, #12]
 800104a:	2a00      	cmp	r2, #0
 800104c:	d0db      	beq.n	8001006 <HAL_RCC_OscConfig+0x3ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104e:	4956      	ldr	r1, [pc, #344]	; (80011a8 <HAL_RCC_OscConfig+0x55c>)
 8001050:	6928      	ldr	r0, [r5, #16]
 8001052:	684a      	ldr	r2, [r1, #4]
 8001054:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 8001058:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800105c:	604a      	str	r2, [r1, #4]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800105e:	e6b4      	b.n	8000dca <HAL_RCC_OscConfig+0x17e>
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001066:	6023      	str	r3, [r4, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001068:	f7ff fa68 	bl	800053c <HAL_GetTick>
 800106c:	4607      	mov	r7, r0

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800106e:	6823      	ldr	r3, [r4, #0]
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	f53f aedc 	bmi.w	8000e2e <HAL_RCC_OscConfig+0x1e2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001076:	f7ff fa61 	bl	800053c <HAL_GetTick>
 800107a:	1bc0      	subs	r0, r0, r7
 800107c:	2802      	cmp	r0, #2
 800107e:	d9f6      	bls.n	800106e <HAL_RCC_OscConfig+0x422>
        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8001080:	2003      	movs	r0, #3
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001082:	b002      	add	sp, #8
 8001084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8001088:	2600      	movs	r6, #0
 800108a:	e6cb      	b.n	8000e24 <HAL_RCC_OscConfig+0x1d8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800108c:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <HAL_RCC_OscConfig+0x55c>)
 800108e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001092:	f042 0204 	orr.w	r2, r2, #4
 8001096:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800109a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800109e:	f042 0201 	orr.w	r2, r2, #1
 80010a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a6:	f7ff fa49 	bl	800053c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80010aa:	4c3f      	ldr	r4, [pc, #252]	; (80011a8 <HAL_RCC_OscConfig+0x55c>)

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ac:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ae:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80010b2:	e005      	b.n	80010c0 <HAL_RCC_OscConfig+0x474>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010b4:	f7ff fa42 	bl	800053c <HAL_GetTick>
 80010b8:	ebc8 0000 	rsb	r0, r8, r0
 80010bc:	42b8      	cmp	r0, r7
 80010be:	d8df      	bhi.n	8001080 <HAL_RCC_OscConfig+0x434>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80010c0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80010c4:	0798      	lsls	r0, r3, #30
 80010c6:	d5f5      	bpl.n	80010b4 <HAL_RCC_OscConfig+0x468>
 80010c8:	e6d9      	b.n	8000e7e <HAL_RCC_OscConfig+0x232>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80010ca:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80010ce:	f023 0301 	bic.w	r3, r3, #1
 80010d2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d6:	f7ff fa31 	bl	800053c <HAL_GetTick>
 80010da:	4606      	mov	r6, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 80010dc:	e004      	b.n	80010e8 <HAL_RCC_OscConfig+0x49c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010de:	f7ff fa2d 	bl	800053c <HAL_GetTick>
 80010e2:	1b80      	subs	r0, r0, r6
 80010e4:	2802      	cmp	r0, #2
 80010e6:	d8cb      	bhi.n	8001080 <HAL_RCC_OscConfig+0x434>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 80010e8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80010ec:	079f      	lsls	r7, r3, #30
 80010ee:	d4f6      	bmi.n	80010de <HAL_RCC_OscConfig+0x492>
 80010f0:	e6e4      	b.n	8000ebc <HAL_RCC_OscConfig+0x270>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010f6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e785      	b.n	8001018 <HAL_RCC_OscConfig+0x3cc>
           &&
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800110c:	68da      	ldr	r2, [r3, #12]
 800110e:	f022 0203 	bic.w	r2, r2, #3
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	e6e6      	b.n	8000ee4 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001116:	4a24      	ldr	r2, [pc, #144]	; (80011a8 <HAL_RCC_OscConfig+0x55c>)
 8001118:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001124:	e7bf      	b.n	80010a6 <HAL_RCC_OscConfig+0x45a>
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001126:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <HAL_RCC_OscConfig+0x55c>)
 8001128:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800112a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800112e:	6593      	str	r3, [r2, #88]	; 0x58
 8001130:	e6a8      	b.n	8000e84 <HAL_RCC_OscConfig+0x238>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001132:	461c      	mov	r4, r3

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001134:	f7ff fa02 	bl	800053c <HAL_GetTick>
 8001138:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800113a:	e004      	b.n	8001146 <HAL_RCC_OscConfig+0x4fa>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113c:	f7ff f9fe 	bl	800053c <HAL_GetTick>
 8001140:	1b80      	subs	r0, r0, r6
 8001142:	2802      	cmp	r0, #2
 8001144:	d89c      	bhi.n	8001080 <HAL_RCC_OscConfig+0x434>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <HAL_RCC_OscConfig+0x55c>)
 800114a:	0198      	lsls	r0, r3, #6
 800114c:	d4f6      	bmi.n	800113c <HAL_RCC_OscConfig+0x4f0>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800114e:	f105 032c 	add.w	r3, r5, #44	; 0x2c
 8001152:	cbc8      	ldmia	r3, {r3, r6, r7}
 8001154:	6bac      	ldr	r4, [r5, #56]	; 0x38
 8001156:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8001158:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800115a:	06e4      	lsls	r4, r4, #27
 800115c:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
 8001160:	4323      	orrs	r3, r4
 8001162:	0840      	lsrs	r0, r0, #1
 8001164:	1e74      	subs	r4, r6, #1
 8001166:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800116a:	3801      	subs	r0, #1
 800116c:	0849      	lsrs	r1, r1, #1
 800116e:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8001172:	3901      	subs	r1, #1
 8001174:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001178:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800117a:	6813      	ldr	r3, [r2, #0]
 800117c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001180:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001182:	68d3      	ldr	r3, [r2, #12]
 8001184:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001188:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800118a:	4614      	mov	r4, r2

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118c:	f7ff f9d6 	bl	800053c <HAL_GetTick>
 8001190:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001192:	e005      	b.n	80011a0 <HAL_RCC_OscConfig+0x554>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001194:	f7ff f9d2 	bl	800053c <HAL_GetTick>
 8001198:	1b40      	subs	r0, r0, r5
 800119a:	2802      	cmp	r0, #2
 800119c:	f63f af70 	bhi.w	8001080 <HAL_RCC_OscConfig+0x434>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	0199      	lsls	r1, r3, #6
 80011a4:	d5f6      	bpl.n	8001194 <HAL_RCC_OscConfig+0x548>
 80011a6:	e6b1      	b.n	8000f0c <HAL_RCC_OscConfig+0x2c0>
 80011a8:	40021000 	.word	0x40021000

080011ac <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 80011ac:	4a56      	ldr	r2, [pc, #344]	; (8001308 <HAL_RCC_ClockConfig+0x15c>)
 80011ae:	6813      	ldr	r3, [r2, #0]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 80011ba:	d20c      	bcs.n	80011d6 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011bc:	6813      	ldr	r3, [r2, #0]
 80011be:	f023 0307 	bic.w	r3, r3, #7
 80011c2:	430b      	orrs	r3, r1
 80011c4:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 80011c6:	6813      	ldr	r3, [r2, #0]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	4299      	cmp	r1, r3
 80011ce:	d002      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 80011d0:	2001      	movs	r0, #1
 80011d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011d6:	6803      	ldr	r3, [r0, #0]
 80011d8:	460c      	mov	r4, r1
 80011da:	07d9      	lsls	r1, r3, #31
 80011dc:	4605      	mov	r5, r0
 80011de:	d43d      	bmi.n	800125c <HAL_RCC_ClockConfig+0xb0>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011e0:	0799      	lsls	r1, r3, #30
 80011e2:	d506      	bpl.n	80011f2 <HAL_RCC_ClockConfig+0x46>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e4:	4849      	ldr	r0, [pc, #292]	; (800130c <HAL_RCC_ClockConfig+0x160>)
 80011e6:	68aa      	ldr	r2, [r5, #8]
 80011e8:	6881      	ldr	r1, [r0, #8]
 80011ea:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80011ee:	430a      	orrs	r2, r1
 80011f0:	6082      	str	r2, [r0, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 80011f2:	4945      	ldr	r1, [pc, #276]	; (8001308 <HAL_RCC_ClockConfig+0x15c>)
 80011f4:	680a      	ldr	r2, [r1, #0]
 80011f6:	f002 0207 	and.w	r2, r2, #7
 80011fa:	4294      	cmp	r4, r2
 80011fc:	d209      	bcs.n	8001212 <HAL_RCC_ClockConfig+0x66>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fe:	680a      	ldr	r2, [r1, #0]
 8001200:	f022 0207 	bic.w	r2, r2, #7
 8001204:	4322      	orrs	r2, r4
 8001206:	600a      	str	r2, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001208:	680a      	ldr	r2, [r1, #0]
 800120a:	f002 0207 	and.w	r2, r2, #7
 800120e:	4294      	cmp	r4, r2
 8001210:	d1de      	bne.n	80011d0 <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001212:	075a      	lsls	r2, r3, #29
 8001214:	d506      	bpl.n	8001224 <HAL_RCC_ClockConfig+0x78>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001216:	483d      	ldr	r0, [pc, #244]	; (800130c <HAL_RCC_ClockConfig+0x160>)
 8001218:	68ea      	ldr	r2, [r5, #12]
 800121a:	6881      	ldr	r1, [r0, #8]
 800121c:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8001220:	430a      	orrs	r2, r1
 8001222:	6082      	str	r2, [r0, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001224:	071b      	lsls	r3, r3, #28
 8001226:	d507      	bpl.n	8001238 <HAL_RCC_ClockConfig+0x8c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001228:	4a38      	ldr	r2, [pc, #224]	; (800130c <HAL_RCC_ClockConfig+0x160>)
 800122a:	6929      	ldr	r1, [r5, #16]
 800122c:	6893      	ldr	r3, [r2, #8]
 800122e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001232:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001236:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001238:	f7ff fc8a 	bl	8000b50 <HAL_RCC_GetSysClockFreq>
 800123c:	4b33      	ldr	r3, [pc, #204]	; (800130c <HAL_RCC_ClockConfig+0x160>)
 800123e:	4934      	ldr	r1, [pc, #208]	; (8001310 <HAL_RCC_ClockConfig+0x164>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	4a34      	ldr	r2, [pc, #208]	; (8001314 <HAL_RCC_ClockConfig+0x168>)
 8001244:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001248:	5ccb      	ldrb	r3, [r1, r3]
 800124a:	fa20 f303 	lsr.w	r3, r0, r3

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800124e:	200f      	movs	r0, #15
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001252:	f7ff f949 	bl	80004e8 <HAL_InitTick>

  return HAL_OK;
 8001256:	2000      	movs	r0, #0
}
 8001258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800125c:	6843      	ldr	r3, [r0, #4]
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800125e:	4a2b      	ldr	r2, [pc, #172]	; (800130c <HAL_RCC_ClockConfig+0x160>)
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001260:	2b03      	cmp	r3, #3
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001262:	6812      	ldr	r2, [r2, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001264:	d049      	beq.n	80012fa <HAL_RCC_ClockConfig+0x14e>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001266:	2b02      	cmp	r3, #2
 8001268:	d041      	beq.n	80012ee <HAL_RCC_ClockConfig+0x142>
        {
          return HAL_ERROR;
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800126a:	2b00      	cmp	r3, #0
 800126c:	d148      	bne.n	8001300 <HAL_RCC_ClockConfig+0x154>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800126e:	0796      	lsls	r6, r2, #30
 8001270:	d5ae      	bpl.n	80011d0 <HAL_RCC_ClockConfig+0x24>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001272:	4e26      	ldr	r6, [pc, #152]	; (800130c <HAL_RCC_ClockConfig+0x160>)
 8001274:	68b2      	ldr	r2, [r6, #8]
 8001276:	f022 0203 	bic.w	r2, r2, #3
 800127a:	4313      	orrs	r3, r2
 800127c:	60b3      	str	r3, [r6, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800127e:	f7ff f95d 	bl	800053c <HAL_GetTick>

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001282:	686b      	ldr	r3, [r5, #4]
 8001284:	2b03      	cmp	r3, #3
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001286:	4607      	mov	r7, r0

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001288:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800128c:	d013      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x10a>
        }
      }
    }
    else
    {
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800128e:	2b02      	cmp	r3, #2
 8001290:	d027      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x136>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001292:	b9db      	cbnz	r3, 80012cc <HAL_RCC_ClockConfig+0x120>
 8001294:	e004      	b.n	80012a0 <HAL_RCC_ClockConfig+0xf4>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
        {
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001296:	f7ff f951 	bl	800053c <HAL_GetTick>
 800129a:	1bc0      	subs	r0, r0, r7
 800129c:	4540      	cmp	r0, r8
 800129e:	d829      	bhi.n	80012f4 <HAL_RCC_ClockConfig+0x148>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80012a0:	68b3      	ldr	r3, [r6, #8]
 80012a2:	f013 0f0c 	tst.w	r3, #12
 80012a6:	d1f6      	bne.n	8001296 <HAL_RCC_ClockConfig+0xea>
 80012a8:	682b      	ldr	r3, [r5, #0]
 80012aa:	e799      	b.n	80011e0 <HAL_RCC_ClockConfig+0x34>

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ac:	f7ff f946 	bl	800053c <HAL_GetTick>
 80012b0:	1bc0      	subs	r0, r0, r7
 80012b2:	4540      	cmp	r0, r8
 80012b4:	d81e      	bhi.n	80012f4 <HAL_RCC_ClockConfig+0x148>
    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012b6:	68b3      	ldr	r3, [r6, #8]
 80012b8:	f003 030c 	and.w	r3, r3, #12
 80012bc:	2b0c      	cmp	r3, #12
 80012be:	d1f5      	bne.n	80012ac <HAL_RCC_ClockConfig+0x100>
 80012c0:	e7f2      	b.n	80012a8 <HAL_RCC_ClockConfig+0xfc>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c2:	f7ff f93b 	bl	800053c <HAL_GetTick>
 80012c6:	1bc0      	subs	r0, r0, r7
 80012c8:	4540      	cmp	r0, r8
 80012ca:	d813      	bhi.n	80012f4 <HAL_RCC_ClockConfig+0x148>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80012cc:	68b3      	ldr	r3, [r6, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d1f5      	bne.n	80012c2 <HAL_RCC_ClockConfig+0x116>
 80012d6:	e7e7      	b.n	80012a8 <HAL_RCC_ClockConfig+0xfc>
    {
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
        {
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d8:	f7ff f930 	bl	800053c <HAL_GetTick>
 80012dc:	1bc0      	subs	r0, r0, r7
 80012de:	4540      	cmp	r0, r8
 80012e0:	d808      	bhi.n	80012f4 <HAL_RCC_ClockConfig+0x148>
    }
    else
    {
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80012e2:	68b3      	ldr	r3, [r6, #8]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d1f5      	bne.n	80012d8 <HAL_RCC_ClockConfig+0x12c>
 80012ec:	e7dc      	b.n	80012a8 <HAL_RCC_ClockConfig+0xfc>
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80012ee:	0397      	lsls	r7, r2, #14
 80012f0:	d4bf      	bmi.n	8001272 <HAL_RCC_ClockConfig+0xc6>
 80012f2:	e76d      	b.n	80011d0 <HAL_RCC_ClockConfig+0x24>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 80012f4:	2003      	movs	r0, #3
 80012f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80012fa:	0192      	lsls	r2, r2, #6
 80012fc:	d4b9      	bmi.n	8001272 <HAL_RCC_ClockConfig+0xc6>
 80012fe:	e767      	b.n	80011d0 <HAL_RCC_ClockConfig+0x24>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001300:	0550      	lsls	r0, r2, #21
 8001302:	f57f af65 	bpl.w	80011d0 <HAL_RCC_ClockConfig+0x24>
 8001306:	e7b4      	b.n	8001272 <HAL_RCC_ClockConfig+0xc6>
 8001308:	40022000 	.word	0x40022000
 800130c:	40021000 	.word	0x40021000
 8001310:	080044a4 	.word	0x080044a4
 8001314:	20000004 	.word	0x20000004

08001318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001318:	4b01      	ldr	r3, [pc, #4]	; (8001320 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000004 	.word	0x20000004

08001324 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001328:	689b      	ldr	r3, [r3, #8]
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800132a:	4905      	ldr	r1, [pc, #20]	; (8001340 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800132c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001330:	6808      	ldr	r0, [r1, #0]
 8001332:	5cd3      	ldrb	r3, [r2, r3]
}
 8001334:	40d8      	lsrs	r0, r3
 8001336:	4770      	bx	lr
 8001338:	40021000 	.word	0x40021000
 800133c:	080044b4 	.word	0x080044b4
 8001340:	20000004 	.word	0x20000004

08001344 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001348:	689b      	ldr	r3, [r3, #8]
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800134a:	4905      	ldr	r1, [pc, #20]	; (8001360 <HAL_RCC_GetPCLK2Freq+0x1c>)
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800134c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001350:	6808      	ldr	r0, [r1, #0]
 8001352:	5cd3      	ldrb	r3, [r2, r3]
}
 8001354:	40d8      	lsrs	r0, r3
 8001356:	4770      	bx	lr
 8001358:	40021000 	.word	0x40021000
 800135c:	080044b4 	.word	0x080044b4
 8001360:	20000004 	.word	0x20000004

08001364 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001364:	4a48      	ldr	r2, [pc, #288]	; (8001488 <RCCEx_PLLSAI1_Config+0x124>)
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001368:	68d3      	ldr	r3, [r2, #12]
 800136a:	079b      	lsls	r3, r3, #30
 800136c:	d007      	beq.n	800137e <RCCEx_PLLSAI1_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800136e:	68d3      	ldr	r3, [r2, #12]
 8001370:	6804      	ldr	r4, [r0, #0]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	42a3      	cmp	r3, r4
 8001378:	d00d      	beq.n	8001396 <RCCEx_PLLSAI1_Config+0x32>
 800137a:	2001      	movs	r0, #1
 800137c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800137e:	6803      	ldr	r3, [r0, #0]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d012      	beq.n	80013aa <RCCEx_PLLSAI1_Config+0x46>
 8001384:	2b03      	cmp	r3, #3
 8001386:	d059      	beq.n	800143c <RCCEx_PLLSAI1_Config+0xd8>
 8001388:	2b01      	cmp	r3, #1
 800138a:	d1f6      	bne.n	800137a <RCCEx_PLLSAI1_Config+0x16>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	0797      	lsls	r7, r2, #30
 8001390:	d40e      	bmi.n	80013b0 <RCCEx_PLLSAI1_Config+0x4c>
 8001392:	4618      	mov	r0, r3
 8001394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       ||
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0ef      	beq.n	800137a <RCCEx_PLLSAI1_Config+0x16>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800139a:	68d3      	ldr	r3, [r2, #12]
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
 800139c:	6842      	ldr	r2, [r0, #4]
 800139e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80013a2:	3301      	adds	r3, #1
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d1e8      	bne.n	800137a <RCCEx_PLLSAI1_Config+0x16>
 80013a8:	e00c      	b.n	80013c4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80013aa:	6812      	ldr	r2, [r2, #0]
 80013ac:	0556      	lsls	r6, r2, #21
 80013ae:	d5e4      	bpl.n	800137a <RCCEx_PLLSAI1_Config+0x16>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80013b0:	4d35      	ldr	r5, [pc, #212]	; (8001488 <RCCEx_PLLSAI1_Config+0x124>)
 80013b2:	6842      	ldr	r2, [r0, #4]
 80013b4:	68ec      	ldr	r4, [r5, #12]
 80013b6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80013ba:	4323      	orrs	r3, r4
 80013bc:	3a01      	subs	r2, #1
 80013be:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80013c2:	60eb      	str	r3, [r5, #12]
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80013c4:	4c30      	ldr	r4, [pc, #192]	; (8001488 <RCCEx_PLLSAI1_Config+0x124>)
 80013c6:	6823      	ldr	r3, [r4, #0]
 80013c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80013cc:	6023      	str	r3, [r4, #0]
 80013ce:	460f      	mov	r7, r1
 80013d0:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013d2:	f7ff f8b3 	bl	800053c <HAL_GetTick>
 80013d6:	4606      	mov	r6, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80013d8:	e004      	b.n	80013e4 <RCCEx_PLLSAI1_Config+0x80>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80013da:	f7ff f8af 	bl	800053c <HAL_GetTick>
 80013de:	1b80      	subs	r0, r0, r6
 80013e0:	2802      	cmp	r0, #2
 80013e2:	d829      	bhi.n	8001438 <RCCEx_PLLSAI1_Config+0xd4>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80013e4:	6823      	ldr	r3, [r4, #0]
 80013e6:	4a28      	ldr	r2, [pc, #160]	; (8001488 <RCCEx_PLLSAI1_Config+0x124>)
 80013e8:	0119      	lsls	r1, r3, #4
 80013ea:	d4f6      	bmi.n	80013da <RCCEx_PLLSAI1_Config+0x76>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80013ec:	2f00      	cmp	r7, #0
 80013ee:	d12c      	bne.n	800144a <RCCEx_PLLSAI1_Config+0xe6>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80013f0:	6911      	ldr	r1, [r2, #16]
 80013f2:	68ac      	ldr	r4, [r5, #8]
 80013f4:	68e8      	ldr	r0, [r5, #12]
 80013f6:	f021 4378 	bic.w	r3, r1, #4160749568	; 0xf8000000
 80013fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80013fe:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001402:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8001406:	6113      	str	r3, [r2, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001408:	4c1f      	ldr	r4, [pc, #124]	; (8001488 <RCCEx_PLLSAI1_Config+0x124>)
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001410:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001412:	f7ff f893 	bl	800053c <HAL_GetTick>
 8001416:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001418:	e004      	b.n	8001424 <RCCEx_PLLSAI1_Config+0xc0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800141a:	f7ff f88f 	bl	800053c <HAL_GetTick>
 800141e:	1b80      	subs	r0, r0, r6
 8001420:	2802      	cmp	r0, #2
 8001422:	d809      	bhi.n	8001438 <RCCEx_PLLSAI1_Config+0xd4>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001424:	6823      	ldr	r3, [r4, #0]
 8001426:	4a18      	ldr	r2, [pc, #96]	; (8001488 <RCCEx_PLLSAI1_Config+0x124>)
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	d5f6      	bpl.n	800141a <RCCEx_PLLSAI1_Config+0xb6>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800142c:	69ab      	ldr	r3, [r5, #24]
 800142e:	6911      	ldr	r1, [r2, #16]
 8001430:	430b      	orrs	r3, r1
 8001432:	6113      	str	r3, [r2, #16]
 8001434:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
      {
        status = HAL_TIMEOUT;
 8001438:	2003      	movs	r0, #3
 800143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800143c:	6814      	ldr	r4, [r2, #0]
 800143e:	03a5      	lsls	r5, r4, #14
 8001440:	d4b6      	bmi.n	80013b0 <RCCEx_PLLSAI1_Config+0x4c>
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	0354      	lsls	r4, r2, #13
 8001446:	d598      	bpl.n	800137a <RCCEx_PLLSAI1_Config+0x16>
 8001448:	e7b2      	b.n	80013b0 <RCCEx_PLLSAI1_Config+0x4c>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800144a:	2f01      	cmp	r7, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800144c:	6911      	ldr	r1, [r2, #16]
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800144e:	d00d      	beq.n	800146c <RCCEx_PLLSAI1_Config+0x108>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001450:	6968      	ldr	r0, [r5, #20]
 8001452:	68ac      	ldr	r4, [r5, #8]
 8001454:	f021 63c0 	bic.w	r3, r1, #100663296	; 0x6000000
 8001458:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800145c:	0840      	lsrs	r0, r0, #1
 800145e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001462:	3801      	subs	r0, #1
 8001464:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001468:	6113      	str	r3, [r2, #16]
 800146a:	e7cd      	b.n	8001408 <RCCEx_PLLSAI1_Config+0xa4>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800146c:	6928      	ldr	r0, [r5, #16]
 800146e:	68ac      	ldr	r4, [r5, #8]
 8001470:	f421 03c0 	bic.w	r3, r1, #6291456	; 0x600000
 8001474:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001478:	0841      	lsrs	r1, r0, #1
 800147a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800147e:	3901      	subs	r1, #1
 8001480:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8001484:	6113      	str	r3, [r2, #16]
 8001486:	e7bf      	b.n	8001408 <RCCEx_PLLSAI1_Config+0xa4>
 8001488:	40021000 	.word	0x40021000

0800148c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800148c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001490:	6803      	ldr	r3, [r0, #0]
 8001492:	f413 6700 	ands.w	r7, r3, #2048	; 0x800
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001496:	b083      	sub	sp, #12
 8001498:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800149a:	d00c      	beq.n	80014b6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800149c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800149e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80014a2:	f000 811d 	beq.w	80016e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80014a6:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80014aa:	f000 8105 	beq.w	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 80014ae:	2900      	cmp	r1, #0
 80014b0:	f000 811c 	beq.w	80016ec <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80014b4:	2701      	movs	r7, #1
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80014b6:	039d      	lsls	r5, r3, #14
 80014b8:	d559      	bpl.n	800156e <HAL_RCCEx_PeriphCLKConfig+0xe2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ba:	4ba1      	ldr	r3, [pc, #644]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80014bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014be:	00d0      	lsls	r0, r2, #3
 80014c0:	f140 80e1 	bpl.w	8001686 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
  {
    FlagStatus       pwrclkchanged = RESET;
 80014c4:	f04f 0800 	mov.w	r8, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014c8:	4d9e      	ldr	r5, [pc, #632]	; (8001744 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80014ca:	682b      	ldr	r3, [r5, #0]
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80014d2:	f7ff f833 	bl	800053c <HAL_GetTick>
 80014d6:	4606      	mov	r6, r0

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 80014d8:	e005      	b.n	80014e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014da:	f7ff f82f 	bl	800053c <HAL_GetTick>
 80014de:	1b80      	subs	r0, r0, r6
 80014e0:	2802      	cmp	r0, #2
 80014e2:	f200 80dc 	bhi.w	800169e <HAL_RCCEx_PeriphCLKConfig+0x212>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 80014e6:	682b      	ldr	r3, [r5, #0]
 80014e8:	05d9      	lsls	r1, r3, #23
 80014ea:	d5f6      	bpl.n	80014da <HAL_RCCEx_PeriphCLKConfig+0x4e>
        ret = HAL_TIMEOUT;
        break;
      }
    }

    if(ret == HAL_OK)
 80014ec:	2f00      	cmp	r7, #0
 80014ee:	d139      	bne.n	8001564 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80014f0:	4a93      	ldr	r2, [pc, #588]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80014f2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80014f6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80014fa:	d02a      	beq.n	8001552 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 80014fc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80014fe:	428b      	cmp	r3, r1
 8001500:	f000 8118 	beq.w	8001734 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001504:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001508:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 800150c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8001510:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001514:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
        __HAL_RCC_BACKUPRESET_RELEASE();
 800151c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8001520:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001528:	07da      	lsls	r2, r3, #31
 800152a:	f140 80ef 	bpl.w	800170c <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff f805 	bl	800053c <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001532:	4d83      	ldr	r5, [pc, #524]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	4681      	mov	r9, r0

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001536:	f241 3688 	movw	r6, #5000	; 0x1388
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800153a:	e006      	b.n	800154a <HAL_RCCEx_PeriphCLKConfig+0xbe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7fe fffe 	bl	800053c <HAL_GetTick>
 8001540:	ebc9 0000 	rsb	r0, r9, r0
 8001544:	42b0      	cmp	r0, r6
 8001546:	f200 80aa 	bhi.w	800169e <HAL_RCCEx_PeriphCLKConfig+0x212>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800154a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800154e:	079b      	lsls	r3, r3, #30
 8001550:	d5f4      	bpl.n	800153c <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8001552:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }

      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001554:	497a      	ldr	r1, [pc, #488]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001556:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800155a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800155e:	4313      	orrs	r3, r2
 8001560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001564:	f1b8 0f00 	cmp.w	r8, #0
 8001568:	f040 809e 	bne.w	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800156c:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800156e:	07de      	lsls	r6, r3, #31
 8001570:	d508      	bpl.n	8001584 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001572:	4873      	ldr	r0, [pc, #460]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001574:	6a22      	ldr	r2, [r4, #32]
 8001576:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800157a:	f021 0103 	bic.w	r1, r1, #3
 800157e:	430a      	orrs	r2, r1
 8001580:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001584:	079d      	lsls	r5, r3, #30
 8001586:	d508      	bpl.n	800159a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001588:	486d      	ldr	r0, [pc, #436]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800158a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800158c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8001590:	f021 010c 	bic.w	r1, r1, #12
 8001594:	430a      	orrs	r2, r1
 8001596:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800159a:	0698      	lsls	r0, r3, #26
 800159c:	d508      	bpl.n	80015b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800159e:	4868      	ldr	r0, [pc, #416]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80015a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80015a2:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80015a6:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80015aa:	430a      	orrs	r2, r1
 80015ac:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80015b0:	0599      	lsls	r1, r3, #22
 80015b2:	d508      	bpl.n	80015c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80015b4:	4862      	ldr	r0, [pc, #392]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80015b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80015b8:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80015bc:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 80015c0:	430a      	orrs	r2, r1
 80015c2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80015c6:	055a      	lsls	r2, r3, #21
 80015c8:	d508      	bpl.n	80015dc <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80015ca:	485d      	ldr	r0, [pc, #372]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80015cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80015ce:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80015d2:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80015d6:	430a      	orrs	r2, r1
 80015d8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015dc:	065e      	lsls	r6, r3, #25
 80015de:	d508      	bpl.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015e0:	4857      	ldr	r0, [pc, #348]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80015e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80015e4:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80015e8:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80015ec:	430a      	orrs	r2, r1
 80015ee:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80015f2:	05dd      	lsls	r5, r3, #23
 80015f4:	d508      	bpl.n	8001608 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80015f6:	4852      	ldr	r0, [pc, #328]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80015f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80015fa:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80015fe:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8001602:	430a      	orrs	r2, r1
 8001604:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001608:	0498      	lsls	r0, r3, #18
 800160a:	d50e      	bpl.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800160c:	484c      	ldr	r0, [pc, #304]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800160e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001610:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001614:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001618:	430a      	orrs	r2, r1

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800161a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800161e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001622:	d058      	beq.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001624:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001628:	d072      	beq.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0x284>
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800162a:	0359      	lsls	r1, r3, #13
 800162c:	d50e      	bpl.n	800164c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800162e:	4844      	ldr	r0, [pc, #272]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001630:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001632:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001636:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800163a:	430a      	orrs	r2, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800163c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001640:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001644:	d042      	beq.n	80016cc <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001646:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800164a:	d069      	beq.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0x294>
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800164c:	045a      	lsls	r2, r3, #17
 800164e:	d50b      	bpl.n	8001668 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001650:	483b      	ldr	r0, [pc, #236]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001652:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001654:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001658:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800165c:	430a      	orrs	r2, r1

    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800165e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001662:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001666:	d049      	beq.n	80016fc <HAL_RCCEx_PeriphCLKConfig+0x270>
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001668:	041b      	lsls	r3, r3, #16
 800166a:	d508      	bpl.n	800167e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800166c:	4934      	ldr	r1, [pc, #208]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800166e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001670:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001674:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001678:	4313      	orrs	r3, r2
 800167a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
}
 800167e:	4638      	mov	r0, r7
 8001680:	b003      	add	sp, #12
 8001682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001688:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800168c:	659a      	str	r2, [r3, #88]	; 0x58
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001698:	f04f 0801 	mov.w	r8, #1
 800169c:	e714      	b.n	80014c8 <HAL_RCCEx_PeriphCLKConfig+0x3c>

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        ret = HAL_TIMEOUT;
 800169e:	2703      	movs	r7, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016a0:	f1b8 0f00 	cmp.w	r8, #0
 80016a4:	f43f af62 	beq.w	800156c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a8:	4a25      	ldr	r2, [pc, #148]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80016aa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80016ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6593      	str	r3, [r2, #88]	; 0x58
 80016b2:	e75b      	b.n	800156c <HAL_RCCEx_PeriphCLKConfig+0xe0>
 80016b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80016b6:	6823      	ldr	r3, [r4, #0]
    }

    if(ret == HAL_OK)
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016b8:	4821      	ldr	r0, [pc, #132]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80016ba:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80016be:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80016c2:	4311      	orrs	r1, r2
 80016c4:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 80016c8:	2700      	movs	r7, #0
 80016ca:	e6f4      	b.n	80014b6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80016cc:	68c2      	ldr	r2, [r0, #12]
 80016ce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80016d2:	60c2      	str	r2, [r0, #12]
 80016d4:	e7ba      	b.n	800164c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80016d6:	68c2      	ldr	r2, [r0, #12]
 80016d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80016dc:	60c2      	str	r2, [r0, #12]
 80016de:	e7a4      	b.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x19e>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80016e0:	4817      	ldr	r0, [pc, #92]	; (8001740 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80016e2:	68c2      	ldr	r2, [r0, #12]
 80016e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016e8:	60c2      	str	r2, [r0, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80016ea:	e7e5      	b.n	80016b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80016ec:	3004      	adds	r0, #4
 80016ee:	f7ff fe39 	bl	8001364 <RCCEx_PLLSAI1_Config>
    default:
      ret = HAL_ERROR;
      break;
    }

    if(ret == HAL_OK)
 80016f2:	4607      	mov	r7, r0
 80016f4:	2800      	cmp	r0, #0
 80016f6:	d0dd      	beq.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	e6dc      	b.n	80014b6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);

    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80016fc:	2102      	movs	r1, #2
 80016fe:	1d20      	adds	r0, r4, #4
 8001700:	f7ff fe30 	bl	8001364 <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 8001704:	b1a0      	cbz	r0, 8001730 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8001706:	4607      	mov	r7, r0
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	e7ad      	b.n	8001668 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    if(ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800170c:	460b      	mov	r3, r1
 800170e:	e721      	b.n	8001554 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001710:	2101      	movs	r1, #1
 8001712:	1d20      	adds	r0, r4, #4
 8001714:	f7ff fe26 	bl	8001364 <RCCEx_PLLSAI1_Config>

        if(ret != HAL_OK)
 8001718:	b170      	cbz	r0, 8001738 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800171a:	4607      	mov	r7, r0
 800171c:	6823      	ldr	r3, [r4, #0]
 800171e:	e784      	b.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x19e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001720:	2101      	movs	r1, #1
 8001722:	1d20      	adds	r0, r4, #4
 8001724:	f7ff fe1e 	bl	8001364 <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 8001728:	b140      	cbz	r0, 800173c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800172a:	4607      	mov	r7, r0
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	e78d      	b.n	800164c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8001730:	6823      	ldr	r3, [r4, #0]
 8001732:	e799      	b.n	8001668 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001734:	460b      	mov	r3, r1
 8001736:	e6f7      	b.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	e776      	b.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	e785      	b.n	800164c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8001740:	40021000 	.word	0x40021000
 8001744:	40007000 	.word	0x40007000

08001748 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001748:	6803      	ldr	r3, [r0, #0]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800174a:	6841      	ldr	r1, [r0, #4]
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800174c:	685a      	ldr	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800174e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001752:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001756:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001758:	d013      	beq.n	8001782 <SPI_WaitFifoStateUntilTimeout.part.1+0x3a>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800175a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800175c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001760:	d107      	bne.n	8001772 <SPI_WaitFifoStateUntilTimeout.part.1+0x2a>
        {
          SPI_RESET_CRC(hspi);
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001770:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001772:	2201      	movs	r2, #1

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001774:	2300      	movs	r3, #0
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001776:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800177a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 800177e:	2003      	movs	r0, #3
 8001780:	4770      	bx	lr
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001782:	6882      	ldr	r2, [r0, #8]
 8001784:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001788:	d002      	beq.n	8001790 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800178a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800178e:	d1e4      	bne.n	800175a <SPI_WaitFifoStateUntilTimeout.part.1+0x12>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	e7df      	b.n	800175a <SPI_WaitFifoStateUntilTimeout.part.1+0x12>
 800179a:	bf00      	nop

0800179c <HAL_SPI_TransmitReceive_DMA.part.6>:
  * @param  pRxData pointer to reception data buffer
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
 800179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800179e:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);

  tmp  = hspi->State;
 80017a0:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80017a4:	2501      	movs	r5, #1

  tmp  = hspi->State;
 80017a6:	b2c0      	uxtb	r0, r0
  tmp1 = hspi->Init.Mode;
  if (!((tmp == HAL_SPI_STATE_READY) ||
 80017a8:	42a8      	cmp	r0, r5

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80017aa:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c

  tmp  = hspi->State;
  tmp1 = hspi->Init.Mode;
  if (!((tmp == HAL_SPI_STATE_READY) ||
 80017ae:	d00d      	beq.n	80017cc <HAL_SPI_TransmitReceive_DMA.part.6+0x30>
 80017b0:	6865      	ldr	r5, [r4, #4]
 80017b2:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 80017b6:	d004      	beq.n	80017c2 <HAL_SPI_TransmitReceive_DMA.part.6+0x26>
  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80017b8:	2300      	movs	r3, #0
  tmp  = hspi->State;
  tmp1 = hspi->Init.Mode;
  if (!((tmp == HAL_SPI_STATE_READY) ||
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 80017ba:	2002      	movs	r0, #2
  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80017bc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
}
 80017c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);

  tmp  = hspi->State;
  tmp1 = hspi->Init.Mode;
  if (!((tmp == HAL_SPI_STATE_READY) ||
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80017c2:	68a5      	ldr	r5, [r4, #8]
 80017c4:	2d00      	cmp	r5, #0
 80017c6:	d1f7      	bne.n	80017b8 <HAL_SPI_TransmitReceive_DMA.part.6+0x1c>
 80017c8:	2804      	cmp	r0, #4
 80017ca:	d1f5      	bne.n	80017b8 <HAL_SPI_TransmitReceive_DMA.part.6+0x1c>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80017cc:	2900      	cmp	r1, #0
 80017ce:	d061      	beq.n	8001894 <HAL_SPI_TransmitReceive_DMA.part.6+0xf8>
 80017d0:	2a00      	cmp	r2, #0
 80017d2:	d05f      	beq.n	8001894 <HAL_SPI_TransmitReceive_DMA.part.6+0xf8>
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d05d      	beq.n	8001894 <HAL_SPI_TransmitReceive_DMA.part.6+0xf8>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80017d8:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80017dc:	6825      	ldr	r5, [r4, #0]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80017de:	68e7      	ldr	r7, [r4, #12]
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80017e0:	2804      	cmp	r0, #4
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80017e2:	bf18      	it	ne
 80017e4:	2005      	movne	r0, #5
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017e6:	f04f 0600 	mov.w	r6, #0
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80017ea:	bf18      	it	ne
 80017ec:	f884 005d 	strbne.w	r0, [r4, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017f0:	6626      	str	r6, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferSize  = Size;
  hspi->TxXferCount = Size;
 80017f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferSize  = Size;
  hspi->RxXferCount = Size;
 80017f4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80017f8:	6868      	ldr	r0, [r5, #4]
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80017fa:	63a1      	str	r1, [r4, #56]	; 0x38

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80017fc:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8001800:	f420 41c0 	bic.w	r1, r0, #24576	; 0x6000
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferSize  = Size;
 8001804:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001806:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001808:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800180c:	64e6      	str	r6, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800180e:	6526      	str	r6, [r4, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8001810:	6069      	str	r1, [r5, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001812:	d944      	bls.n	800189e <HAL_SPI_TransmitReceive_DMA.part.6+0x102>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001814:	686b      	ldr	r3, [r5, #4]
 8001816:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800181c:	606b      	str	r3, [r5, #4]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800181e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8001822:	2b04      	cmp	r3, #4
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8001824:	bf0b      	itete	eq
 8001826:	4b3f      	ldreq	r3, [pc, #252]	; (8001924 <HAL_SPI_TransmitReceive_DMA.part.6+0x188>)
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8001828:	4b3f      	ldrne	r3, [pc, #252]	; (8001928 <HAL_SPI_TransmitReceive_DMA.part.6+0x18c>)

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800182a:	4a40      	ldreq	r2, [pc, #256]	; (800192c <HAL_SPI_TransmitReceive_DMA.part.6+0x190>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800182c:	4a40      	ldrne	r2, [pc, #256]	; (8001930 <HAL_SPI_TransmitReceive_DMA.part.6+0x194>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800182e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;

  /* Enable the Rx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8001830:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8001834:	6302      	str	r2, [r0, #48]	; 0x30

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001836:	2600      	movs	r6, #0
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001838:	4a3e      	ldr	r2, [pc, #248]	; (8001934 <HAL_SPI_TransmitReceive_DMA.part.6+0x198>)
 800183a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;

  /* Enable the Rx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 800183c:	f105 010c 	add.w	r1, r5, #12
 8001840:	b29b      	uxth	r3, r3
 8001842:	6c22      	ldr	r2, [r4, #64]	; 0x40

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001844:	6386      	str	r6, [r0, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8001846:	f7fe ff6b 	bl	8000720 <HAL_DMA_Start_IT>

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800184a:	6822      	ldr	r2, [r4, #0]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800184c:	6d60      	ldr	r0, [r4, #84]	; 0x54

  /* Enable the Rx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800184e:	6853      	ldr	r3, [r2, #4]
  hspi->hdmatx->XferCpltCallback     = NULL;
  hspi->hdmatx->XferErrorCallback    = NULL;
  hspi->hdmatx->XferAbortCallback    = NULL;

  /* Enable the Tx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8001850:	6ba1      	ldr	r1, [r4, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferCpltCallback     = NULL;
  hspi->hdmatx->XferErrorCallback    = NULL;
  hspi->hdmatx->XferAbortCallback    = NULL;

  /* Enable the Tx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8001858:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800185a:	6306      	str	r6, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
  hspi->hdmatx->XferErrorCallback    = NULL;
  hspi->hdmatx->XferAbortCallback    = NULL;

  /* Enable the Tx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 800185c:	320c      	adds	r2, #12
 800185e:	b29b      	uxth	r3, r3
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
  hspi->hdmatx->XferCpltCallback     = NULL;
 8001860:	62c6      	str	r6, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8001862:	6346      	str	r6, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8001864:	6386      	str	r6, [r0, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount);
 8001866:	f7fe ff5b 	bl	8000720 <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800186a:	6823      	ldr	r3, [r4, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	0652      	lsls	r2, r2, #25
 8001870:	d403      	bmi.n	800187a <HAL_SPI_TransmitReceive_DMA.part.6+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001878:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	f042 0220 	orr.w	r2, r2, #32
 8001880:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	f042 0202 	orr.w	r2, r2, #2
 8001888:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800188a:	2300      	movs	r3, #0
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
  uint32_t tmp = 0U, tmp1 = 0U;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800188c:	2000      	movs	r0, #0
  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800188e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
}
 8001892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001894:	2300      	movs	r3, #0
    goto error;
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
  {
    errorcode = HAL_ERROR;
 8001896:	2001      	movs	r0, #1
  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001898:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
}
 800189c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800189e:	6d61      	ldr	r1, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80018a0:	686a      	ldr	r2, [r5, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018a2:	6989      	ldr	r1, [r1, #24]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80018a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80018ac:	606a      	str	r2, [r5, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018ae:	d018      	beq.n	80018e2 <HAL_SPI_TransmitReceive_DMA.part.6+0x146>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018b2:	6983      	ldr	r3, [r0, #24]
 80018b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b8:	d1b1      	bne.n	800181e <HAL_SPI_TransmitReceive_DMA.part.6+0x82>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80018ba:	686b      	ldr	r3, [r5, #4]
 80018bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018c0:	606b      	str	r3, [r5, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80018c2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80018c6:	f013 0f01 	tst.w	r3, #1
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80018ca:	686b      	ldr	r3, [r5, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80018cc:	d115      	bne.n	80018fa <HAL_SPI_TransmitReceive_DMA.part.6+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80018ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018d2:	606b      	str	r3, [r5, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80018d4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80018d8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80018dc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80018e0:	e79d      	b.n	800181e <HAL_SPI_TransmitReceive_DMA.part.6+0x82>
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80018e2:	f013 0f01 	tst.w	r3, #1
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80018e6:	686b      	ldr	r3, [r5, #4]
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80018e8:	d112      	bne.n	8001910 <HAL_SPI_TransmitReceive_DMA.part.6+0x174>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80018ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018ee:	606b      	str	r3, [r5, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80018f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80018f2:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80018f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80018f8:	e7da      	b.n	80018b0 <HAL_SPI_TransmitReceive_DMA.part.6+0x114>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80018fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018fe:	606b      	str	r3, [r5, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8001900:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001904:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8001908:	3301      	adds	r3, #1
 800190a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800190e:	e786      	b.n	800181e <HAL_SPI_TransmitReceive_DMA.part.6+0x82>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8001910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001914:	606b      	str	r3, [r5, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8001916:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001918:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800191c:	3301      	adds	r3, #1
 800191e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001920:	e7c6      	b.n	80018b0 <HAL_SPI_TransmitReceive_DMA.part.6+0x114>
 8001922:	bf00      	nop
 8001924:	08001cdd 	.word	0x08001cdd
 8001928:	08001d31 	.word	0x08001d31
 800192c:	08001c99 	.word	0x08001c99
 8001930:	08001ca9 	.word	0x08001ca9
 8001934:	08001cb9 	.word	0x08001cb9

08001938 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8001938:	b570      	push	{r4, r5, r6, lr}
 800193a:	4605      	mov	r5, r0
 800193c:	460c      	mov	r4, r1
 800193e:	4616      	mov	r6, r2
 8001940:	6828      	ldr	r0, [r5, #0]
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001942:	6883      	ldr	r3, [r0, #8]
 8001944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001948:	b90b      	cbnz	r3, 800194e <SPI_WaitFlagStateUntilTimeout.constprop.10+0x16>
      }
    }
  }

  return HAL_OK;
}
 800194a:	2000      	movs	r0, #0
 800194c:	bd70      	pop	{r4, r5, r6, pc}
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
  {
    if (Timeout != HAL_MAX_DELAY)
 800194e:	1c63      	adds	r3, r4, #1
 8001950:	d0f7      	beq.n	8001942 <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001952:	b124      	cbz	r4, 800195e <SPI_WaitFlagStateUntilTimeout.constprop.10+0x26>
 8001954:	f7fe fdf2 	bl	800053c <HAL_GetTick>
 8001958:	1b80      	subs	r0, r0, r6
 800195a:	4284      	cmp	r4, r0
 800195c:	d8f0      	bhi.n	8001940 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 800195e:	4628      	mov	r0, r5
      }
    }
  }

  return HAL_OK;
}
 8001960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001964:	f7ff bef0 	b.w	8001748 <SPI_WaitFifoStateUntilTimeout.part.1>

08001968 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196a:	4606      	mov	r6, r0
 800196c:	b083      	sub	sp, #12
 800196e:	460c      	mov	r4, r1
 8001970:	4615      	mov	r5, r2
 8001972:	461f      	mov	r7, r3
 8001974:	6831      	ldr	r1, [r6, #0]
 8001976:	e001      	b.n	800197c <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 8001978:	1c6b      	adds	r3, r5, #1
 800197a:	d10d      	bne.n	8001998 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800197c:	6888      	ldr	r0, [r1, #8]
 800197e:	4020      	ands	r0, r4
 8001980:	d013      	beq.n	80019aa <SPI_WaitFifoStateUntilTimeout.constprop.11+0x42>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001982:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8001986:	d1f7      	bne.n	8001978 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x10>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8001988:	7b0a      	ldrb	r2, [r1, #12]
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	f88d 2007 	strb.w	r2, [sp, #7]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 8001990:	1c6b      	adds	r3, r5, #1
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8001992:	f89d 2007 	ldrb.w	r2, [sp, #7]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001996:	d0f1      	beq.n	800197c <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001998:	b125      	cbz	r5, 80019a4 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x3c>
 800199a:	f7fe fdcf 	bl	800053c <HAL_GetTick>
 800199e:	1bc0      	subs	r0, r0, r7
 80019a0:	4285      	cmp	r5, r0
 80019a2:	d8e7      	bhi.n	8001974 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
 80019a4:	4630      	mov	r0, r6
 80019a6:	f7ff fecf 	bl	8001748 <SPI_WaitFifoStateUntilTimeout.part.1>
      }
    }
  }

  return HAL_OK;
}
 80019aa:	b003      	add	sp, #12
 80019ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ae:	bf00      	nop

080019b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80019b0:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019b2:	4613      	mov	r3, r2
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80019b4:	460d      	mov	r5, r1
 80019b6:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019b8:	460a      	mov	r2, r1
 80019ba:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80019be:	4604      	mov	r4, r0
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019c0:	f7ff ffd2 	bl	8001968 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80019c4:	b128      	cbz	r0, 80019d2 <SPI_EndRxTxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80019c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80019c8:	f043 0320 	orr.w	r3, r3, #32
 80019cc:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80019ce:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80019d0:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80019d2:	4632      	mov	r2, r6
 80019d4:	4629      	mov	r1, r5
 80019d6:	4620      	mov	r0, r4
 80019d8:	f7ff ffae 	bl	8001938 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 80019dc:	2800      	cmp	r0, #0
 80019de:	d1f2      	bne.n	80019c6 <SPI_EndRxTxTransaction+0x16>

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80019e0:	4633      	mov	r3, r6
 80019e2:	462a      	mov	r2, r5
 80019e4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff ffbd 	bl	8001968 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d1e9      	bne.n	80019c6 <SPI_EndRxTxTransaction+0x16>
 80019f2:	e7ed      	b.n	80019d0 <SPI_EndRxTxTransaction+0x20>

080019f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80019f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019f6:	6843      	ldr	r3, [r0, #4]
 80019f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80019fc:	4604      	mov	r4, r0
 80019fe:	460e      	mov	r6, r1
 8001a00:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a02:	d022      	beq.n	8001a4a <SPI_EndRxTransaction+0x56>
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001a04:	463a      	mov	r2, r7
 8001a06:	4631      	mov	r1, r6
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7ff ff95 	bl	8001938 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8001a0e:	4605      	mov	r5, r0
 8001a10:	b130      	cbz	r0, 8001a20 <SPI_EndRxTransaction+0x2c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001a12:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a14:	f043 0320 	orr.w	r3, r3, #32
 8001a18:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001a1a:	2503      	movs	r5, #3
    }
  }
  return HAL_OK;
}
 8001a1c:	4628      	mov	r0, r5
 8001a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a20:	6863      	ldr	r3, [r4, #4]
 8001a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a26:	d1f9      	bne.n	8001a1c <SPI_EndRxTransaction+0x28>
 8001a28:	68a3      	ldr	r3, [r4, #8]
 8001a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a2e:	d002      	beq.n	8001a36 <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a34:	d1f2      	bne.n	8001a1c <SPI_EndRxTransaction+0x28>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001a36:	463b      	mov	r3, r7
 8001a38:	4632      	mov	r2, r6
 8001a3a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f7ff ff92 	bl	8001968 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001a44:	2800      	cmp	r0, #0
 8001a46:	d1e4      	bne.n	8001a12 <SPI_EndRxTransaction+0x1e>
 8001a48:	e7e8      	b.n	8001a1c <SPI_EndRxTransaction+0x28>
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a4a:	6883      	ldr	r3, [r0, #8]
 8001a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a50:	d002      	beq.n	8001a58 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a56:	d1d5      	bne.n	8001a04 <SPI_EndRxTransaction+0x10>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001a58:	6822      	ldr	r2, [r4, #0]
 8001a5a:	6813      	ldr	r3, [r2, #0]
 8001a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e7cf      	b.n	8001a04 <SPI_EndRxTransaction+0x10>

08001a64 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a64:	2800      	cmp	r0, #0
 8001a66:	d068      	beq.n	8001b3a <HAL_SPI_Init+0xd6>
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a68:	b5f0      	push	{r4, r5, r6, r7, lr}
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a6a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a6e:	2200      	movs	r2, #0
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a70:	b083      	sub	sp, #12
 8001a72:	4604      	mov	r4, r0
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a74:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a78:	6282      	str	r2, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d04e      	beq.n	8001b1c <HAL_SPI_Init+0xb8>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a7e:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a80:	6825      	ldr	r5, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a82:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a86:	682b      	ldr	r3, [r5, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a88:	68e2      	ldr	r2, [r4, #12]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a8e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a92:	602b      	str	r3, [r5, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a94:	d90a      	bls.n	8001aac <HAL_SPI_Init+0x48>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a96:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8001a9a:	d146      	bne.n	8001b2a <HAL_SPI_Init+0xc6>
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001a9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d140      	bne.n	8001b26 <HAL_SPI_Init+0xc2>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	6323      	str	r3, [r4, #48]	; 0x30
 8001aa8:	2700      	movs	r7, #0
 8001aaa:	e00f      	b.n	8001acc <HAL_SPI_Init+0x68>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001aac:	d007      	beq.n	8001abe <HAL_SPI_Init+0x5a>
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001aae:	6b20      	ldr	r0, [r4, #48]	; 0x30

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001ab4:	b130      	cbz	r0, 8001ac4 <HAL_SPI_Init+0x60>
 8001ab6:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ab8:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001abc:	e006      	b.n	8001acc <HAL_SPI_Init+0x68>
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001abe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ac0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001ac2:	b90b      	cbnz	r3, 8001ac8 <HAL_SPI_Init+0x64>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	6323      	str	r3, [r4, #48]	; 0x30
 8001ac8:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001acc:	6863      	ldr	r3, [r4, #4]
 8001ace:	68a6      	ldr	r6, [r4, #8]
 8001ad0:	6921      	ldr	r1, [r4, #16]
 8001ad2:	431e      	orrs	r6, r3
 8001ad4:	430e      	orrs	r6, r1
 8001ad6:	6961      	ldr	r1, [r4, #20]
 8001ad8:	69a3      	ldr	r3, [r4, #24]
 8001ada:	430e      	orrs	r6, r1
 8001adc:	69e1      	ldr	r1, [r4, #28]
 8001ade:	430e      	orrs	r6, r1
 8001ae0:	6a21      	ldr	r1, [r4, #32]
 8001ae2:	9101      	str	r1, [sp, #4]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001ae4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ae6:	ea42 0c01 	orr.w	ip, r2, r1
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001aea:	9a01      	ldr	r2, [sp, #4]
 8001aec:	f403 7100 	and.w	r1, r3, #512	; 0x200
 8001af0:	4316      	orrs	r6, r2
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001af2:	0c1a      	lsrs	r2, r3, #16
 8001af4:	6b63      	ldr	r3, [r4, #52]	; 0x34
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001af6:	4331      	orrs	r1, r6
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001af8:	f002 0204 	and.w	r2, r2, #4
 8001afc:	ea4c 0303 	orr.w	r3, ip, r3
 8001b00:	4313      	orrs	r3, r2
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001b02:	ea41 0200 	orr.w	r2, r1, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b06:	2100      	movs	r1, #0
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001b08:	433b      	orrs	r3, r7
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8001b0a:	2601      	movs	r6, #1

  return HAL_OK;
 8001b0c:	4608      	mov	r0, r1
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001b0e:	602a      	str	r2, [r5, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001b10:	606b      	str	r3, [r5, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b12:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b14:	f884 605d 	strb.w	r6, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8001b18:	b003      	add	sp, #12
 8001b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b1c:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b20:	f002 f9ce 	bl	8003ec0 <HAL_SPI_MspInit>
 8001b24:	e7ab      	b.n	8001a7e <HAL_SPI_Init+0x1a>
  __HAL_SPI_DISABLE(hspi);

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b26:	2700      	movs	r7, #0
 8001b28:	e7d0      	b.n	8001acc <HAL_SPI_Init+0x68>
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001b2a:	6b20      	ldr	r0, [r4, #48]	; 0x30

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001b30:	2800      	cmp	r0, #0
 8001b32:	d0b7      	beq.n	8001aa4 <HAL_SPI_Init+0x40>
 8001b34:	4618      	mov	r0, r3
  __HAL_SPI_DISABLE(hspi);

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b36:	461f      	mov	r7, r3
 8001b38:	e7c8      	b.n	8001acc <HAL_SPI_Init+0x68>
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8001b3a:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop

08001b40 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef errorcode = HAL_OK;

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001b44:	6886      	ldr	r6, [r0, #8]
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001b46:	4604      	mov	r4, r0
 8001b48:	460d      	mov	r5, r1
  HAL_StatusTypeDef errorcode = HAL_OK;

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001b4a:	b91e      	cbnz	r6, 8001b54 <HAL_SPI_Receive_DMA+0x14>
 8001b4c:	6843      	ldr	r3, [r0, #4]
 8001b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b52:	d014      	beq.n	8001b7e <HAL_SPI_Receive_DMA+0x3e>
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b54:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d00d      	beq.n	8001b78 <HAL_SPI_Receive_DMA+0x38>

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b5c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b60:	2301      	movs	r3, #1

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b62:	b2c0      	uxtb	r0, r0
 8001b64:	4298      	cmp	r0, r3
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b66:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b6a:	d015      	beq.n	8001b98 <HAL_SPI_Receive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8001b6c:	2002      	movs	r0, #2
  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
}
 8001b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001b78:	2002      	movs	r0, #2
 8001b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b7e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001b82:	2604      	movs	r6, #4

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001b84:	2b01      	cmp	r3, #1
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001b86:	f880 605d 	strb.w	r6, [r0, #93]	; 0x5d

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001b8a:	d0f5      	beq.n	8001b78 <HAL_SPI_Receive_DMA+0x38>
 8001b8c:	4613      	mov	r3, r2

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 8001b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b92:	460a      	mov	r2, r1
 8001b94:	f7ff be02 	b.w	800179c <HAL_SPI_TransmitReceive_DMA.part.6>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if ((pData == NULL) || (Size == 0U))
 8001b98:	2d00      	cmp	r5, #0
 8001b9a:	d0e8      	beq.n	8001b6e <HAL_SPI_Receive_DMA+0x2e>
 8001b9c:	2a00      	cmp	r2, #0
 8001b9e:	d0e6      	beq.n	8001b6e <HAL_SPI_Receive_DMA+0x2e>
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ba0:	2300      	movs	r3, #0
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001ba2:	2104      	movs	r1, #4
  hspi->TxISR       = NULL;
  hspi->TxXferSize  = 0U;
  hspi->TxXferCount = 0U;

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ba4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001ba8:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001bac:	6425      	str	r5, [r4, #64]	; 0x40
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bae:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
  hspi->RxXferSize  = Size;
 8001bb0:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8001bb4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001bb8:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001bba:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8001bbc:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001bbe:	87e3      	strh	r3, [r4, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_RX(hspi);
 8001bc0:	6821      	ldr	r1, [r4, #0]
  hspi->TxISR       = NULL;
  hspi->TxXferSize  = 0U;
  hspi->TxXferCount = 0U;

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bc2:	d039      	beq.n	8001c38 <HAL_SPI_Receive_DMA+0xf8>
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8001bc4:	684b      	ldr	r3, [r1, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bc6:	68e2      	ldr	r2, [r4, #12]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8001bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bcc:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8001bd0:	604b      	str	r3, [r1, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bd2:	d82b      	bhi.n	8001c2c <HAL_SPI_Receive_DMA+0xec>
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001bd6:	684b      	ldr	r3, [r1, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bd8:	6982      	ldr	r2, [r0, #24]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001bda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bde:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001be2:	604b      	str	r3, [r1, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001be4:	d02d      	beq.n	8001c42 <HAL_SPI_Receive_DMA+0x102>

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;

  /* Enable the Rx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8001be6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001bea:	4a25      	ldr	r2, [pc, #148]	; (8001c80 <HAL_SPI_Receive_DMA+0x140>)

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8001bec:	f8df e098 	ldr.w	lr, [pc, #152]	; 8001c88 <HAL_SPI_Receive_DMA+0x148>

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001bf0:	4f24      	ldr	r7, [pc, #144]	; (8001c84 <HAL_SPI_Receive_DMA+0x144>)
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001bf2:	6302      	str	r2, [r0, #48]	; 0x30

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001bf4:	2600      	movs	r6, #0

  /* Enable the Rx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8001bf6:	462a      	mov	r2, r5
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	310c      	adds	r1, #12

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8001bfc:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001c00:	6347      	str	r7, [r0, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001c02:	6386      	str	r6, [r0, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount);
 8001c04:	f7fe fd8c 	bl	8000720 <HAL_DMA_Start_IT>

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	0652      	lsls	r2, r2, #25
 8001c0e:	d403      	bmi.n	8001c18 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c16:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	f042 0220 	orr.w	r2, r2, #32
 8001c1e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	605a      	str	r2, [r3, #4]
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c28:	2000      	movs	r0, #0
 8001c2a:	e7a0      	b.n	8001b6e <HAL_SPI_Receive_DMA+0x2e>

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c2c:	684b      	ldr	r3, [r1, #4]
 8001c2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001c30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c34:	604b      	str	r3, [r1, #4]
 8001c36:	e7d6      	b.n	8001be6 <HAL_SPI_Receive_DMA+0xa6>
  hspi->TxXferCount = 0U;

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
  {
    SPI_1LINE_RX(hspi);
 8001c38:	680b      	ldr	r3, [r1, #0]
 8001c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c3e:	600b      	str	r3, [r1, #0]
 8001c40:	e7c0      	b.n	8001bc4 <HAL_SPI_Receive_DMA+0x84>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c42:	684b      	ldr	r3, [r1, #4]
 8001c44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c48:	604b      	str	r3, [r1, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8001c4a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001c4e:	f013 0f01 	tst.w	r3, #1
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8001c52:	684b      	ldr	r3, [r1, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8001c54:	d109      	bne.n	8001c6a <HAL_SPI_Receive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8001c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c5a:	604b      	str	r3, [r1, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8001c5c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001c60:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8001c64:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8001c68:	e7bd      	b.n	8001be6 <HAL_SPI_Receive_DMA+0xa6>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8001c6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c6e:	604b      	str	r3, [r1, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8001c70:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001c74:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8001c7e:	e7b2      	b.n	8001be6 <HAL_SPI_Receive_DMA+0xa6>
 8001c80:	08001c99 	.word	0x08001c99
 8001c84:	08001cb9 	.word	0x08001cb9
 8001c88:	08001cdd 	.word	0x08001cdd

08001c8c <HAL_SPI_RxCpltCallback>:
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop

08001c90 <HAL_SPI_TxRxCpltCallback>:
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop

08001c94 <HAL_SPI_RxHalfCpltCallback>:
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop

08001c98 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001c98:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  HAL_SPI_RxHalfCpltCallback(hspi);
 8001c9a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001c9c:	f7ff fffa 	bl	8001c94 <HAL_SPI_RxHalfCpltCallback>
 8001ca0:	bd08      	pop	{r3, pc}
 8001ca2:	bf00      	nop

08001ca4 <HAL_SPI_TxRxHalfCpltCallback>:
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop

08001ca8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8001caa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001cac:	f7ff fffa 	bl	8001ca4 <HAL_SPI_TxRxHalfCpltCallback>
 8001cb0:	bd08      	pop	{r3, pc}
 8001cb2:	bf00      	nop

08001cb4 <HAL_SPI_ErrorCallback>:
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop

08001cb8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cba:	6a83      	ldr	r3, [r0, #40]	; 0x28

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001cbc:	6819      	ldr	r1, [r3, #0]
 8001cbe:	684a      	ldr	r2, [r1, #4]
 8001cc0:	f022 0203 	bic.w	r2, r2, #3
 8001cc4:	604a      	str	r2, [r1, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001cc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8001cc8:	2101      	movs	r1, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001cca:	f042 0210 	orr.w	r2, r2, #16
 8001cce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
  HAL_SPI_ErrorCallback(hspi);
 8001cd0:	4618      	mov	r0, r3

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
  hspi->State = HAL_SPI_STATE_READY;
 8001cd2:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8001cd6:	f7ff ffed 	bl	8001cb4 <HAL_SPI_ErrorCallback>
 8001cda:	bd08      	pop	{r3, pc}

08001cdc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b538      	push	{r3, r4, r5, lr}
 8001cde:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ce0:	6a84      	ldr	r4, [r0, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ce2:	f7fe fc2b 	bl	800053c <HAL_GetTick>

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001ce6:	682b      	ldr	r3, [r5, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	069b      	lsls	r3, r3, #26
 8001cec:	d418      	bmi.n	8001d20 <SPI_DMAReceiveCplt+0x44>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	6859      	ldr	r1, [r3, #4]
 8001cf2:	f021 0120 	bic.w	r1, r1, #32
 8001cf6:	6059      	str	r1, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001cf8:	6859      	ldr	r1, [r3, #4]
 8001cfa:	f021 0103 	bic.w	r1, r1, #3

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001cfe:	4602      	mov	r2, r0
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001d00:	6059      	str	r1, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001d02:	4620      	mov	r0, r4
 8001d04:	2164      	movs	r1, #100	; 0x64
 8001d06:	f7ff fe75 	bl	80019f4 <SPI_EndRxTransaction>
 8001d0a:	b108      	cbz	r0, 8001d10 <SPI_DMAReceiveCplt+0x34>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d0c:	2320      	movs	r3, #32
 8001d0e:	6623      	str	r3, [r4, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
    hspi->State = HAL_SPI_STATE_READY;
 8001d10:	2301      	movs	r3, #1
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
    }

    hspi->RxXferCount = 0U;
 8001d12:	2200      	movs	r2, #0
 8001d14:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8001d18:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d1c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d1e:	b91b      	cbnz	r3, 8001d28 <SPI_DMAReceiveCplt+0x4c>
    {
      HAL_SPI_ErrorCallback(hspi);
      return;
    }
  }
  HAL_SPI_RxCpltCallback(hspi);
 8001d20:	4620      	mov	r0, r4
 8001d22:	f7ff ffb3 	bl	8001c8c <HAL_SPI_RxCpltCallback>
 8001d26:	bd38      	pop	{r3, r4, r5, pc}
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
    {
      HAL_SPI_ErrorCallback(hspi);
 8001d28:	4620      	mov	r0, r4
 8001d2a:	f7ff ffc3 	bl	8001cb4 <HAL_SPI_ErrorCallback>
      return;
 8001d2e:	bd38      	pop	{r3, r4, r5, pc}

08001d30 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001d30:	b538      	push	{r3, r4, r5, lr}
 8001d32:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d34:	6a84      	ldr	r4, [r0, #40]	; 0x28
  uint32_t tickstart = 0U;
#if (USE_SPI_CRC != 0U)
  __IO int16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d36:	f7fe fc01 	bl	800053c <HAL_GetTick>

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001d3a:	682b      	ldr	r3, [r5, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	069b      	lsls	r3, r3, #26
 8001d40:	d41c      	bmi.n	8001d7c <SPI_DMATransmitReceiveCplt+0x4c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001d42:	6821      	ldr	r1, [r4, #0]
 8001d44:	684b      	ldr	r3, [r1, #4]
 8001d46:	f023 0320 	bic.w	r3, r3, #32
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001d4a:	4602      	mov	r2, r0

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001d4c:	604b      	str	r3, [r1, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001d4e:	4620      	mov	r0, r4
 8001d50:	2164      	movs	r1, #100	; 0x64
 8001d52:	f7ff fe2d 	bl	80019b0 <SPI_EndRxTxTransaction>
 8001d56:	b118      	cbz	r0, 8001d60 <SPI_DMATransmitReceiveCplt+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d58:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d5a:	f043 0320 	orr.w	r3, r3, #32
 8001d5e:	6623      	str	r3, [r4, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001d60:	6821      	ldr	r1, [r4, #0]
 8001d62:	684b      	ldr	r3, [r1, #4]

    hspi->TxXferCount = 0U;
 8001d64:	2200      	movs	r2, #0
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001d66:	f023 0303 	bic.w	r3, r3, #3

    hspi->TxXferCount = 0U;
    hspi->RxXferCount = 0U;
    hspi->State = HAL_SPI_STATE_READY;
 8001d6a:	2001      	movs	r0, #1
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001d6c:	604b      	str	r3, [r1, #4]

    hspi->TxXferCount = 0U;
 8001d6e:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8001d70:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8001d74:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d78:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d7a:	b91b      	cbnz	r3, 8001d84 <SPI_DMATransmitReceiveCplt+0x54>
    {
      HAL_SPI_ErrorCallback(hspi);
      return;
    }
  }
  HAL_SPI_TxRxCpltCallback(hspi);
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	f7ff ff87 	bl	8001c90 <HAL_SPI_TxRxCpltCallback>
 8001d82:	bd38      	pop	{r3, r4, r5, pc}
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
    {
      HAL_SPI_ErrorCallback(hspi);
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7ff ff95 	bl	8001cb4 <HAL_SPI_ErrorCallback>
      return;
 8001d8a:	bd38      	pop	{r3, r4, r5, pc}

08001d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d8c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d8e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d90:	688f      	ldr	r7, [r1, #8]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d92:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001d94:	4d17      	ldr	r5, [pc, #92]	; (8001df4 <TIM_OC1_SetConfig+0x68>)
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d96:	f024 0401 	bic.w	r4, r4, #1
 8001d9a:	6204      	str	r4, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d9c:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d9e:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001da0:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001da6:	f022 0202 	bic.w	r2, r2, #2
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001daa:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001dae:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001db0:	ea42 0207 	orr.w	r2, r2, r7

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001db4:	ea43 0306 	orr.w	r3, r3, r6
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001db8:	d00e      	beq.n	8001dd8 <TIM_OC1_SetConfig+0x4c>
 8001dba:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001dbe:	42a8      	cmp	r0, r5
 8001dc0:	d00a      	beq.n	8001dd8 <TIM_OC1_SetConfig+0x4c>
 8001dc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001dc6:	42a8      	cmp	r0, r5
 8001dc8:	d006      	beq.n	8001dd8 <TIM_OC1_SetConfig+0x4c>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001dca:	6849      	ldr	r1, [r1, #4]
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dcc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001dce:	6183      	str	r3, [r0, #24]
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001dd0:	bcf0      	pop	{r4, r5, r6, r7}

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001dd2:	6341      	str	r1, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dd4:	6202      	str	r2, [r0, #32]
}
 8001dd6:	4770      	bx	lr
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001dd8:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dda:	694e      	ldr	r6, [r1, #20]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ddc:	f022 0208 	bic.w	r2, r2, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001de0:	432a      	orrs	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001de2:	698d      	ldr	r5, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001de4:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001de8:	4335      	orrs	r5, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001dea:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dee:	432c      	orrs	r4, r5
 8001df0:	e7eb      	b.n	8001dca <TIM_OC1_SetConfig+0x3e>
 8001df2:	bf00      	nop
 8001df4:	40012c00 	.word	0x40012c00

08001df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001df8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001dfa:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001dfc:	688f      	ldr	r7, [r1, #8]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dfe:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e00:	4d17      	ldr	r5, [pc, #92]	; (8001e60 <TIM_OC3_SetConfig+0x68>)
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e02:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8001e06:	6204      	str	r4, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e08:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e0a:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e0c:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e0e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001e12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e16:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e1a:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001e1c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e20:	ea42 0206 	orr.w	r2, r2, r6
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e24:	d00c      	beq.n	8001e40 <TIM_OC3_SetConfig+0x48>
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001e26:	4d0f      	ldr	r5, [pc, #60]	; (8001e64 <TIM_OC3_SetConfig+0x6c>)
 8001e28:	42a8      	cmp	r0, r5
 8001e2a:	d010      	beq.n	8001e4e <TIM_OC3_SetConfig+0x56>
 8001e2c:	4d0e      	ldr	r5, [pc, #56]	; (8001e68 <TIM_OC3_SetConfig+0x70>)
 8001e2e:	42a8      	cmp	r0, r5
 8001e30:	d00d      	beq.n	8001e4e <TIM_OC3_SetConfig+0x56>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e32:	6849      	ldr	r1, [r1, #4]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e34:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e36:	61c2      	str	r2, [r0, #28]
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001e38:	bcf0      	pop	{r4, r5, r6, r7}

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e3a:	63c1      	str	r1, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e3c:	6203      	str	r3, [r0, #32]
}
 8001e3e:	4770      	bx	lr
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001e40:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001e46:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001e4e:	694e      	ldr	r6, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8001e50:	698d      	ldr	r5, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e52:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001e56:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8001e5a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8001e5e:	e7e8      	b.n	8001e32 <TIM_OC3_SetConfig+0x3a>
 8001e60:	40012c00 	.word	0x40012c00
 8001e64:	40014000 	.word	0x40014000
 8001e68:	40014400 	.word	0x40014400

08001e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e6e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001e70:	f8d1 e008 	ldr.w	lr, [r1, #8]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001e74:	680f      	ldr	r7, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001e76:	4e13      	ldr	r6, [pc, #76]	; (8001ec4 <TIM_OC4_SetConfig+0x58>)
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e78:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001e7c:	6204      	str	r4, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e7e:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e80:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e82:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e84:	f022 7380 	bic.w	r3, r2, #16777216	; 0x1000000
 8001e88:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001e8c:	f424 5200 	bic.w	r2, r4, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001e90:	42b0      	cmp	r0, r6
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8001e92:	ea42 320e 	orr.w	r2, r2, lr, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001e96:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001e9a:	d00c      	beq.n	8001eb6 <TIM_OC4_SetConfig+0x4a>
 8001e9c:	4c0a      	ldr	r4, [pc, #40]	; (8001ec8 <TIM_OC4_SetConfig+0x5c>)
 8001e9e:	42a0      	cmp	r0, r4
 8001ea0:	d009      	beq.n	8001eb6 <TIM_OC4_SetConfig+0x4a>
 8001ea2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ea6:	42a0      	cmp	r0, r4
 8001ea8:	d005      	beq.n	8001eb6 <TIM_OC4_SetConfig+0x4a>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001eaa:	6849      	ldr	r1, [r1, #4]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001eac:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001eae:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001eb0:	6401      	str	r1, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eb2:	6202      	str	r2, [r0, #32]
 8001eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001eb6:	694c      	ldr	r4, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001eb8:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001ebc:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
 8001ec0:	e7f3      	b.n	8001eaa <TIM_OC4_SetConfig+0x3e>
 8001ec2:	bf00      	nop
 8001ec4:	40012c00 	.word	0x40012c00
 8001ec8:	40014000 	.word	0x40014000

08001ecc <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001ecc:	6a02      	ldr	r2, [r0, #32]
 8001ece:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001ed2:	b4f0      	push	{r4, r5, r6, r7}
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8001ed4:	688f      	ldr	r7, [r1, #8]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ed6:	680c      	ldr	r4, [r1, #0]
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001ed8:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eda:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001edc:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001ede:	6d42      	ldr	r2, [r0, #84]	; 0x54
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ee0:	4e10      	ldr	r6, [pc, #64]	; (8001f24 <TIM_OC5_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001ee2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001ee6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001eea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001eee:	42b0      	cmp	r0, r6
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8001ef0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ef4:	ea42 0204 	orr.w	r2, r2, r4
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ef8:	d00d      	beq.n	8001f16 <TIM_OC5_SetConfig+0x4a>
 8001efa:	4c0b      	ldr	r4, [pc, #44]	; (8001f28 <TIM_OC5_SetConfig+0x5c>)
 8001efc:	42a0      	cmp	r0, r4
 8001efe:	d00a      	beq.n	8001f16 <TIM_OC5_SetConfig+0x4a>
 8001f00:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f04:	42a0      	cmp	r0, r4
 8001f06:	d006      	beq.n	8001f16 <TIM_OC5_SetConfig+0x4a>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001f08:	6849      	ldr	r1, [r1, #4]
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f0a:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001f0c:	6542      	str	r2, [r0, #84]	; 0x54
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001f0e:	bcf0      	pop	{r4, r5, r6, r7}

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001f10:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f12:	6203      	str	r3, [r0, #32]
}
 8001f14:	4770      	bx	lr
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8001f16:	694c      	ldr	r4, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001f18:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8001f1c:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
 8001f20:	e7f2      	b.n	8001f08 <TIM_OC5_SetConfig+0x3c>
 8001f22:	bf00      	nop
 8001f24:	40012c00 	.word	0x40012c00
 8001f28:	40014000 	.word	0x40014000

08001f2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001f2e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8001f30:	f8d1 e008 	ldr.w	lr, [r1, #8]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001f34:	680f      	ldr	r7, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f36:	4e13      	ldr	r6, [pc, #76]	; (8001f84 <TIM_OC6_SetConfig+0x58>)
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001f38:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
 8001f3c:	6204      	str	r4, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f3e:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f40:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001f42:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001f44:	f022 7380 	bic.w	r3, r2, #16777216	; 0x1000000
 8001f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001f4c:	f424 1200 	bic.w	r2, r4, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f50:	42b0      	cmp	r0, r6
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8001f52:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001f56:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f5a:	d00c      	beq.n	8001f76 <TIM_OC6_SetConfig+0x4a>
 8001f5c:	4c0a      	ldr	r4, [pc, #40]	; (8001f88 <TIM_OC6_SetConfig+0x5c>)
 8001f5e:	42a0      	cmp	r0, r4
 8001f60:	d009      	beq.n	8001f76 <TIM_OC6_SetConfig+0x4a>
 8001f62:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f66:	42a0      	cmp	r0, r4
 8001f68:	d005      	beq.n	8001f76 <TIM_OC6_SetConfig+0x4a>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001f6a:	6849      	ldr	r1, [r1, #4]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f6c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001f6e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001f70:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f72:	6202      	str	r2, [r0, #32]
 8001f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8001f76:	694c      	ldr	r4, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001f78:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8001f7c:	ea45 2584 	orr.w	r5, r5, r4, lsl #10
 8001f80:	e7f3      	b.n	8001f6a <TIM_OC6_SetConfig+0x3e>
 8001f82:	bf00      	nop
 8001f84:	40012c00 	.word	0x40012c00
 8001f88:	40014000 	.word	0x40014000

08001f8c <HAL_TIM_Base_Start>:

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001f8c:	6801      	ldr	r1, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001f8e:	2202      	movs	r2, #2
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f90:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001f92:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001f96:	680a      	ldr	r2, [r1, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001f98:	2401      	movs	r4, #1
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f9a:	4603      	mov	r3, r0

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001f9c:	4322      	orrs	r2, r4
 8001f9e:	600a      	str	r2, [r1, #0]
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001fa0:	2000      	movs	r0, #0

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001fa2:	f883 403d 	strb.w	r4, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8001fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_TIM_PWM_MspInit>:
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop

08001fb0 <HAL_TIM_PWM_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fb0:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001fb2:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001fb4:	6a18      	ldr	r0, [r3, #32]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001fb6:	fa02 f101 	lsl.w	r1, r2, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001fba:	ea20 0001 	bic.w	r0, r0, r1
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fbe:	b410      	push	{r4}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001fc0:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001fc2:	6a1a      	ldr	r2, [r3, #32]
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fc4:	4c0c      	ldr	r4, [pc, #48]	; (8001ff8 <HAL_TIM_PWM_Start+0x48>)

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001fc6:	4311      	orrs	r1, r2
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fc8:	42a3      	cmp	r3, r4

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001fca:	6219      	str	r1, [r3, #32]
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fcc:	d00e      	beq.n	8001fec <HAL_TIM_PWM_Start+0x3c>
 8001fce:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <HAL_TIM_PWM_Start+0x4c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00b      	beq.n	8001fec <HAL_TIM_PWM_Start+0x3c>
 8001fd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d007      	beq.n	8001fec <HAL_TIM_PWM_Start+0x3c>
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001fdc:	681a      	ldr	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001fde:	f85d 4b04 	ldr.w	r4, [sp], #4
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001fe2:	f042 0201 	orr.w	r2, r2, #1

  /* Return function status */
  return HAL_OK;
}
 8001fe6:	2000      	movs	r0, #0
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001fe8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001fea:	4770      	bx	lr
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ff2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ff4:	e7f2      	b.n	8001fdc <HAL_TIM_PWM_Start+0x2c>
 8001ff6:	bf00      	nop
 8001ff8:	40012c00 	.word	0x40012c00
 8001ffc:	40014000 	.word	0x40014000

08002000 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002000:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002004:	2b01      	cmp	r3, #1
 8002006:	d040      	beq.n	800208a <HAL_TIM_ConfigClockSource+0x8a>

  htim->State = HAL_TIM_STATE_BUSY;
 8002008:	2202      	movs	r2, #2

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800200a:	6803      	ldr	r3, [r0, #0]
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800200c:	b470      	push	{r4, r5, r6}
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);

  htim->State = HAL_TIM_STATE_BUSY;
 800200e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002012:	689d      	ldr	r5, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8002014:	680c      	ldr	r4, [r1, #0]
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002016:	4a5d      	ldr	r2, [pc, #372]	; (800218c <HAL_TIM_ConfigClockSource+0x18c>)
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8002018:	2c40      	cmp	r4, #64	; 0x40
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800201a:	ea02 0205 	and.w	r2, r2, r5
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 800201e:	f04f 0501 	mov.w	r5, #1
 8002022:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
 8002026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002028:	d079      	beq.n	800211e <HAL_TIM_ConfigClockSource+0x11e>
 800202a:	d918      	bls.n	800205e <HAL_TIM_ConfigClockSource+0x5e>
 800202c:	2c70      	cmp	r4, #112	; 0x70
 800202e:	d062      	beq.n	80020f6 <HAL_TIM_ConfigClockSource+0xf6>
 8002030:	d92d      	bls.n	800208e <HAL_TIM_ConfigClockSource+0x8e>
 8002032:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002036:	d057      	beq.n	80020e8 <HAL_TIM_ConfigClockSource+0xe8>
 8002038:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800203c:	d11c      	bne.n	8002078 <HAL_TIM_ConfigClockSource+0x78>
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 800203e:	689c      	ldr	r4, [r3, #8]
 8002040:	688a      	ldr	r2, [r1, #8]
 8002042:	684d      	ldr	r5, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002044:	68ce      	ldr	r6, [r1, #12]
 8002046:	432a      	orrs	r2, r5
 8002048:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
 800204c:	430a      	orrs	r2, r1
 800204e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002052:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800205a:	609a      	str	r2, [r3, #8]
    }
    break;
 800205c:	e00c      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 800205e:	2c10      	cmp	r4, #16
 8002060:	d032      	beq.n	80020c8 <HAL_TIM_ConfigClockSource+0xc8>
 8002062:	d938      	bls.n	80020d6 <HAL_TIM_ConfigClockSource+0xd6>
 8002064:	2c20      	cmp	r4, #32
 8002066:	d072      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x14e>
 8002068:	2c30      	cmp	r4, #48	; 0x30
 800206a:	d105      	bne.n	8002078 <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800206c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800206e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002072:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002076:	609a      	str	r2, [r3, #8]
  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002078:	2300      	movs	r3, #0
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 800207a:	2201      	movs	r2, #1
 800207c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002080:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8002084:	bc70      	pop	{r4, r5, r6}
  }
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
 8002086:	4618      	mov	r0, r3
}
 8002088:	4770      	bx	lr
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 800208a:	2002      	movs	r0, #2
 800208c:	4770      	bx	lr
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 800208e:	2c50      	cmp	r4, #80	; 0x50
 8002090:	d064      	beq.n	800215c <HAL_TIM_ConfigClockSource+0x15c>
 8002092:	2c60      	cmp	r4, #96	; 0x60
 8002094:	d1f0      	bne.n	8002078 <HAL_TIM_ConfigClockSource+0x78>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002096:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002098:	684d      	ldr	r5, [r1, #4]
 800209a:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800209c:	f024 0410 	bic.w	r4, r4, #16
 80020a0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020a2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80020a4:	6a1a      	ldr	r2, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020a6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 80020ae:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 80020b2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020b6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80020b8:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80020ba:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80020bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020c0:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	e7d7      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80020c8:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80020ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020ce:	f042 0217 	orr.w	r2, r2, #23
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	e7d0      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 80020d6:	2c00      	cmp	r4, #0
 80020d8:	d1ce      	bne.n	8002078 <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80020da:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80020dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020e0:	f042 0207 	orr.w	r2, r2, #7
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	e7c7      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x78>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020ee:	f022 0207 	bic.w	r2, r2, #7
 80020f2:	609a      	str	r2, [r3, #8]
    }
    break;
 80020f4:	e7c0      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x78>
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 80020f6:	689c      	ldr	r4, [r3, #8]
 80020f8:	688a      	ldr	r2, [r1, #8]
 80020fa:	684d      	ldr	r5, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020fc:	68ce      	ldr	r6, [r1, #12]
 80020fe:	432a      	orrs	r2, r5
 8002100:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
 8002104:	430a      	orrs	r2, r1
 8002106:	ea42 2206 	orr.w	r2, r2, r6, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800210a:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 800210c:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800210e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002112:	f022 0277 	bic.w	r2, r2, #119	; 0x77
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002116:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800211a:	609a      	str	r2, [r3, #8]
    }
    break;
 800211c:	e7ac      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x78>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800211e:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002120:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002122:	684e      	ldr	r6, [r1, #4]
 8002124:	68cd      	ldr	r5, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002126:	f024 0401 	bic.w	r4, r4, #1
 800212a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800212c:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800212e:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002132:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8002136:	4332      	orrs	r2, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002138:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800213c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800213e:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002140:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002142:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002146:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	e794      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x78>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800214e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002150:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002154:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	e78d      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x78>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800215c:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800215e:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002160:	684e      	ldr	r6, [r1, #4]
 8002162:	68cd      	ldr	r5, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002164:	f024 0401 	bic.w	r4, r4, #1
 8002168:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800216a:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800216c:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002170:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8002174:	4332      	orrs	r2, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002176:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800217a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800217c:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800217e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002180:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002184:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	e775      	b.n	8002078 <HAL_TIM_ConfigClockSource+0x78>
 800218c:	fffe0088 	.word	0xfffe0088

08002190 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002190:	4a26      	ldr	r2, [pc, #152]	; (800222c <TIM_Base_SetConfig+0x9c>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8002192:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002194:	4290      	cmp	r0, r2
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002196:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002198:	d034      	beq.n	8002204 <TIM_Base_SetConfig+0x74>
 800219a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800219e:	d014      	beq.n	80021ca <TIM_Base_SetConfig+0x3a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021a0:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80021a4:	4290      	cmp	r0, r2
 80021a6:	d014      	beq.n	80021d2 <TIM_Base_SetConfig+0x42>
 80021a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021ac:	4290      	cmp	r0, r2
 80021ae:	d010      	beq.n	80021d2 <TIM_Base_SetConfig+0x42>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80021b0:	694a      	ldr	r2, [r1, #20]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b2:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80021b4:	6809      	ldr	r1, [r1, #0]
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80021b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80021ba:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80021bc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021be:	62c4      	str	r4, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80021c0:	6281      	str	r1, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021c2:	2301      	movs	r3, #1
 80021c4:	6143      	str	r3, [r0, #20]
}
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	4770      	bx	lr
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80021ca:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80021d0:	4313      	orrs	r3, r2

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d2:	68ca      	ldr	r2, [r1, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80021d4:	694c      	ldr	r4, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021d6:	4d16      	ldr	r5, [pc, #88]	; (8002230 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d8:	688f      	ldr	r7, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80021da:	680e      	ldr	r6, [r1, #0]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021e0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80021e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80021e6:	4323      	orrs	r3, r4
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e8:	42a8      	cmp	r0, r5

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;

  TIMx->CR1 = tmpcr1;
 80021ea:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021ec:	62c7      	str	r7, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80021ee:	6286      	str	r6, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021f0:	d002      	beq.n	80021f8 <TIM_Base_SetConfig+0x68>
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <TIM_Base_SetConfig+0xa4>)
 80021f4:	4298      	cmp	r0, r3
 80021f6:	d1e4      	bne.n	80021c2 <TIM_Base_SetConfig+0x32>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021f8:	690b      	ldr	r3, [r1, #16]
 80021fa:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021fc:	2301      	movs	r3, #1
 80021fe:	6143      	str	r3, [r0, #20]
}
 8002200:	bcf0      	pop	{r4, r5, r6, r7}
 8002202:	4770      	bx	lr
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002204:	684c      	ldr	r4, [r1, #4]

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002206:	68ca      	ldr	r2, [r1, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002208:	694d      	ldr	r5, [r1, #20]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800220a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800220e:	431c      	orrs	r4, r3
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002210:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002214:	4322      	orrs	r2, r4
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002216:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800221a:	432a      	orrs	r2, r5

  TIMx->CR1 = tmpcr1;
 800221c:	6002      	str	r2, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800221e:	688b      	ldr	r3, [r1, #8]
 8002220:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002222:	680b      	ldr	r3, [r1, #0]
 8002224:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002226:	690b      	ldr	r3, [r1, #16]
 8002228:	6303      	str	r3, [r0, #48]	; 0x30
 800222a:	e7e7      	b.n	80021fc <TIM_Base_SetConfig+0x6c>
 800222c:	40012c00 	.word	0x40012c00
 8002230:	40014000 	.word	0x40014000
 8002234:	40014400 	.word	0x40014400

08002238 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002238:	b1b8      	cbz	r0, 800226a <HAL_TIM_Base_Init+0x32>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800223a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800223e:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002240:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002244:	4604      	mov	r4, r0
 8002246:	b15b      	cbz	r3, 8002260 <HAL_TIM_Base_Init+0x28>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002248:	2302      	movs	r3, #2
 800224a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800224e:	6820      	ldr	r0, [r4, #0]
 8002250:	1d21      	adds	r1, r4, #4
 8002252:	f7ff ff9d 	bl	8002190 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002256:	2301      	movs	r3, #1
 8002258:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 800225c:	2000      	movs	r0, #0
 800225e:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002260:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002264:	f001 fe78 	bl	8003f58 <HAL_TIM_Base_MspInit>
 8002268:	e7ee      	b.n	8002248 <HAL_TIM_Base_Init+0x10>
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800226a:	2001      	movs	r0, #1
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop

08002270 <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002270:	b1b8      	cbz	r0, 80022a2 <HAL_TIM_PWM_Init+0x32>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002272:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002276:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002278:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800227c:	4604      	mov	r4, r0
 800227e:	b15b      	cbz	r3, 8002298 <HAL_TIM_PWM_Init+0x28>
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002280:	2302      	movs	r3, #2
 8002282:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002286:	6820      	ldr	r0, [r4, #0]
 8002288:	1d21      	adds	r1, r4, #4
 800228a:	f7ff ff81 	bl	8002190 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800228e:	2301      	movs	r3, #1
 8002290:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8002294:	2000      	movs	r0, #0
 8002296:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002298:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800229c:	f7ff fe86 	bl	8001fac <HAL_TIM_PWM_MspInit>
 80022a0:	e7ee      	b.n	8002280 <HAL_TIM_PWM_Init+0x10>
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80022a2:	2001      	movs	r0, #1
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop

080022a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022aa:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 80022ac:	f8d1 e008 	ldr.w	lr, [r1, #8]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80022b0:	680f      	ldr	r7, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022b2:	4e17      	ldr	r6, [pc, #92]	; (8002310 <TIM_OC2_SetConfig+0x68>)
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022b4:	f024 0410 	bic.w	r4, r4, #16
 80022b8:	6204      	str	r4, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ba:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022bc:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022be:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022c0:	f022 7380 	bic.w	r3, r2, #16777216	; 0x1000000
 80022c4:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022c8:	f024 0220 	bic.w	r2, r4, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022cc:	42b0      	cmp	r0, r6
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 80022ce:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80022d2:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022d6:	d00b      	beq.n	80022f0 <TIM_OC2_SetConfig+0x48>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80022d8:	4c0e      	ldr	r4, [pc, #56]	; (8002314 <TIM_OC2_SetConfig+0x6c>)
 80022da:	42a0      	cmp	r0, r4
 80022dc:	d00f      	beq.n	80022fe <TIM_OC2_SetConfig+0x56>
 80022de:	4c0e      	ldr	r4, [pc, #56]	; (8002318 <TIM_OC2_SetConfig+0x70>)
 80022e0:	42a0      	cmp	r0, r4
 80022e2:	d00c      	beq.n	80022fe <TIM_OC2_SetConfig+0x56>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022e4:	6849      	ldr	r1, [r1, #4]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022e6:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022e8:	6183      	str	r3, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022ea:	6381      	str	r1, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ec:	6202      	str	r2, [r0, #32]
}
 80022ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80022f0:	68cc      	ldr	r4, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80022f6:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80022fe:	694e      	ldr	r6, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002300:	698c      	ldr	r4, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002302:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002306:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800230a:	ea45 0584 	orr.w	r5, r5, r4, lsl #2
 800230e:	e7e9      	b.n	80022e4 <TIM_OC2_SetConfig+0x3c>
 8002310:	40012c00 	.word	0x40012c00
 8002314:	40014000 	.word	0x40014000
 8002318:	40014400 	.word	0x40014400

0800231c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 800231c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800231e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002322:	2b01      	cmp	r3, #1
 8002324:	d02f      	beq.n	8002386 <HAL_TIM_PWM_ConfigChannel+0x6a>
 8002326:	460d      	mov	r5, r1

  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	2302      	movs	r3, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800232a:	2101      	movs	r1, #1
 800232c:	4604      	mov	r4, r0
 800232e:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002332:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  switch (Channel)
 8002336:	2a14      	cmp	r2, #20
 8002338:	d81e      	bhi.n	8002378 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800233a:	e8df f002 	tbb	[pc, r2]
 800233e:	1d39      	.short	0x1d39
 8002340:	1d4b1d1d 	.word	0x1d4b1d1d
 8002344:	1d5e1d1d 	.word	0x1d5e1d1d
 8002348:	1d0b1d1d 	.word	0x1d0b1d1d
 800234c:	1d701d1d 	.word	0x1d701d1d
 8002350:	1d1d      	.short	0x1d1d
 8002352:	26          	.byte	0x26
 8002353:	00          	.byte	0x00
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002354:	4629      	mov	r1, r5
 8002356:	6800      	ldr	r0, [r0, #0]
 8002358:	f7ff fd88 	bl	8001e6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800235c:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800235e:	6928      	ldr	r0, [r5, #16]

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002360:	69d9      	ldr	r1, [r3, #28]
 8002362:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002366:	61d9      	str	r1, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002368:	69d9      	ldr	r1, [r3, #28]
 800236a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800236e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002376:	61da      	str	r2, [r3, #28]

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8002378:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800237a:	2000      	movs	r0, #0

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 800237c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002380:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
 8002384:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002386:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8002388:	bd38      	pop	{r3, r4, r5, pc}
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800238a:	4629      	mov	r1, r5
 800238c:	6800      	ldr	r0, [r0, #0]
 800238e:	f7ff fdcd 	bl	8001f2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002392:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 8002394:	6928      	ldr	r0, [r5, #16]

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002396:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002398:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800239c:	6559      	str	r1, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800239e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80023a0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80023a4:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 80023a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023a8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 80023ae:	e7e3      	b.n	8002378 <HAL_TIM_PWM_ConfigChannel+0x5c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023b0:	4629      	mov	r1, r5
 80023b2:	6800      	ldr	r0, [r0, #0]
 80023b4:	f7ff fcea 	bl	8001d8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023b8:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023ba:	692a      	ldr	r2, [r5, #16]

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023bc:	6999      	ldr	r1, [r3, #24]
 80023be:	f041 0108 	orr.w	r1, r1, #8
 80023c2:	6199      	str	r1, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023c4:	6999      	ldr	r1, [r3, #24]
 80023c6:	f021 0104 	bic.w	r1, r1, #4
 80023ca:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023cc:	6999      	ldr	r1, [r3, #24]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	619a      	str	r2, [r3, #24]
    }
    break;
 80023d2:	e7d1      	b.n	8002378 <HAL_TIM_PWM_ConfigChannel+0x5c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023d4:	4629      	mov	r1, r5
 80023d6:	6800      	ldr	r0, [r0, #0]
 80023d8:	f7ff ff66 	bl	80022a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023dc:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80023de:	6928      	ldr	r0, [r5, #16]

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023e0:	6999      	ldr	r1, [r3, #24]
 80023e2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80023e6:	6199      	str	r1, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023e8:	6999      	ldr	r1, [r3, #24]
 80023ea:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80023ee:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80023f6:	619a      	str	r2, [r3, #24]
    }
    break;
 80023f8:	e7be      	b.n	8002378 <HAL_TIM_PWM_ConfigChannel+0x5c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023fa:	4629      	mov	r1, r5
 80023fc:	6800      	ldr	r0, [r0, #0]
 80023fe:	f7ff fcfb 	bl	8001df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002402:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002404:	692a      	ldr	r2, [r5, #16]

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002406:	69d9      	ldr	r1, [r3, #28]
 8002408:	f041 0108 	orr.w	r1, r1, #8
 800240c:	61d9      	str	r1, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800240e:	69d9      	ldr	r1, [r3, #28]
 8002410:	f021 0104 	bic.w	r1, r1, #4
 8002414:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002416:	69d9      	ldr	r1, [r3, #28]
 8002418:	430a      	orrs	r2, r1
 800241a:	61da      	str	r2, [r3, #28]
    }
    break;
 800241c:	e7ac      	b.n	8002378 <HAL_TIM_PWM_ConfigChannel+0x5c>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800241e:	4629      	mov	r1, r5
 8002420:	6800      	ldr	r0, [r0, #0]
 8002422:	f7ff fd53 	bl	8001ecc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002426:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002428:	692a      	ldr	r2, [r5, #16]

     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800242a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800242c:	f041 0108 	orr.w	r1, r1, #8
 8002430:	6559      	str	r1, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002432:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002434:	f021 0104 	bic.w	r1, r1, #4
 8002438:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800243a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800243c:	430a      	orrs	r2, r1
 800243e:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8002440:	e79a      	b.n	8002378 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002442:	bf00      	nop

08002444 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002444:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002448:	2b01      	cmp	r3, #1
 800244a:	d017      	beq.n	800247c <HAL_TIMEx_MasterConfigSynchronization+0x38>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800244c:	6803      	ldr	r3, [r0, #0]
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 800244e:	b470      	push	{r4, r5, r6}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002450:	4c0e      	ldr	r4, [pc, #56]	; (800248c <HAL_TIMEx_MasterConfigSynchronization+0x48>)
 8002452:	42a3      	cmp	r3, r4
 8002454:	4602      	mov	r2, r0

  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002456:	6858      	ldr	r0, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002458:	689e      	ldr	r6, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800245a:	d011      	beq.n	8002480 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800245c:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800245e:	688c      	ldr	r4, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002460:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002464:	f026 0180 	bic.w	r1, r6, #128	; 0x80
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002468:	4328      	orrs	r0, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800246a:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 800246c:	2400      	movs	r4, #0
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800246e:	6058      	str	r0, [r3, #4]
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
 8002470:	4620      	mov	r0, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002472:	6099      	str	r1, [r3, #8]

  __HAL_UNLOCK(htim);
 8002474:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8002478:	bc70      	pop	{r4, r5, r6}
 800247a:	4770      	bx	lr
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800247c:	2002      	movs	r0, #2
 800247e:	4770      	bx	lr
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002480:	684c      	ldr	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002482:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002486:	4320      	orrs	r0, r4
 8002488:	e7e8      	b.n	800245c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800248a:	bf00      	nop
 800248c:	40012c00 	.word	0x40012c00

08002490 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002492:	f890 4071 	ldrb.w	r4, [r0, #113]	; 0x71
 8002496:	2c20      	cmp	r4, #32
 8002498:	d001      	beq.n	800249e <HAL_UART_Transmit_DMA+0xe>
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800249a:	2002      	movs	r0, #2
  }
}
 800249c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
 800249e:	b361      	cbz	r1, 80024fa <HAL_UART_Transmit_DMA+0x6a>
 80024a0:	b35a      	cbz	r2, 80024fa <HAL_UART_Transmit_DMA+0x6a>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80024a2:	f890 4070 	ldrb.w	r4, [r0, #112]	; 0x70
 80024a6:	2c01      	cmp	r4, #1
 80024a8:	d0f7      	beq.n	800249a <HAL_UART_Transmit_DMA+0xa>
 80024aa:	4604      	mov	r4, r0
 80024ac:	2601      	movs	r6, #1
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
    
    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80024ae:	6e80      	ldr	r0, [r0, #104]	; 0x68
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80024b0:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
 80024b4:	4613      	mov	r3, r2
    
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b6:	2500      	movs	r5, #0
    
    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
    
    /* Enable the UART transmit DMA channel */
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80024b8:	6822      	ldr	r2, [r4, #0]
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;
 80024ba:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024be:	2621      	movs	r6, #33	; 0x21
    
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c0:	6765      	str	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
    
    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80024c2:	f8df e044 	ldr.w	lr, [pc, #68]	; 8002508 <HAL_UART_Transmit_DMA+0x78>
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024c6:	f884 6071 	strb.w	r6, [r4, #113]	; 0x71
    
    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80024ca:	4f0d      	ldr	r7, [pc, #52]	; (8002500 <HAL_UART_Transmit_DMA+0x70>)
    
    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80024cc:	4e0d      	ldr	r6, [pc, #52]	; (8002504 <HAL_UART_Transmit_DMA+0x74>)
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
 80024ce:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pTxBuffPtr  = pData;
 80024d2:	64e1      	str	r1, [r4, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
    
    /* Enable the UART transmit DMA channel */
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80024d4:	3228      	adds	r2, #40	; 0x28
    
    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
    
    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80024d6:	6385      	str	r5, [r0, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
    
    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80024d8:	f8c0 e02c 	str.w	lr, [r0, #44]	; 0x2c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80024dc:	6307      	str	r7, [r0, #48]	; 0x30
    
    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80024de:	6346      	str	r6, [r0, #52]	; 0x34
    
    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
    
    /* Enable the UART transmit DMA channel */
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80024e0:	f7fe f91e 	bl	8000720 <HAL_DMA_Start_IT>
    
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	2240      	movs	r2, #64	; 0x40
 80024e8:	621a      	str	r2, [r3, #32]
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024ea:	689a      	ldr	r2, [r3, #8]
    
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024ec:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    
    return HAL_OK;
 80024f4:	4628      	mov	r0, r5
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
    
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024f6:	609a      	str	r2, [r3, #8]
    
    return HAL_OK;
 80024f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return HAL_ERROR;
 80024fa:	2001      	movs	r0, #1
 80024fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024fe:	bf00      	nop
 8002500:	080025c5 	.word	0x080025c5
 8002504:	08002621 	.word	0x08002621
 8002508:	08002595 	.word	0x08002595

0800250c <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800250e:	f890 4072 	ldrb.w	r4, [r0, #114]	; 0x72
 8002512:	2c20      	cmp	r4, #32
 8002514:	d001      	beq.n	800251a <HAL_UART_Receive_DMA+0xe>
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002516:	2002      	movs	r0, #2
  }
}
 8002518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
 800251a:	2900      	cmp	r1, #0
 800251c:	d030      	beq.n	8002580 <HAL_UART_Receive_DMA+0x74>
 800251e:	2a00      	cmp	r2, #0
 8002520:	d02e      	beq.n	8002580 <HAL_UART_Receive_DMA+0x74>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002522:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002526:	2b01      	cmp	r3, #1
 8002528:	d0f5      	beq.n	8002516 <HAL_UART_Receive_DMA+0xa>
 800252a:	4604      	mov	r4, r0
 800252c:	2701      	movs	r7, #1
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
    
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800252e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8002530:	4e14      	ldr	r6, [pc, #80]	; (8002584 <HAL_UART_Receive_DMA+0x78>)
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002532:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002536:	2500      	movs	r5, #0
 8002538:	4613      	mov	r3, r2
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800253a:	2722      	movs	r7, #34	; 0x22
 800253c:	460a      	mov	r2, r1
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 800253e:	6821      	ldr	r1, [r4, #0]
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
 8002540:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8002542:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002546:	6765      	str	r5, [r4, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002548:	f884 7072 	strb.w	r7, [r4, #114]	; 0x72
    
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800254c:	4f0e      	ldr	r7, [pc, #56]	; (8002588 <HAL_UART_Receive_DMA+0x7c>)
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
    
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800254e:	62c6      	str	r6, [r0, #44]	; 0x2c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002550:	4e0e      	ldr	r6, [pc, #56]	; (800258c <HAL_UART_Receive_DMA+0x80>)
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002552:	6385      	str	r5, [r0, #56]	; 0x38
    
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002554:	6307      	str	r7, [r0, #48]	; 0x30
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002556:	6346      	str	r6, [r0, #52]	; 0x34
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
 8002558:	3124      	adds	r1, #36	; 0x24
 800255a:	f7fe f8e1 	bl	8000720 <HAL_DMA_Start_IT>
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
    
    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800255e:	6823      	ldr	r3, [r4, #0]
    
    /* Enable the DMA channel */
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size);
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002560:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    
    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800256a:	601a      	str	r2, [r3, #0]
    
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	609a      	str	r2, [r3, #8]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    
    return HAL_OK;
 800257a:	4628      	mov	r0, r5
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800257c:	609a      	str	r2, [r3, #8]
    
    return HAL_OK;
 800257e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return HAL_ERROR;
 8002580:	2001      	movs	r0, #1
 8002582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002584:	080025d5 	.word	0x080025d5
 8002588:	08002611 	.word	0x08002611
 800258c:	08002621 	.word	0x08002621

08002590 <HAL_UART_TxCpltCallback>:
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop

08002594 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002594:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8002596:	6803      	ldr	r3, [r0, #0]
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002598:	6a80      	ldr	r0, [r0, #40]	; 0x28
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f013 0320 	ands.w	r3, r3, #32
 80025a0:	d10b      	bne.n	80025ba <UART_DMATransmitCplt+0x26>
  {  
    huart->TxXferCount = 0U;
    
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80025a2:	6802      	ldr	r2, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
  {  
    huart->TxXferCount = 0U;
 80025a4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80025a8:	6893      	ldr	r3, [r2, #8]
 80025aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ae:	6093      	str	r3, [r2, #8]
    
    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80025b0:	6813      	ldr	r3, [r2, #0]
 80025b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	bd08      	pop	{r3, pc}
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 80025ba:	f7ff ffe9 	bl	8002590 <HAL_UART_TxCpltCallback>
 80025be:	bd08      	pop	{r3, pc}

080025c0 <HAL_UART_TxHalfCpltCallback>:
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop

080025c4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025c4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  HAL_UART_TxHalfCpltCallback(huart);
 80025c6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80025c8:	f7ff fffa 	bl	80025c0 <HAL_UART_TxHalfCpltCallback>
 80025cc:	bd08      	pop	{r3, pc}
 80025ce:	bf00      	nop

080025d0 <HAL_UART_RxCpltCallback>:
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop

080025d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80025d4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80025d6:	6803      	ldr	r3, [r0, #0]
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80025d8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f013 0320 	ands.w	r3, r3, #32
 80025e0:	d111      	bne.n	8002606 <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;
    
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025e2:	6802      	ldr	r2, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
  {
    huart->RxXferCount = 0U;
 80025e4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025e8:	6813      	ldr	r3, [r2, #0]
 80025ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ee:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f0:	6893      	ldr	r3, [r2, #8]
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	6093      	str	r3, [r2, #8]
    
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f8:	6893      	ldr	r3, [r2, #8]
    
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025fa:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
    
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002600:	6093      	str	r3, [r2, #8]
    
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002602:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
  }
  
  HAL_UART_RxCpltCallback(huart);
 8002606:	f7ff ffe3 	bl	80025d0 <HAL_UART_RxCpltCallback>
 800260a:	bd08      	pop	{r3, pc}

0800260c <HAL_UART_RxHalfCpltCallback>:
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop

08002610 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002610:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  HAL_UART_RxHalfCpltCallback(huart);
 8002612:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002614:	f7ff fffa 	bl	800260c <HAL_UART_RxHalfCpltCallback>
 8002618:	bd08      	pop	{r3, pc}
 800261a:	bf00      	nop

0800261c <HAL_UART_ErrorCallback>:
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop

08002620 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002620:	6a80      	ldr	r0, [r0, #40]	; 0x28
  
  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002622:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002626:	2b21      	cmp	r3, #33	; 0x21
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002628:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 800262a:	d01e      	beq.n	800266a <UART_DMAError+0x4a>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }
  
  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800262c:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8002630:	2b22      	cmp	r3, #34	; 0x22
 8002632:	d006      	beq.n	8002642 <UART_DMAError+0x22>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }
  
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002634:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002636:	f043 0310 	orr.w	r3, r3, #16
 800263a:	6743      	str	r3, [r0, #116]	; 0x74
  HAL_UART_ErrorCallback(huart);
 800263c:	f7ff ffee 	bl	800261c <HAL_UART_ErrorCallback>
 8002640:	bd10      	pop	{r4, pc}
    UART_EndTxTransfer(huart);
  }
  
  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8002642:	6803      	ldr	r3, [r0, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	0652      	lsls	r2, r2, #25
 8002648:	d5f4      	bpl.n	8002634 <UART_DMAError+0x14>
  {
    huart->RxXferCount = 0U;
 800264a:	2100      	movs	r1, #0
 800264c:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002656:	601a      	str	r2, [r3, #0]
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002658:	689a      	ldr	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800265a:	2420      	movs	r4, #32
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800265c:	f022 0201 	bic.w	r2, r2, #1
 8002660:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002662:	6601      	str	r1, [r0, #96]	; 0x60
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002664:	f880 4072 	strb.w	r4, [r0, #114]	; 0x72
 8002668:	e7e4      	b.n	8002634 <UART_DMAError+0x14>
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800266a:	6803      	ldr	r3, [r0, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	0611      	lsls	r1, r2, #24
 8002670:	d5dc      	bpl.n	800262c <UART_DMAError+0xc>
  {
    huart->TxXferCount = 0U;
 8002672:	2200      	movs	r2, #0
 8002674:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
{
  /* Disable TXEIE and TCIE interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002678:	681a      	ldr	r2, [r3, #0]
#endif

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800267a:	2120      	movs	r1, #32
{
  /* Disable TXEIE and TCIE interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800267c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002680:	601a      	str	r2, [r3, #0]
#endif

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002682:	f880 1071 	strb.w	r1, [r0, #113]	; 0x71
 8002686:	e7d1      	b.n	800262c <UART_DMAError+0xc>

08002688 <HAL_UART_IRQHandler>:
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002688:	6803      	ldr	r3, [r0, #0]
 800268a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800268c:	6819      	ldr	r1, [r3, #0]
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800268e:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
  uint32_t errorflags;
  
  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
  if (errorflags == RESET)
 8002690:	0716      	lsls	r6, r2, #28
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002692:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002694:	689d      	ldr	r5, [r3, #8]
  uint32_t errorflags;
  
  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
  if (errorflags == RESET)
 8002696:	d04e      	beq.n	8002736 <HAL_UART_IRQHandler+0xae>
  if(   (errorflags != RESET)
     && (   (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
         ||  ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))) )
#else
  if(   (errorflags != RESET)
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002698:	f015 0001 	ands.w	r0, r5, #1
 800269c:	d055      	beq.n	800274a <HAL_UART_IRQHandler+0xc2>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
#endif
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800269e:	07d6      	lsls	r6, r2, #31
 80026a0:	d507      	bpl.n	80026b2 <HAL_UART_IRQHandler+0x2a>
 80026a2:	05cd      	lsls	r5, r1, #23
 80026a4:	d505      	bpl.n	80026b2 <HAL_UART_IRQHandler+0x2a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026a6:	2501      	movs	r5, #1
 80026a8:	621d      	str	r5, [r3, #32]
      
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026aa:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80026ac:	f045 0501 	orr.w	r5, r5, #1
 80026b0:	6765      	str	r5, [r4, #116]	; 0x74
    }
    
    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026b2:	0796      	lsls	r6, r2, #30
 80026b4:	d577      	bpl.n	80027a6 <HAL_UART_IRQHandler+0x11e>
 80026b6:	b138      	cbz	r0, 80026c8 <HAL_UART_IRQHandler+0x40>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026b8:	2502      	movs	r5, #2
 80026ba:	621d      	str	r5, [r3, #32]
      
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026bc:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80026be:	f045 0504 	orr.w	r5, r5, #4
 80026c2:	6765      	str	r5, [r4, #116]	; 0x74
    }
    
    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026c4:	0755      	lsls	r5, r2, #29
 80026c6:	d472      	bmi.n	80027ae <HAL_UART_IRQHandler+0x126>
#if defined(USART_CR1_FIFOEN)
    if(   ((isrflags & USART_ISR_ORE) != RESET)
       &&(  ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)))
#else
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 80026c8:	0715      	lsls	r5, r2, #28
 80026ca:	d503      	bpl.n	80026d4 <HAL_UART_IRQHandler+0x4c>
       &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 80026cc:	068e      	lsls	r6, r1, #26
 80026ce:	d475      	bmi.n	80027bc <HAL_UART_IRQHandler+0x134>
 80026d0:	2800      	cmp	r0, #0
 80026d2:	d173      	bne.n	80027bc <HAL_UART_IRQHandler+0x134>
      
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
    }
    
    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026d4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80026d6:	2800      	cmp	r0, #0
 80026d8:	d02c      	beq.n	8002734 <HAL_UART_IRQHandler+0xac>
#if defined(USART_CR1_FIFOEN)
      if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
         && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
#else
      if(((isrflags & USART_ISR_RXNE) != RESET)
 80026da:	0695      	lsls	r5, r2, #26
 80026dc:	d506      	bpl.n	80026ec <HAL_UART_IRQHandler+0x64>
         && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026de:	0688      	lsls	r0, r1, #26
 80026e0:	d504      	bpl.n	80026ec <HAL_UART_IRQHandler+0x64>
#endif
      {
        if (huart->RxISR != NULL) {huart->RxISR(huart);}
 80026e2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80026e4:	b112      	cbz	r2, 80026ec <HAL_UART_IRQHandler+0x64>
 80026e6:	4620      	mov	r0, r4
 80026e8:	4790      	blx	r2
 80026ea:	6823      	ldr	r3, [r4, #0]
      }
      
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80026ec:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80026ee:	0711      	lsls	r1, r2, #28
 80026f0:	d403      	bmi.n	80026fa <HAL_UART_IRQHandler+0x72>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80026f2:	689a      	ldr	r2, [r3, #8]
        if (huart->RxISR != NULL) {huart->RxISR(huart);}
      }
      
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80026f4:	f012 0540 	ands.w	r5, r2, #64	; 0x40
 80026f8:	d070      	beq.n	80027dc <HAL_UART_IRQHandler+0x154>
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002700:	601a      	str	r2, [r3, #0]
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002702:	689a      	ldr	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002704:	2120      	movs	r1, #32
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002706:	f022 0201 	bic.w	r2, r2, #1
 800270a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800270c:	f884 1072 	strb.w	r1, [r4, #114]	; 0x72
        Set the UART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002710:	689a      	ldr	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002712:	2100      	movs	r1, #0
        Set the UART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002714:	0652      	lsls	r2, r2, #25

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002716:	6621      	str	r1, [r4, #96]	; 0x60
        Set the UART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002718:	d557      	bpl.n	80027ca <HAL_UART_IRQHandler+0x142>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800271a:	689a      	ldr	r2, [r3, #8]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800271c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800271e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002722:	609a      	str	r2, [r3, #8]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002724:	2800      	cmp	r0, #0
 8002726:	d050      	beq.n	80027ca <HAL_UART_IRQHandler+0x142>
          {
            /* Set the UART DMA Abort callback : 
            will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002728:	4b2f      	ldr	r3, [pc, #188]	; (80027e8 <HAL_UART_IRQHandler+0x160>)
 800272a:	6383      	str	r3, [r0, #56]	; 0x38
            
            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800272c:	f7fe f838 	bl	80007a0 <HAL_DMA_Abort_IT>
 8002730:	2800      	cmp	r0, #0
 8002732:	d14e      	bne.n	80027d2 <HAL_UART_IRQHandler+0x14a>
 8002734:	bd70      	pop	{r4, r5, r6, pc}
#if defined(USART_CR1_FIFOEN)
    if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
       && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
           || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
#else
    if(((isrflags & USART_ISR_RXNE) != RESET)
 8002736:	0696      	lsls	r6, r2, #26
 8002738:	d50a      	bpl.n	8002750 <HAL_UART_IRQHandler+0xc8>
       && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800273a:	068e      	lsls	r6, r1, #26
 800273c:	d508      	bpl.n	8002750 <HAL_UART_IRQHandler+0xc8>
#endif
    {
      if (huart->RxISR != NULL) {huart->RxISR(huart);}
 800273e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f7      	beq.n	8002734 <HAL_UART_IRQHandler+0xac>
  {
    HAL_UARTEx_RxFifoFullCallback(huart);
    return;
  }
#endif
}
 8002744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#else
  if(((isrflags & USART_ISR_TXE) != RESET)
     && ((cr1its & USART_CR1_TXEIE) != RESET))
#endif
  {
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 8002748:	4718      	bx	r3
     && (   (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
         ||  ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))) )
#else
  if(   (errorflags != RESET)
     && (   ((cr3its & USART_CR3_EIE) != RESET)
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 800274a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800274e:	d1a6      	bne.n	800269e <HAL_UART_IRQHandler+0x16>
    return;
    
  } /* End if some error occurs */
  
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002750:	02d6      	lsls	r6, r2, #11
 8002752:	d408      	bmi.n	8002766 <HAL_UART_IRQHandler+0xde>
#if defined(USART_CR1_FIFOEN)
  if(((isrflags & USART_ISR_TXE_TXFNF) != RESET) 
     && (   ((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
#else
  if(((isrflags & USART_ISR_TXE) != RESET)
 8002754:	0616      	lsls	r6, r2, #24
 8002756:	d515      	bpl.n	8002784 <HAL_UART_IRQHandler+0xfc>
     && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002758:	060d      	lsls	r5, r1, #24
 800275a:	d513      	bpl.n	8002784 <HAL_UART_IRQHandler+0xfc>
#endif
  {
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 800275c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0e8      	beq.n	8002734 <HAL_UART_IRQHandler+0xac>
 8002762:	4620      	mov	r0, r4
 8002764:	e7ee      	b.n	8002744 <HAL_UART_IRQHandler+0xbc>
    return;
    
  } /* End if some error occurs */
  
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002766:	0268      	lsls	r0, r5, #9
 8002768:	d5f4      	bpl.n	8002754 <HAL_UART_IRQHandler+0xcc>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 800276a:	2220      	movs	r2, #32
  } /* End if some error occurs */
  
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800276c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8002770:	6219      	str	r1, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
    huart->RxState = HAL_UART_STATE_READY;
    HAL_UARTEx_WakeupCallback(huart);
 8002772:	4620      	mov	r0, r4
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 8002774:	f884 2071 	strb.w	r2, [r4, #113]	; 0x71
    huart->RxState = HAL_UART_STATE_READY;
 8002778:	f884 2072 	strb.w	r2, [r4, #114]	; 0x72
  {
    HAL_UARTEx_RxFifoFullCallback(huart);
    return;
  }
#endif
}
 800277c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
    huart->RxState = HAL_UART_STATE_READY;
    HAL_UARTEx_WakeupCallback(huart);
 8002780:	f000 baa8 	b.w	8002cd4 <HAL_UARTEx_WakeupCallback>
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
    return;
  }
  
  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002784:	0650      	lsls	r0, r2, #25
 8002786:	d5d5      	bpl.n	8002734 <HAL_UART_IRQHandler+0xac>
 8002788:	064a      	lsls	r2, r1, #25
 800278a:	d5d3      	bpl.n	8002734 <HAL_UART_IRQHandler+0xac>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800278c:	681a      	ldr	r2, [r3, #0]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800278e:	2520      	movs	r5, #32
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
  
  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002794:	2100      	movs	r1, #0
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002796:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
  
  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
  
  HAL_UART_TxCpltCallback(huart);
 8002798:	4620      	mov	r0, r4
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800279a:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
  
  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800279e:	6661      	str	r1, [r4, #100]	; 0x64
  
  HAL_UART_TxCpltCallback(huart);
 80027a0:	f7ff fef6 	bl	8002590 <HAL_UART_TxCpltCallback>
 80027a4:	e7c6      	b.n	8002734 <HAL_UART_IRQHandler+0xac>
      
      huart->ErrorCode |= HAL_UART_ERROR_FE;
    }
    
    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027a6:	0756      	lsls	r6, r2, #29
 80027a8:	d58e      	bpl.n	80026c8 <HAL_UART_IRQHandler+0x40>
 80027aa:	2800      	cmp	r0, #0
 80027ac:	d08c      	beq.n	80026c8 <HAL_UART_IRQHandler+0x40>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027ae:	2504      	movs	r5, #4
 80027b0:	621d      	str	r5, [r3, #32]
      
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027b2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80027b4:	f045 0502 	orr.w	r5, r5, #2
 80027b8:	6765      	str	r5, [r4, #116]	; 0x74
 80027ba:	e785      	b.n	80026c8 <HAL_UART_IRQHandler+0x40>
    if(   ((isrflags & USART_ISR_ORE) != RESET)
       &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
             ((cr3its & USART_CR3_EIE) != RESET)))
#endif
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027bc:	2008      	movs	r0, #8
 80027be:	6218      	str	r0, [r3, #32]
      
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027c0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80027c2:	f040 0008 	orr.w	r0, r0, #8
 80027c6:	6760      	str	r0, [r4, #116]	; 0x74
 80027c8:	e784      	b.n	80026d4 <HAL_UART_IRQHandler+0x4c>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff ff26 	bl	800261c <HAL_UART_ErrorCallback>
 80027d0:	bd70      	pop	{r4, r5, r6, pc}
            
            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027d2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
  {
    HAL_UARTEx_RxFifoFullCallback(huart);
    return;
  }
#endif
}
 80027d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            
            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80027da:	4718      	bx	r3
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
        Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80027dc:	4620      	mov	r0, r4
 80027de:	f7ff ff1d 	bl	800261c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e2:	6765      	str	r5, [r4, #116]	; 0x74
 80027e4:	bd70      	pop	{r4, r5, r6, pc}
 80027e6:	bf00      	nop
 80027e8:	080027ed 	.word	0x080027ed

080027ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027ec:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80027ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80027f0:	2200      	movs	r2, #0
 80027f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
  
  HAL_UART_ErrorCallback(huart);
 80027f6:	4618      	mov	r0, r3
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  huart->RxXferCount = 0U;
  huart->TxXferCount = 0U;
 80027f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  
  HAL_UART_ErrorCallback(huart);
 80027fc:	f7ff ff0e 	bl	800261c <HAL_UART_ErrorCallback>
 8002800:	bd08      	pop	{r3, pc}
 8002802:	bf00      	nop

08002804 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002806:	4604      	mov	r4, r0
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002808:	6887      	ldr	r7, [r0, #8]
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	6900      	ldr	r0, [r0, #16]
 800280e:	6961      	ldr	r1, [r4, #20]
 8002810:	681e      	ldr	r6, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002812:	69e5      	ldr	r5, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002814:	4aa8      	ldr	r2, [pc, #672]	; (8002ab8 <UART_SetConfig+0x2b4>)
 8002816:	4338      	orrs	r0, r7
 8002818:	4301      	orrs	r1, r0
 800281a:	4329      	orrs	r1, r5
 800281c:	4032      	ands	r2, r6
 800281e:	430a      	orrs	r2, r1
 8002820:	601a      	str	r2, [r3, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002822:	6858      	ldr	r0, [r3, #4]
 8002824:	68e1      	ldr	r1, [r4, #12]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002826:	4aa5      	ldr	r2, [pc, #660]	; (8002abc <UART_SetConfig+0x2b8>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002828:	69a6      	ldr	r6, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800282a:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 800282e:	4301      	orrs	r1, r0
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002830:	4293      	cmp	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002832:	6059      	str	r1, [r3, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002834:	d012      	beq.n	800285c <UART_SetConfig+0x58>
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002836:	6899      	ldr	r1, [r3, #8]
 8002838:	6a22      	ldr	r2, [r4, #32]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800283a:	48a1      	ldr	r0, [pc, #644]	; (8002ac0 <UART_SetConfig+0x2bc>)
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800283c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8002840:	4332      	orrs	r2, r6
 8002842:	430a      	orrs	r2, r1
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002844:	4283      	cmp	r3, r0
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002846:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002848:	d040      	beq.n	80028cc <UART_SetConfig+0xc8>
 800284a:	4a9e      	ldr	r2, [pc, #632]	; (8002ac4 <UART_SetConfig+0x2c0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	f000 812a 	beq.w	8002aa6 <UART_SetConfig+0x2a2>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8002852:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002854:	2300      	movs	r3, #0
 8002856:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002858:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 800285a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800285c:	689a      	ldr	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800285e:	499a      	ldr	r1, [pc, #616]	; (8002ac8 <UART_SetConfig+0x2c4>)
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002860:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002864:	4332      	orrs	r2, r6
 8002866:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002868:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
 800286c:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8002870:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002874:	f000 80c4 	beq.w	8002a00 <UART_SetConfig+0x1fc>
 8002878:	f240 80b9 	bls.w	80029ee <UART_SetConfig+0x1ea>
 800287c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002880:	d064      	beq.n	800294c <UART_SetConfig+0x148>
 8002882:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8002886:	d1e4      	bne.n	8002852 <UART_SetConfig+0x4e>
 8002888:	2508      	movs	r5, #8
      break;
    case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
#else
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800288a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    
    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800288e:	6862      	ldr	r2, [r4, #4]
 8002890:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002894:	4283      	cmp	r3, r0
 8002896:	d8dc      	bhi.n	8002852 <UART_SetConfig+0x4e>
 8002898:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800289c:	d8d9      	bhi.n	8002852 <UART_SetConfig+0x4e>
      {
        ret = HAL_ERROR;
      }
      else
      {
        switch (clocksource)
 800289e:	2d08      	cmp	r5, #8
 80028a0:	d8d7      	bhi.n	8002852 <UART_SetConfig+0x4e>
 80028a2:	a301      	add	r3, pc, #4	; (adr r3, 80028a8 <UART_SetConfig+0xa4>)
 80028a4:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 80028a8:	080029e9 	.word	0x080029e9
 80028ac:	08002853 	.word	0x08002853
 80028b0:	080029cf 	.word	0x080029cf
 80028b4:	08002853 	.word	0x08002853
 80028b8:	080029af 	.word	0x080029af
 80028bc:	08002853 	.word	0x08002853
 80028c0:	08002853 	.word	0x08002853
 80028c4:	08002853 	.word	0x08002853
 80028c8:	0800297d 	.word	0x0800297d
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028cc:	4b7e      	ldr	r3, [pc, #504]	; (8002ac8 <UART_SetConfig+0x2c4>)
 80028ce:	4a7f      	ldr	r2, [pc, #508]	; (8002acc <UART_SetConfig+0x2c8>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	5cd3      	ldrb	r3, [r2, r3]
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028da:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80028de:	f040 8096 	bne.w	8002a0e <UART_SetConfig+0x20a>
  {
    switch (clocksource)
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d8b5      	bhi.n	8002852 <UART_SetConfig+0x4e>
 80028e6:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <UART_SetConfig+0xe8>)
 80028e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ec:	08002947 	.word	0x08002947
 80028f0:	08002911 	.word	0x08002911
 80028f4:	08002953 	.word	0x08002953
 80028f8:	08002853 	.word	0x08002853
 80028fc:	08002977 	.word	0x08002977
 8002900:	08002853 	.word	0x08002853
 8002904:	08002853 	.word	0x08002853
 8002908:	08002853 	.word	0x08002853
 800290c:	08002967 	.word	0x08002967
      break;
    case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002910:	f7fe fd18 	bl	8001344 <HAL_RCC_GetPCLK2Freq>
 8002914:	6863      	ldr	r3, [r4, #4]
 8002916:	085a      	lsrs	r2, r3, #1
 8002918:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800291c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002920:	b29b      	uxth	r3, r3
      ret = HAL_ERROR;
      break;
    }
    
    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002922:	f1a3 0110 	sub.w	r1, r3, #16
 8002926:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800292a:	4291      	cmp	r1, r2
 800292c:	d891      	bhi.n	8002852 <UART_SetConfig+0x4e>
    {
      brrtemp = usartdiv & 0xFFF0U;
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800292e:	f3c3 0142 	ubfx	r1, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002932:	6822      	ldr	r2, [r4, #0]
    
    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
    {
      brrtemp = usartdiv & 0xFFF0U;
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002934:	f023 030f 	bic.w	r3, r3, #15
      huart->Instance->BRR = brrtemp;
 8002938:	430b      	orrs	r3, r1
 800293a:	60d3      	str	r3, [r2, #12]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800293c:	2300      	movs	r3, #0
 800293e:	2000      	movs	r0, #0
 8002940:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002942:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 8002944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
    case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002946:	f7fe fced 	bl	8001324 <HAL_RCC_GetPCLK1Freq>
 800294a:	e7e3      	b.n	8002914 <UART_SetConfig+0x110>
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800294c:	2502      	movs	r5, #2
      break;
    case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
#else
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800294e:	4860      	ldr	r0, [pc, #384]	; (8002ad0 <UART_SetConfig+0x2cc>)
 8002950:	e79d      	b.n	800288e <UART_SetConfig+0x8a>
      break;
    case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002952:	6861      	ldr	r1, [r4, #4]
 8002954:	084a      	lsrs	r2, r1, #1
 8002956:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 800295a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800295e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002962:	b29b      	uxth	r3, r3
#endif
      break;
 8002964:	e7dd      	b.n	8002922 <UART_SetConfig+0x11e>
      break;
    case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002966:	6862      	ldr	r2, [r4, #4]
 8002968:	0853      	lsrs	r3, r2, #1
 800296a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800296e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002972:	b29b      	uxth	r3, r3
#endif
      break;
 8002974:	e7d5      	b.n	8002922 <UART_SetConfig+0x11e>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002976:	f7fe f8eb 	bl	8000b50 <HAL_RCC_GetSysClockFreq>
 800297a:	e7cb      	b.n	8002914 <UART_SetConfig+0x110>
          break;
        case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800297c:	0850      	lsrs	r0, r2, #1
 800297e:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002982:	f04f 0100 	mov.w	r1, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	f141 0100 	adc.w	r1, r1, #0
 800298e:	f7fd fc1f 	bl	80001d0 <__aeabi_uldivmod>
 8002992:	4603      	mov	r3, r0
          ret = HAL_ERROR;
          break;
        }
        
        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002994:	4a4f      	ldr	r2, [pc, #316]	; (8002ad4 <UART_SetConfig+0x2d0>)
 8002996:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 800299a:	4291      	cmp	r1, r2
 800299c:	f63f af59 	bhi.w	8002852 <UART_SetConfig+0x4e>
    }
    
    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
    {
      huart->Instance->BRR = usartdiv;
 80029a0:	6822      	ldr	r2, [r4, #0]
 80029a2:	60d3      	str	r3, [r2, #12]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	2000      	movs	r0, #0
 80029a8:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80029aa:	6663      	str	r3, [r4, #100]	; 0x64
  
  return ret;
}
 80029ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          break;
        case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80029ae:	f7fe f8cf 	bl	8000b50 <HAL_RCC_GetSysClockFreq>
 80029b2:	6862      	ldr	r2, [r4, #4]
 80029b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029b8:	0856      	lsrs	r6, r2, #1
 80029ba:	2700      	movs	r7, #0
 80029bc:	fbe3 6700 	umlal	r6, r7, r3, r0
 80029c0:	4630      	mov	r0, r6
 80029c2:	2300      	movs	r3, #0
 80029c4:	4639      	mov	r1, r7
 80029c6:	f7fd fc03 	bl	80001d0 <__aeabi_uldivmod>
 80029ca:	4603      	mov	r3, r0
#endif
          break;
 80029cc:	e7e2      	b.n	8002994 <UART_SetConfig+0x190>
          break;
        case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80029ce:	4842      	ldr	r0, [pc, #264]	; (8002ad8 <UART_SetConfig+0x2d4>)
 80029d0:	0853      	lsrs	r3, r2, #1
 80029d2:	18c0      	adds	r0, r0, r3
 80029d4:	f04f 0100 	mov.w	r1, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	f141 0100 	adc.w	r1, r1, #0
 80029e0:	f7fd fbf6 	bl	80001d0 <__aeabi_uldivmod>
 80029e4:	4603      	mov	r3, r0
#endif
          break;
 80029e6:	e7d5      	b.n	8002994 <UART_SetConfig+0x190>
        {
        case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80029e8:	f7fe fc9c 	bl	8001324 <HAL_RCC_GetPCLK1Freq>
 80029ec:	e7e1      	b.n	80029b2 <UART_SetConfig+0x1ae>
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ee:	2d00      	cmp	r5, #0
 80029f0:	f47f af2f 	bne.w	8002852 <UART_SetConfig+0x4e>
    {
    case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
      lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq()/UARTPrescTable[huart->Init.ClockPrescaler]);
#else
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80029f4:	f7fe fc96 	bl	8001324 <HAL_RCC_GetPCLK1Freq>
      ret = HAL_ERROR;
      break;
    }
    
    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80029f8:	2800      	cmp	r0, #0
 80029fa:	f47f af48 	bne.w	800288e <UART_SetConfig+0x8a>
 80029fe:	e729      	b.n	8002854 <UART_SetConfig+0x50>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
      lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq()/UARTPrescTable[huart->Init.ClockPrescaler]);
#else
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002a00:	f7fe f8a6 	bl	8000b50 <HAL_RCC_GetSysClockFreq>
#endif
      break;
 8002a04:	2504      	movs	r5, #4
      ret = HAL_ERROR;
      break;
    }
    
    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002a06:	2800      	cmp	r0, #0
 8002a08:	f47f af41 	bne.w	800288e <UART_SetConfig+0x8a>
 8002a0c:	e722      	b.n	8002854 <UART_SetConfig+0x50>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	f63f af1f 	bhi.w	8002852 <UART_SetConfig+0x4e>
 8002a14:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <UART_SetConfig+0x218>)
 8002a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1a:	bf00      	nop
 8002a1c:	08002a41 	.word	0x08002a41
 8002a20:	08002a95 	.word	0x08002a95
 8002a24:	08002a81 	.word	0x08002a81
 8002a28:	08002853 	.word	0x08002853
 8002a2c:	08002a6f 	.word	0x08002a6f
 8002a30:	08002853 	.word	0x08002853
 8002a34:	08002853 	.word	0x08002853
 8002a38:	08002853 	.word	0x08002853
 8002a3c:	08002a5f 	.word	0x08002a5f
    {
    case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a40:	f7fe fc70 	bl	8001324 <HAL_RCC_GetPCLK1Freq>
 8002a44:	6863      	ldr	r3, [r4, #4]
 8002a46:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4e:	b29b      	uxth	r3, r3
      ret = HAL_ERROR;
      break;
    }
    
    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a50:	f1a3 0110 	sub.w	r1, r3, #16
 8002a54:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002a58:	4291      	cmp	r1, r2
 8002a5a:	d9a1      	bls.n	80029a0 <UART_SetConfig+0x19c>
 8002a5c:	e6f9      	b.n	8002852 <UART_SetConfig+0x4e>
      break;
    case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002a5e:	6862      	ldr	r2, [r4, #4]
 8002a60:	0853      	lsrs	r3, r2, #1
 8002a62:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002a66:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a6a:	b29b      	uxth	r3, r3
#endif
      break;
 8002a6c:	e7f0      	b.n	8002a50 <UART_SetConfig+0x24c>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a6e:	f7fe f86f 	bl	8000b50 <HAL_RCC_GetSysClockFreq>
 8002a72:	6863      	ldr	r3, [r4, #4]
 8002a74:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002a78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7c:	b29b      	uxth	r3, r3
#endif
      break;
 8002a7e:	e7e7      	b.n	8002a50 <UART_SetConfig+0x24c>
      break;
    case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a80:	6861      	ldr	r1, [r4, #4]
 8002a82:	084a      	lsrs	r2, r1, #1
 8002a84:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8002a88:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002a8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a90:	b29b      	uxth	r3, r3
#endif
      break;
 8002a92:	e7dd      	b.n	8002a50 <UART_SetConfig+0x24c>
      break;
    case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a94:	f7fe fc56 	bl	8001344 <HAL_RCC_GetPCLK2Freq>
 8002a98:	6863      	ldr	r3, [r4, #4]
 8002a9a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa2:	b29b      	uxth	r3, r3
#endif
      break;
 8002aa4:	e7d4      	b.n	8002a50 <UART_SetConfig+0x24c>
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <UART_SetConfig+0x2c4>)
 8002aa8:	4a0c      	ldr	r2, [pc, #48]	; (8002adc <UART_SetConfig+0x2d8>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	5cd3      	ldrb	r3, [r2, r3]
 8002ab4:	e711      	b.n	80028da <UART_SetConfig+0xd6>
 8002ab6:	bf00      	nop
 8002ab8:	efff69f3 	.word	0xefff69f3
 8002abc:	40008000 	.word	0x40008000
 8002ac0:	40013800 	.word	0x40013800
 8002ac4:	40004400 	.word	0x40004400
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	0800424c 	.word	0x0800424c
 8002ad0:	00f42400 	.word	0x00f42400
 8002ad4:	000ffcff 	.word	0x000ffcff
 8002ad8:	f4240000 	.word	0xf4240000
 8002adc:	08004250 	.word	0x08004250

08002ae0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ae0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ae2:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ae4:	b410      	push	{r4}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ae6:	d506      	bpl.n	8002af6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ae8:	6804      	ldr	r4, [r0, #0]
 8002aea:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002aec:	6861      	ldr	r1, [r4, #4]
 8002aee:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8002af2:	430a      	orrs	r2, r1
 8002af4:	6062      	str	r2, [r4, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002af6:	079c      	lsls	r4, r3, #30
 8002af8:	d506      	bpl.n	8002b08 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002afa:	6804      	ldr	r4, [r0, #0]
 8002afc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002afe:	6861      	ldr	r1, [r4, #4]
 8002b00:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002b04:	430a      	orrs	r2, r1
 8002b06:	6062      	str	r2, [r4, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b08:	0759      	lsls	r1, r3, #29
 8002b0a:	d506      	bpl.n	8002b1a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b0c:	6804      	ldr	r4, [r0, #0]
 8002b0e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002b10:	6861      	ldr	r1, [r4, #4]
 8002b12:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002b16:	430a      	orrs	r2, r1
 8002b18:	6062      	str	r2, [r4, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b1a:	071a      	lsls	r2, r3, #28
 8002b1c:	d506      	bpl.n	8002b2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b1e:	6804      	ldr	r4, [r0, #0]
 8002b20:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002b22:	6861      	ldr	r1, [r4, #4]
 8002b24:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	6062      	str	r2, [r4, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b2c:	06dc      	lsls	r4, r3, #27
 8002b2e:	d506      	bpl.n	8002b3e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b30:	6804      	ldr	r4, [r0, #0]
 8002b32:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002b34:	68a1      	ldr	r1, [r4, #8]
 8002b36:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	60a2      	str	r2, [r4, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b3e:	0699      	lsls	r1, r3, #26
 8002b40:	d506      	bpl.n	8002b50 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b42:	6804      	ldr	r4, [r0, #0]
 8002b44:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002b46:	68a1      	ldr	r1, [r4, #8]
 8002b48:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	60a2      	str	r2, [r4, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b50:	065a      	lsls	r2, r3, #25
 8002b52:	d509      	bpl.n	8002b68 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b54:	6801      	ldr	r1, [r0, #0]
 8002b56:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002b58:	684a      	ldr	r2, [r1, #4]
 8002b5a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002b5e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b60:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b64:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b66:	d00b      	beq.n	8002b80 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b68:	061b      	lsls	r3, r3, #24
 8002b6a:	d506      	bpl.n	8002b7a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b6c:	6801      	ldr	r1, [r0, #0]
 8002b6e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002b70:	684b      	ldr	r3, [r1, #4]
 8002b72:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
  }
}
 8002b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b7e:	4770      	bx	lr
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b80:	684c      	ldr	r4, [r1, #4]
 8002b82:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002b84:	f424 04c0 	bic.w	r4, r4, #6291456	; 0x600000
 8002b88:	4322      	orrs	r2, r4
 8002b8a:	604a      	str	r2, [r1, #4]
 8002b8c:	e7ec      	b.n	8002b68 <UART_AdvFeatureConfig+0x88>
 8002b8e:	bf00      	nop

08002b90 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b94:	9d08      	ldr	r5, [sp, #32]
 8002b96:	4680      	mov	r8, r0
 8002b98:	460f      	mov	r7, r1
 8002b9a:	4616      	mov	r6, r2
 8002b9c:	4699      	mov	r9, r3
 8002b9e:	f8d8 4000 	ldr.w	r4, [r8]
 8002ba2:	e001      	b.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0x18>
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002ba4:	1c6b      	adds	r3, r5, #1
 8002ba6:	d10a      	bne.n	8002bbe <UART_WaitOnFlagUntilTimeout+0x2e>
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba8:	69e0      	ldr	r0, [r4, #28]
 8002baa:	ea37 0300 	bics.w	r3, r7, r0
 8002bae:	bf0c      	ite	eq
 8002bb0:	2001      	moveq	r0, #1
 8002bb2:	2000      	movne	r0, #0
 8002bb4:	4286      	cmp	r6, r0
 8002bb6:	d0f5      	beq.n	8002ba4 <UART_WaitOnFlagUntilTimeout+0x14>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002bb8:	2000      	movs	r0, #0
}
 8002bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002bbe:	b13d      	cbz	r5, 8002bd0 <UART_WaitOnFlagUntilTimeout+0x40>
 8002bc0:	f7fd fcbc 	bl	800053c <HAL_GetTick>
 8002bc4:	ebc9 0000 	rsb	r0, r9, r0
 8002bc8:	4285      	cmp	r5, r0
 8002bca:	d2e8      	bcs.n	8002b9e <UART_WaitOnFlagUntilTimeout+0xe>
 8002bcc:	f8d8 4000 	ldr.w	r4, [r8]
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bd6:	6023      	str	r3, [r4, #0]
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd8:	68a3      	ldr	r3, [r4, #8]
        
        huart->gState = HAL_UART_STATE_READY;
 8002bda:	2220      	movs	r2, #32
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
        
        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002be0:	2100      	movs	r1, #0
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be2:	60a3      	str	r3, [r4, #8]
        
        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002be4:	2003      	movs	r0, #3
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
        
        huart->gState = HAL_UART_STATE_READY;
 8002be6:	f888 2071 	strb.w	r2, [r8, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bea:	f888 1070 	strb.w	r1, [r8, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
        
        huart->gState = HAL_UART_STATE_READY;
        huart->RxState = HAL_UART_STATE_READY;
 8002bee:	f888 2072 	strb.w	r2, [r8, #114]	; 0x72
 8002bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bf6:	bf00      	nop

08002bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;
  
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfc:	2500      	movs	r5, #0
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bfe:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;
  
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c00:	6745      	str	r5, [r0, #116]	; 0x74
  
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c02:	f7fd fc9b 	bl	800053c <HAL_GetTick>
  
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	0712      	lsls	r2, r2, #28
  
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c0c:	4606      	mov	r6, r0
  
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c0e:	d40c      	bmi.n	8002c2a <UART_CheckIdleState+0x32>
      /* Timeout occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	075b      	lsls	r3, r3, #29
 8002c14:	d417      	bmi.n	8002c46 <UART_CheckIdleState+0x4e>
      return HAL_TIMEOUT;
    }
  }
  
  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002c16:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c18:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }
  
  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002c1a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->RxState= HAL_UART_STATE_READY;
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c1e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    }
  }
  
  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
 8002c22:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
  
  return HAL_OK;
}
 8002c26:	b002      	add	sp, #8
 8002c28:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	462a      	mov	r2, r5
 8002c32:	4603      	mov	r3, r0
 8002c34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f7ff ffa9 	bl	8002b90 <UART_WaitOnFlagUntilTimeout>
 8002c3e:	b180      	cbz	r0, 8002c62 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c40:	2003      	movs	r0, #3
  
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
  
  return HAL_OK;
}
 8002c42:	b002      	add	sp, #8
 8002c44:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c46:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002c4a:	9200      	str	r2, [sp, #0]
 8002c4c:	4633      	mov	r3, r6
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c54:	4620      	mov	r0, r4
 8002c56:	f7ff ff9b 	bl	8002b90 <UART_WaitOnFlagUntilTimeout>
 8002c5a:	2800      	cmp	r0, #0
 8002c5c:	d0db      	beq.n	8002c16 <UART_CheckIdleState+0x1e>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c5e:	2003      	movs	r0, #3
 8002c60:	e7ef      	b.n	8002c42 <UART_CheckIdleState+0x4a>
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	e7d4      	b.n	8002c10 <UART_CheckIdleState+0x18>
 8002c66:	bf00      	nop

08002c68 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002c68:	b390      	cbz	r0, 8002cd0 <HAL_UART_Init+0x68>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002c6a:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
  *         parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c6e:	b510      	push	{r4, lr}
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002c70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c74:	4604      	mov	r4, r0
 8002c76:	b303      	cbz	r3, 8002cba <HAL_UART_Init+0x52>
  }
  
  huart->gState = HAL_UART_STATE_BUSY;
  
  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002c78:	6822      	ldr	r2, [r4, #0]
    
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }
  
  huart->gState = HAL_UART_STATE_BUSY;
 8002c7a:	2324      	movs	r3, #36	; 0x24
 8002c7c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  
  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002c80:	6813      	ldr	r3, [r2, #0]
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6013      	str	r3, [r2, #0]
  
  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f7ff fdbb 	bl	8002804 <UART_SetConfig>
 8002c8e:	2801      	cmp	r0, #1
 8002c90:	d01c      	beq.n	8002ccc <HAL_UART_Init+0x64>
  {
    return HAL_ERROR;
  }
  
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c94:	b9b3      	cbnz	r3, 8002cc4 <HAL_UART_Init+0x5c>
  }
  
  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca6:	609a      	str	r2, [r3, #8]
  
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
  
  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cae:	4620      	mov	r0, r4
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
  
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002cb0:	601a      	str	r2, [r3, #0]
  
  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cb6:	f7ff bf9f 	b.w	8002bf8 <UART_CheckIdleState>
  }
  
  if(huart->gState == HAL_UART_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cba:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cbe:	f001 f977 	bl	8003fb0 <HAL_UART_MspInit>
 8002cc2:	e7d9      	b.n	8002c78 <HAL_UART_Init+0x10>
    return HAL_ERROR;
  }
  
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
  {
    UART_AdvFeatureConfig(huart);
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	f7ff ff0b 	bl	8002ae0 <UART_AdvFeatureConfig>
 8002cca:	e7e4      	b.n	8002c96 <HAL_UART_Init+0x2e>
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002ccc:	2001      	movs	r0, #1
 8002cce:	bd10      	pop	{r4, pc}
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop

08002cd8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002cd8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002cda:	f000 fc1b 	bl	8003514 <vTaskStartScheduler>
  
  return osOK;
}
 8002cde:	2000      	movs	r0, #0
 8002ce0:	bd08      	pop	{r3, pc}
 8002ce2:	bf00      	nop

08002ce4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002ce4:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ce6:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002cea:	b085      	sub	sp, #20
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8002cec:	2c84      	cmp	r4, #132	; 0x84
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002cee:	4602      	mov	r2, r0
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
    fpriority += (priority - osPriorityIdle);
 8002cf0:	bf14      	ite	ne
 8002cf2:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002cf4:	2400      	moveq	r4, #0

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002cf6:	ad03      	add	r5, sp, #12
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002cf8:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002cfa:	6840      	ldr	r0, [r0, #4]
 8002cfc:	6811      	ldr	r1, [r2, #0]
 8002cfe:	8a12      	ldrh	r2, [r2, #16]
 8002d00:	e88d 0030 	stmia.w	sp, {r4, r5}
 8002d04:	f000 fb1a 	bl	800333c <xTaskCreate>
 8002d08:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002d0a:	bf0c      	ite	eq
 8002d0c:	9803      	ldreq	r0, [sp, #12]
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 8002d0e:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
}
 8002d10:	b005      	add	sp, #20
 8002d12:	bd30      	pop	{r4, r5, pc}

08002d14 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002d14:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002d16:	2800      	cmp	r0, #0
 8002d18:	bf08      	it	eq
 8002d1a:	2001      	moveq	r0, #1
 8002d1c:	f000 fd68 	bl	80037f0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002d20:	2000      	movs	r0, #0
 8002d22:	bd08      	pop	{r3, pc}

08002d24 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002d24:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002d26:	f000 fe0d 	bl	8003944 <xTaskGetSchedulerState>
 8002d2a:	2801      	cmp	r0, #1
 8002d2c:	d003      	beq.n	8002d36 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8002d2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8002d32:	f000 b917 	b.w	8002f64 <xPortSysTickHandler>
 8002d36:	bd08      	pop	{r3, pc}

08002d38 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d38:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d3c:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d40:	2200      	movs	r2, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d42:	6081      	str	r1, [r0, #8]
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d44:	e880 000c 	stmia.w	r0, {r2, r3}
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d48:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d4a:	6103      	str	r3, [r0, #16]
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop

08002d50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	6103      	str	r3, [r0, #16]
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop

08002d58 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002d58:	e890 000c 	ldmia.w	r0, {r2, r3}
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d5c:	b410      	push	{r4}

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d5e:	689c      	ldr	r4, [r3, #8]
 8002d60:	608c      	str	r4, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d62:	689c      	ldr	r4, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d64:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002d66:	3201      	adds	r2, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d68:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d6a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 8002d6c:	f85d 4b04 	ldr.w	r4, [sp], #4

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d70:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002d72:	6002      	str	r2, [r0, #0]
}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop

08002d78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d78:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d7a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d7c:	1c6b      	adds	r3, r5, #1
 8002d7e:	d011      	beq.n	8002da4 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d80:	f100 0208 	add.w	r2, r0, #8
 8002d84:	e000      	b.n	8002d88 <vListInsert+0x10>
 8002d86:	461a      	mov	r2, r3
 8002d88:	6853      	ldr	r3, [r2, #4]
 8002d8a:	681c      	ldr	r4, [r3, #0]
 8002d8c:	42a5      	cmp	r5, r4
 8002d8e:	d2fa      	bcs.n	8002d86 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002d90:	6804      	ldr	r4, [r0, #0]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d92:	604b      	str	r3, [r1, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002d94:	3401      	adds	r4, #1
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d96:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d98:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d9a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d9c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8002d9e:	6004      	str	r4, [r0, #0]
}
 8002da0:	bc30      	pop	{r4, r5}
 8002da2:	4770      	bx	lr
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002da4:	6902      	ldr	r2, [r0, #16]
 8002da6:	6853      	ldr	r3, [r2, #4]
 8002da8:	e7f2      	b.n	8002d90 <vListInsert+0x18>
 8002daa:	bf00      	nop

08002dac <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dac:	6843      	ldr	r3, [r0, #4]
 8002dae:	6881      	ldr	r1, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002db0:	6902      	ldr	r2, [r0, #16]
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002db2:	b410      	push	{r4}
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002db4:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002db6:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002db8:	6854      	ldr	r4, [r2, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002dba:	604b      	str	r3, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8002dbc:	6813      	ldr	r3, [r2, #0]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002dbe:	42a0      	cmp	r0, r4
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dc0:	bf08      	it	eq
 8002dc2:	6051      	streq	r1, [r2, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8002dc4:	3b01      	subs	r3, #1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8002dca:	f85d 4b04 	ldr.w	r4, [sp], #4
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8002dce:	6013      	str	r3, [r2, #0]

	return pxList->uxNumberOfItems;
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	4770      	bx	lr

08002dd4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <prvTaskExitError+0x2c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	d008      	beq.n	8002dee <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	e7fe      	b.n	8002dec <prvTaskExitError+0x18>
 8002dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	e7fe      	b.n	8002dfe <prvTaskExitError+0x2a>
 8002e00:	20000000 	.word	0x20000000

08002e04 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002e04:	4806      	ldr	r0, [pc, #24]	; (8002e20 <prvPortStartFirstTask+0x1c>)
 8002e06:	6800      	ldr	r0, [r0, #0]
 8002e08:	6800      	ldr	r0, [r0, #0]
 8002e0a:	f380 8808 	msr	MSP, r0
 8002e0e:	b662      	cpsie	i
 8002e10:	b661      	cpsie	f
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	df00      	svc	0
 8002e1c:	bf00      	nop
 8002e1e:	0000      	.short	0x0000
 8002e20:	e000ed08 	.word	0xe000ed08

08002e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002e34 <vPortEnableVFP+0x10>
 8002e28:	6801      	ldr	r1, [r0, #0]
 8002e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002e2e:	6001      	str	r1, [r0, #0]
 8002e30:	4770      	bx	lr
 8002e32:	0000      	.short	0x0000
 8002e34:	e000ed88 	.word	0xe000ed88

08002e38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002e38:	b430      	push	{r4, r5}
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002e3a:	f021 0101 	bic.w	r1, r1, #1

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e3e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002e42:	4c07      	ldr	r4, [pc, #28]	; (8002e60 <pxPortInitialiseStack+0x28>)
 8002e44:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002e48:	f06f 0302 	mvn.w	r3, #2
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002e4c:	f840 2c20 	str.w	r2, [r0, #-32]

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002e50:	e900 0022 	stmdb	r0, {r1, r5}
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002e54:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8002e58:	bc30      	pop	{r4, r5}
 8002e5a:	3844      	subs	r0, #68	; 0x44
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	08002dd5 	.word	0x08002dd5
	...

08002e70 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002e70:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <pxCurrentTCBConst2>)
 8002e72:	6819      	ldr	r1, [r3, #0]
 8002e74:	6808      	ldr	r0, [r1, #0]
 8002e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e7a:	f380 8809 	msr	PSP, r0
 8002e7e:	f3bf 8f6f 	isb	sy
 8002e82:	f04f 0000 	mov.w	r0, #0
 8002e86:	f380 8811 	msr	BASEPRI, r0
 8002e8a:	4770      	bx	lr
 8002e8c:	f3af 8000 	nop.w

08002e90 <pxCurrentTCBConst2>:
 8002e90:	20000cc8 	.word	0x20000cc8

08002e94 <vPortEnterCritical>:
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <vPortEnterCritical+0x3c>)
 8002ea6:	6813      	ldr	r3, [r2, #0]
 8002ea8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002eaa:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002eac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002eae:	d000      	beq.n	8002eb2 <vPortEnterCritical+0x1e>
 8002eb0:	4770      	bx	lr
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002eb2:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <vPortEnterCritical+0x40>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002eba:	d0f9      	beq.n	8002eb0 <vPortEnterCritical+0x1c>
 8002ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	e7fe      	b.n	8002ecc <vPortEnterCritical+0x38>
 8002ece:	bf00      	nop
 8002ed0:	20000000 	.word	0x20000000
 8002ed4:	e000ed04 	.word	0xe000ed04

08002ed8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8002ed8:	4a08      	ldr	r2, [pc, #32]	; (8002efc <vPortExitCritical+0x24>)
 8002eda:	6813      	ldr	r3, [r2, #0]
 8002edc:	b943      	cbnz	r3, 8002ef0 <vPortExitCritical+0x18>
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	e7fe      	b.n	8002eee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002ef4:	b90b      	cbnz	r3, 8002efa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ef6:	f383 8811 	msr	BASEPRI, r3
 8002efa:	4770      	bx	lr
 8002efc:	20000000 	.word	0x20000000

08002f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002f00:	f3ef 8009 	mrs	r0, PSP
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <pxCurrentTCBConst>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	f01e 0f10 	tst.w	lr, #16
 8002f10:	bf08      	it	eq
 8002f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f1a:	6010      	str	r0, [r2, #0]
 8002f1c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f24:	f380 8811 	msr	BASEPRI, r0
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f000 fcd0 	bl	80038d4 <vTaskSwitchContext>
 8002f34:	f04f 0000 	mov.w	r0, #0
 8002f38:	f380 8811 	msr	BASEPRI, r0
 8002f3c:	bc08      	pop	{r3}
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	6808      	ldr	r0, [r1, #0]
 8002f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f46:	f01e 0f10 	tst.w	lr, #16
 8002f4a:	bf08      	it	eq
 8002f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f50:	f380 8809 	msr	PSP, r0
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	f3af 8000 	nop.w

08002f60 <pxCurrentTCBConst>:
 8002f60:	20000cc8 	.word	0x20000cc8

08002f64 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f64:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6a:	f383 8811 	msr	BASEPRI, r3
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002f76:	f000 fb11 	bl	800359c <xTaskIncrementTick>
 8002f7a:	b118      	cbz	r0, 8002f84 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <xPortSysTickHandler+0x28>)
 8002f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f82:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f84:	2300      	movs	r3, #0
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	bd08      	pop	{r3, pc}
 8002f8c:	e000ed04 	.word	0xe000ed04

08002f90 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <vPortSetupTimerInterrupt+0x1c>)
 8002f92:	4907      	ldr	r1, [pc, #28]	; (8002fb0 <vPortSetupTimerInterrupt+0x20>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4807      	ldr	r0, [pc, #28]	; (8002fb4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f98:	4a07      	ldr	r2, [pc, #28]	; (8002fb8 <vPortSetupTimerInterrupt+0x28>)
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f9a:	fba1 1303 	umull	r1, r3, r1, r3
 8002f9e:	099b      	lsrs	r3, r3, #6
 8002fa0:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002fa2:	2107      	movs	r1, #7
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002fa4:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002fa6:	6011      	str	r1, [r2, #0]
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000004 	.word	0x20000004
 8002fb0:	10624dd3 	.word	0x10624dd3
 8002fb4:	e000e014 	.word	0xe000e014
 8002fb8:	e000e010 	.word	0xe000e010

08002fbc <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002fbc:	4b31      	ldr	r3, [pc, #196]	; (8003084 <xPortStartScheduler+0xc8>)
 8002fbe:	4a32      	ldr	r2, [pc, #200]	; (8003088 <xPortStartScheduler+0xcc>)
 8002fc0:	6819      	ldr	r1, [r3, #0]
 8002fc2:	4291      	cmp	r1, r2
 8002fc4:	d04c      	beq.n	8003060 <xPortStartScheduler+0xa4>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b30      	ldr	r3, [pc, #192]	; (800308c <xPortStartScheduler+0xd0>)
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d051      	beq.n	8003072 <xPortStartScheduler+0xb6>

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002fce:	b510      	push	{r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fd0:	4b2f      	ldr	r3, [pc, #188]	; (8003090 <xPortStartScheduler+0xd4>)

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fd2:	4c30      	ldr	r4, [pc, #192]	; (8003094 <xPortStartScheduler+0xd8>)
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fd4:	781a      	ldrb	r2, [r3, #0]
		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002fd6:	4830      	ldr	r0, [pc, #192]	; (8003098 <xPortStartScheduler+0xdc>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002fd8:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fda:	b2d2      	uxtb	r2, r2

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fdc:	21ff      	movs	r1, #255	; 0xff
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002fde:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fe0:	7019      	strb	r1, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fea:	f89d 2003 	ldrb.w	r2, [sp, #3]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002fee:	f89d 1003 	ldrb.w	r1, [sp, #3]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ff2:	f002 0250 	and.w	r2, r2, #80	; 0x50

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ff6:	2307      	movs	r3, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ff8:	0609      	lsls	r1, r1, #24

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ffa:	7022      	strb	r2, [r4, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ffc:	6003      	str	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ffe:	d50e      	bpl.n	800301e <xPortStartScheduler+0x62>
 8003000:	2306      	movs	r3, #6
 8003002:	e000      	b.n	8003006 <xPortStartScheduler+0x4a>
 8003004:	460b      	mov	r3, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003006:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800300a:	0052      	lsls	r2, r2, #1
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	f88d 2003 	strb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003012:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003016:	0612      	lsls	r2, r2, #24
 8003018:	f103 31ff 	add.w	r1, r3, #4294967295
 800301c:	d4f2      	bmi.n	8003004 <xPortStartScheduler+0x48>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800301e:	9901      	ldr	r1, [sp, #4]
 8003020:	4c1b      	ldr	r4, [pc, #108]	; (8003090 <xPortStartScheduler+0xd4>)
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003022:	4a1e      	ldr	r2, [pc, #120]	; (800309c <xPortStartScheduler+0xe0>)
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003024:	021b      	lsls	r3, r3, #8

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003026:	b2c9      	uxtb	r1, r1
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003028:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800302c:	6003      	str	r3, [r0, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800302e:	7021      	strb	r1, [r4, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003030:	6813      	ldr	r3, [r2, #0]
 8003032:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003036:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003038:	6813      	ldr	r3, [r2, #0]
 800303a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800303e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003040:	f7ff ffa6 	bl	8002f90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003044:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <xPortStartScheduler+0xe4>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800304a:	f7ff feeb 	bl	8002e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800304e:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <xPortStartScheduler+0xe8>)
 8003050:	6813      	ldr	r3, [r2, #0]
 8003052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003058:	f7ff fed4 	bl	8002e04 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800305c:	f7ff feba 	bl	8002dd4 <prvTaskExitError>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	e7fe      	b.n	8003070 <xPortStartScheduler+0xb4>
 8003072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	e7fe      	b.n	8003082 <xPortStartScheduler+0xc6>
 8003084:	e000ed00 	.word	0xe000ed00
 8003088:	410fc271 	.word	0x410fc271
 800308c:	410fc270 	.word	0x410fc270
 8003090:	e000e400 	.word	0xe000e400
 8003094:	20000024 	.word	0x20000024
 8003098:	20000028 	.word	0x20000028
 800309c:	e000ed20 	.word	0xe000ed20
 80030a0:	20000000 	.word	0x20000000
 80030a4:	e000ef34 	.word	0xe000ef34

080030a8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <prvInsertBlockIntoFreeList+0x48>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4282      	cmp	r2, r0
 80030ae:	d201      	bcs.n	80030b4 <prvInsertBlockIntoFreeList+0xc>
 80030b0:	4613      	mov	r3, r2
 80030b2:	e7fa      	b.n	80030aa <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030b4:	6859      	ldr	r1, [r3, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80030b6:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80030b8:	185c      	adds	r4, r3, r1
 80030ba:	42a0      	cmp	r0, r4
 80030bc:	d103      	bne.n	80030c6 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80030be:	6840      	ldr	r0, [r0, #4]
 80030c0:	4401      	add	r1, r0
 80030c2:	6059      	str	r1, [r3, #4]
 80030c4:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80030c6:	6841      	ldr	r1, [r0, #4]
 80030c8:	1844      	adds	r4, r0, r1
 80030ca:	42a2      	cmp	r2, r4
 80030cc:	d108      	bne.n	80030e0 <prvInsertBlockIntoFreeList+0x38>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80030ce:	4c09      	ldr	r4, [pc, #36]	; (80030f4 <prvInsertBlockIntoFreeList+0x4c>)
 80030d0:	6824      	ldr	r4, [r4, #0]
 80030d2:	42a2      	cmp	r2, r4
 80030d4:	d004      	beq.n	80030e0 <prvInsertBlockIntoFreeList+0x38>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80030d6:	ca14      	ldmia	r2, {r2, r4}
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030d8:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80030da:	6002      	str	r2, [r0, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80030dc:	6041      	str	r1, [r0, #4]
 80030de:	e000      	b.n	80030e2 <prvInsertBlockIntoFreeList+0x3a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80030e0:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80030e2:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80030e4:	bf18      	it	ne
 80030e6:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	20000034 	.word	0x20000034
 80030f4:	20000030 	.word	0x20000030

080030f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80030f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030fc:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80030fe:	f000 fa45 	bl	800358c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003102:	4842      	ldr	r0, [pc, #264]	; (800320c <pvPortMalloc+0x114>)
 8003104:	6803      	ldr	r3, [r0, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d05a      	beq.n	80031c0 <pvPortMalloc+0xc8>
 800310a:	4b41      	ldr	r3, [pc, #260]	; (8003210 <pvPortMalloc+0x118>)
 800310c:	681d      	ldr	r5, [r3, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800310e:	422c      	tst	r4, r5
 8003110:	d150      	bne.n	80031b4 <pvPortMalloc+0xbc>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003112:	2c00      	cmp	r4, #0
 8003114:	d04e      	beq.n	80031b4 <pvPortMalloc+0xbc>
			{
				xWantedSize += xHeapStructSize;
 8003116:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800311a:	0759      	lsls	r1, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800311c:	bf1c      	itt	ne
 800311e:	f023 0307 	bicne.w	r3, r3, #7
 8003122:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003124:	2b00      	cmp	r3, #0
 8003126:	d045      	beq.n	80031b4 <pvPortMalloc+0xbc>
 8003128:	4f3a      	ldr	r7, [pc, #232]	; (8003214 <pvPortMalloc+0x11c>)
 800312a:	683e      	ldr	r6, [r7, #0]
 800312c:	42b3      	cmp	r3, r6
 800312e:	d841      	bhi.n	80031b4 <pvPortMalloc+0xbc>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8003130:	4939      	ldr	r1, [pc, #228]	; (8003218 <pvPortMalloc+0x120>)
 8003132:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003134:	e006      	b.n	8003144 <pvPortMalloc+0x4c>
 8003136:	f8d4 e000 	ldr.w	lr, [r4]
 800313a:	f1be 0f00 	cmp.w	lr, #0
 800313e:	d004      	beq.n	800314a <pvPortMalloc+0x52>
 8003140:	4621      	mov	r1, r4
 8003142:	4674      	mov	r4, lr
 8003144:	6862      	ldr	r2, [r4, #4]
 8003146:	4293      	cmp	r3, r2
 8003148:	d8f5      	bhi.n	8003136 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800314a:	6800      	ldr	r0, [r0, #0]
 800314c:	4284      	cmp	r4, r0
 800314e:	d031      	beq.n	80031b4 <pvPortMalloc+0xbc>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003150:	6820      	ldr	r0, [r4, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003152:	f8d1 8000 	ldr.w	r8, [r1]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003156:	6008      	str	r0, [r1, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003158:	1ad1      	subs	r1, r2, r3
 800315a:	2910      	cmp	r1, #16
 800315c:	d910      	bls.n	8003180 <pvPortMalloc+0x88>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800315e:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003160:	0742      	lsls	r2, r0, #29
 8003162:	d008      	beq.n	8003176 <pvPortMalloc+0x7e>
 8003164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	e7fe      	b.n	8003174 <pvPortMalloc+0x7c>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003176:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003178:	6063      	str	r3, [r4, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800317a:	f7ff ff95 	bl	80030a8 <prvInsertBlockIntoFreeList>
 800317e:	6862      	ldr	r2, [r4, #4]
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003180:	4826      	ldr	r0, [pc, #152]	; (800321c <pvPortMalloc+0x124>)
 8003182:	6801      	ldr	r1, [r0, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003184:	1ab3      	subs	r3, r6, r2

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003186:	428b      	cmp	r3, r1
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003188:	bf38      	it	cc
 800318a:	6003      	strcc	r3, [r0, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800318c:	432a      	orrs	r2, r5
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800318e:	603b      	str	r3, [r7, #0]
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 8003190:	2300      	movs	r3, #0
 8003192:	6023      	str	r3, [r4, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003194:	6062      	str	r2, [r4, #4]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003196:	f108 0508 	add.w	r5, r8, #8
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800319a:	f000 faa3 	bl	80036e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800319e:	076b      	lsls	r3, r5, #29
 80031a0:	d00b      	beq.n	80031ba <pvPortMalloc+0xc2>
 80031a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a6:	f383 8811 	msr	BASEPRI, r3
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	e7fe      	b.n	80031b2 <pvPortMalloc+0xba>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80031b4:	f000 fa96 	bl	80036e4 <xTaskResumeAll>
 80031b8:	2500      	movs	r5, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 80031ba:	4628      	mov	r0, r5
 80031bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80031c0:	4a17      	ldr	r2, [pc, #92]	; (8003220 <pvPortMalloc+0x128>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80031c2:	0755      	lsls	r5, r2, #29
 80031c4:	d01f      	beq.n	8003206 <pvPortMalloc+0x10e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80031c6:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031c8:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80031cc:	f602 33b8 	addw	r3, r2, #3000	; 0xbb8
 80031d0:	1a5b      	subs	r3, r3, r1
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031d2:	460a      	mov	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80031d4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80031d6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031d8:	f023 0307 	bic.w	r3, r3, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031dc:	4e0d      	ldr	r6, [pc, #52]	; (8003214 <pvPortMalloc+0x11c>)

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80031de:	4d0e      	ldr	r5, [pc, #56]	; (8003218 <pvPortMalloc+0x120>)
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031e0:	f8df e038 	ldr.w	lr, [pc, #56]	; 800321c <pvPortMalloc+0x124>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031e4:	4f0a      	ldr	r7, [pc, #40]	; (8003210 <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 80031e6:	6003      	str	r3, [r0, #0]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031e8:	1a99      	subs	r1, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031ea:	6031      	str	r1, [r6, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 80031ec:	2600      	movs	r6, #0
 80031ee:	e885 0044 	stmia.w	r5, {r2, r6}
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031f2:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 80031f6:	605e      	str	r6, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80031f8:	601e      	str	r6, [r3, #0]
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031fa:	f8ce 1000 	str.w	r1, [lr]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031fe:	603d      	str	r5, [r7, #0]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003200:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	e783      	b.n	800310e <pvPortMalloc+0x16>
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003206:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800320a:	e7e3      	b.n	80031d4 <pvPortMalloc+0xdc>
 800320c:	20000030 	.word	0x20000030
 8003210:	20000bf4 	.word	0x20000bf4
 8003214:	2000002c 	.word	0x2000002c
 8003218:	20000034 	.word	0x20000034
 800321c:	20000bf8 	.word	0x20000bf8
 8003220:	2000003c 	.word	0x2000003c

08003224 <vPortFree>:
void vPortFree( void *pv )
{
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8003224:	b1d0      	cbz	r0, 800325c <vPortFree+0x38>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003226:	4a19      	ldr	r2, [pc, #100]	; (800328c <vPortFree+0x68>)
 8003228:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	4213      	tst	r3, r2
 8003230:	d108      	bne.n	8003244 <vPortFree+0x20>
 8003232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003236:	f383 8811 	msr	BASEPRI, r3
 800323a:	f3bf 8f6f 	isb	sy
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	e7fe      	b.n	8003242 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003244:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003248:	b149      	cbz	r1, 800325e <vPortFree+0x3a>
 800324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	e7fe      	b.n	800325a <vPortFree+0x36>
 800325c:	4770      	bx	lr
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800325e:	ea23 0302 	bic.w	r3, r3, r2
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003262:	b510      	push	{r4, lr}
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003264:	f840 3c04 	str.w	r3, [r0, #-4]
 8003268:	4604      	mov	r4, r0

				vTaskSuspendAll();
 800326a:	f000 f98f 	bl	800358c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800326e:	4a08      	ldr	r2, [pc, #32]	; (8003290 <vPortFree+0x6c>)
 8003270:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8003274:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003276:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800327a:	440b      	add	r3, r1
 800327c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800327e:	f7ff ff13 	bl	80030a8 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8003286:	f000 ba2d 	b.w	80036e4 <xTaskResumeAll>
 800328a:	bf00      	nop
 800328c:	20000bf4 	.word	0x20000bf4
 8003290:	2000002c 	.word	0x2000002c

08003294 <prvResetNextTaskUnblockTime.part.1>:
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003294:	4a03      	ldr	r2, [pc, #12]	; (80032a4 <prvResetNextTaskUnblockTime.part.1+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <prvResetNextTaskUnblockTime.part.1+0x14>)
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800329c:	68d2      	ldr	r2, [r2, #12]
 800329e:	6852      	ldr	r2, [r2, #4]
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	4770      	bx	lr
 80032a4:	20000c00 	.word	0x20000c00
 80032a8:	20000ccc 	.word	0x20000ccc

080032ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80032ae:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <prvAddCurrentTaskToDelayedList+0x74>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032b0:	4d1c      	ldr	r5, [pc, #112]	; (8003324 <prvAddCurrentTaskToDelayedList+0x78>)


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80032b2:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032b4:	682b      	ldr	r3, [r5, #0]
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80032b6:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032b8:	1d18      	adds	r0, r3, #4
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80032ba:	460f      	mov	r7, r1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032bc:	f7ff fd76 	bl	8002dac <uxListRemove>
 80032c0:	b940      	cbnz	r0, 80032d4 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80032c2:	682b      	ldr	r3, [r5, #0]
 80032c4:	4918      	ldr	r1, [pc, #96]	; (8003328 <prvAddCurrentTaskToDelayedList+0x7c>)
 80032c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80032c8:	680a      	ldr	r2, [r1, #0]
 80032ca:	2301      	movs	r3, #1
 80032cc:	4083      	lsls	r3, r0
 80032ce:	ea22 0303 	bic.w	r3, r2, r3
 80032d2:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032d4:	1c63      	adds	r3, r4, #1
 80032d6:	d019      	beq.n	800330c <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80032d8:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032da:	682b      	ldr	r3, [r5, #0]
 80032dc:	4a11      	ldr	r2, [pc, #68]	; (8003324 <prvAddCurrentTaskToDelayedList+0x78>)
 80032de:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80032e0:	42a6      	cmp	r6, r4
 80032e2:	d80b      	bhi.n	80032fc <prvAddCurrentTaskToDelayedList+0x50>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <prvAddCurrentTaskToDelayedList+0x80>)
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	6811      	ldr	r1, [r2, #0]
 80032ea:	3104      	adds	r1, #4
 80032ec:	f7ff fd44 	bl	8002d78 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80032f0:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <prvAddCurrentTaskToDelayedList+0x84>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 80032f6:	bf38      	it	cc
 80032f8:	601c      	strcc	r4, [r3, #0]
 80032fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032fc:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <prvAddCurrentTaskToDelayedList+0x88>)
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	6811      	ldr	r1, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003306:	3104      	adds	r1, #4
 8003308:	f7ff bd36 	b.w	8002d78 <vListInsert>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800330c:	2f00      	cmp	r7, #0
 800330e:	d0e3      	beq.n	80032d8 <prvAddCurrentTaskToDelayedList+0x2c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003310:	6829      	ldr	r1, [r5, #0]
 8003312:	4809      	ldr	r0, [pc, #36]	; (8003338 <prvAddCurrentTaskToDelayedList+0x8c>)
 8003314:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003316:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800331a:	f7ff bd1d 	b.w	8002d58 <vListInsertEnd>
 800331e:	bf00      	nop
 8003320:	20000cd4 	.word	0x20000cd4
 8003324:	20000cc8 	.word	0x20000cc8
 8003328:	20000d20 	.word	0x20000d20
 800332c:	20000c00 	.word	0x20000c00
 8003330:	20000ccc 	.word	0x20000ccc
 8003334:	20000cd8 	.word	0x20000cd8
 8003338:	20000d0c 	.word	0x20000d0c

0800333c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800333c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003340:	ea4f 0882 	mov.w	r8, r2, lsl #2
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003344:	4606      	mov	r6, r0
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003346:	4640      	mov	r0, r8
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003348:	4689      	mov	r9, r1
 800334a:	461f      	mov	r7, r3
 800334c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800334e:	f7ff fed3 	bl	80030f8 <pvPortMalloc>

			if( pxStack != NULL )
 8003352:	2800      	cmp	r0, #0
 8003354:	f000 808f 	beq.w	8003476 <xTaskCreate+0x13a>
 8003358:	4682      	mov	sl, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800335a:	2054      	movs	r0, #84	; 0x54
 800335c:	f7ff fecc 	bl	80030f8 <pvPortMalloc>

				if( pxNewTCB != NULL )
 8003360:	4604      	mov	r4, r0
 8003362:	2800      	cmp	r0, #0
 8003364:	f000 8084 	beq.w	8003470 <xTaskCreate+0x134>
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003368:	f1a8 0804 	sub.w	r8, r8, #4
 800336c:	44d0      	add	r8, sl
 800336e:	f028 0807 	bic.w	r8, r8, #7
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */

				if( pxNewTCB != NULL )
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003372:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
 8003376:	f109 33ff 	add.w	r3, r9, #4294967295
 800337a:	f109 010f 	add.w	r1, r9, #15
 800337e:	f100 0233 	add.w	r2, r0, #51	; 0x33
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003382:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003386:	f802 0f01 	strb.w	r0, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800338a:	7818      	ldrb	r0, [r3, #0]
 800338c:	b108      	cbz	r0, 8003392 <xTaskCreate+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800338e:	428b      	cmp	r3, r1
 8003390:	d1f7      	bne.n	8003382 <xTaskCreate+0x46>
 8003392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003394:	2b06      	cmp	r3, #6
 8003396:	bf28      	it	cs
 8003398:	2306      	movcs	r3, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800339a:	f04f 0b00 	mov.w	fp, #0
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800339e:	f104 0a04 	add.w	sl, r4, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033a2:	62e3      	str	r3, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033a4:	6463      	str	r3, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033a6:	4650      	mov	r0, sl
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033a8:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43

	pxNewTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
 80033ac:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 80033b0:	4699      	mov	r9, r3
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033b2:	f7ff fccd 	bl	8002d50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033b6:	f104 0018 	add.w	r0, r4, #24
 80033ba:	f7ff fcc9 	bl	8002d50 <vListInitialiseItem>
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033be:	f1c9 0307 	rsb	r3, r9, #7
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033c2:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033c6:	61a3      	str	r3, [r4, #24]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033c8:	6124      	str	r4, [r4, #16]
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033ca:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033ce:	6264      	str	r4, [r4, #36]	; 0x24
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033d0:	463a      	mov	r2, r7
 80033d2:	4631      	mov	r1, r6
 80033d4:	4640      	mov	r0, r8
 80033d6:	f7ff fd2f 	bl	8002e38 <pxPortInitialiseStack>
 80033da:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80033dc:	b105      	cbz	r5, 80033e0 <xTaskCreate+0xa4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033de:	602c      	str	r4, [r5, #0]

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033e0:	f7ff fd58 	bl	8002e94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033e4:	4a3d      	ldr	r2, [pc, #244]	; (80034dc <xTaskCreate+0x1a0>)
		if( pxCurrentTCB == NULL )
 80033e6:	4e3e      	ldr	r6, [pc, #248]	; (80034e0 <xTaskCreate+0x1a4>)
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
	{
		uxCurrentNumberOfTasks++;
 80033e8:	6813      	ldr	r3, [r2, #0]
 80033ea:	3301      	adds	r3, #1
 80033ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80033ee:	6833      	ldr	r3, [r6, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d044      	beq.n	800347e <xTaskCreate+0x142>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033f4:	4f3b      	ldr	r7, [pc, #236]	; (80034e4 <xTaskCreate+0x1a8>)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	b373      	cbz	r3, 8003458 <xTaskCreate+0x11c>
 80033fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80033fc:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8003504 <xTaskCreate+0x1c8>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003400:	f8df c104 	ldr.w	ip, [pc, #260]	; 8003508 <xTaskCreate+0x1cc>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003404:	f8df e104 	ldr.w	lr, [pc, #260]	; 800350c <xTaskCreate+0x1d0>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003408:	f8dc 0000 	ldr.w	r0, [ip]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800340c:	f8de 2000 	ldr.w	r2, [lr]
 8003410:	2501      	movs	r5, #1
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003412:	4428      	add	r0, r5
 8003414:	f8cc 0000 	str.w	r0, [ip]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003418:	fa05 f003 	lsl.w	r0, r5, r3
 800341c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003420:	4302      	orrs	r2, r0
 8003422:	4651      	mov	r1, sl
 8003424:	eb08 0083 	add.w	r0, r8, r3, lsl #2
 8003428:	f8ce 2000 	str.w	r2, [lr]
 800342c:	f7ff fc94 	bl	8002d58 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003430:	f7ff fd52 	bl	8002ed8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	b1c3      	cbz	r3, 800346a <xTaskCreate+0x12e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003438:	6832      	ldr	r2, [r6, #0]
 800343a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800343c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800343e:	429a      	cmp	r2, r3
 8003440:	d213      	bcs.n	800346a <xTaskCreate+0x12e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003442:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <xTaskCreate+0x1ac>)
 8003444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	f3bf 8f6f 	isb	sy
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
 8003452:	4628      	mov	r0, r5
 8003454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003458:	6832      	ldr	r2, [r6, #0]
 800345a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800345c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800345e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003504 <xTaskCreate+0x1c8>
 8003462:	429a      	cmp	r2, r3
				{
					pxCurrentTCB = pxNewTCB;
 8003464:	bf98      	it	ls
 8003466:	6034      	strls	r4, [r6, #0]
 8003468:	e7ca      	b.n	8003400 <xTaskCreate+0xc4>
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
 800346a:	4628      	mov	r0, r5
 800346c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003470:	4650      	mov	r0, sl
 8003472:	f7ff fed7 	bl	8003224 <vPortFree>
			prvAddNewTaskToReadyList( pxNewTCB );
			xReturn = pdPASS;
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003476:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
 800347a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uxCurrentNumberOfTasks++;
		if( pxCurrentTCB == NULL )
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800347e:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003480:	6813      	ldr	r3, [r2, #0]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d004      	beq.n	8003490 <xTaskCreate+0x154>
 8003486:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003488:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8003504 <xTaskCreate+0x1c8>
 800348c:	4f15      	ldr	r7, [pc, #84]	; (80034e4 <xTaskCreate+0x1a8>)
 800348e:	e7b7      	b.n	8003400 <xTaskCreate+0xc4>
 8003490:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8003504 <xTaskCreate+0x1c8>
 8003494:	4645      	mov	r5, r8
 8003496:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800349a:	4628      	mov	r0, r5
 800349c:	3514      	adds	r5, #20
 800349e:	f7ff fc4b 	bl	8002d38 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034a2:	42bd      	cmp	r5, r7
 80034a4:	d1f9      	bne.n	800349a <xTaskCreate+0x15e>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80034a6:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8003510 <xTaskCreate+0x1d4>
	vListInitialise( &xDelayedTaskList2 );
 80034aa:	4d10      	ldr	r5, [pc, #64]	; (80034ec <xTaskCreate+0x1b0>)
 80034ac:	4f0d      	ldr	r7, [pc, #52]	; (80034e4 <xTaskCreate+0x1a8>)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80034ae:	4648      	mov	r0, r9
 80034b0:	f7ff fc42 	bl	8002d38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034b4:	4628      	mov	r0, r5
 80034b6:	f7ff fc3f 	bl	8002d38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034ba:	480d      	ldr	r0, [pc, #52]	; (80034f0 <xTaskCreate+0x1b4>)
 80034bc:	f7ff fc3c 	bl	8002d38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80034c0:	480c      	ldr	r0, [pc, #48]	; (80034f4 <xTaskCreate+0x1b8>)
 80034c2:	f7ff fc39 	bl	8002d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80034c6:	480c      	ldr	r0, [pc, #48]	; (80034f8 <xTaskCreate+0x1bc>)
 80034c8:	f7ff fc36 	bl	8002d38 <vListInitialise>
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <xTaskCreate+0x1c0>)
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80034ce:	4a0c      	ldr	r2, [pc, #48]	; (8003500 <xTaskCreate+0x1c4>)
 80034d0:	f8c2 9000 	str.w	r9, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80034d4:	601d      	str	r5, [r3, #0]
 80034d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80034d8:	e792      	b.n	8003400 <xTaskCreate+0xc4>
 80034da:	bf00      	nop
 80034dc:	20000cf4 	.word	0x20000cf4
 80034e0:	20000cc8 	.word	0x20000cc8
 80034e4:	20000c04 	.word	0x20000c04
 80034e8:	e000ed04 	.word	0xe000ed04
 80034ec:	20000cf8 	.word	0x20000cf8
 80034f0:	20000cdc 	.word	0x20000cdc
 80034f4:	20000cb0 	.word	0x20000cb0
 80034f8:	20000d0c 	.word	0x20000d0c
 80034fc:	20000cd8 	.word	0x20000cd8
 8003500:	20000c00 	.word	0x20000c00
 8003504:	20000c24 	.word	0x20000c24
 8003508:	20000cf0 	.word	0x20000cf0
 800350c:	20000d20 	.word	0x20000d20
 8003510:	20000c0c 	.word	0x20000c0c

08003514 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003514:	b530      	push	{r4, r5, lr}
 8003516:	b083      	sub	sp, #12
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003518:	4b16      	ldr	r3, [pc, #88]	; (8003574 <vTaskStartScheduler+0x60>)
 800351a:	9301      	str	r3, [sp, #4]
 800351c:	2400      	movs	r4, #0
 800351e:	9400      	str	r4, [sp, #0]
 8003520:	4623      	mov	r3, r4
 8003522:	2280      	movs	r2, #128	; 0x80
 8003524:	4914      	ldr	r1, [pc, #80]	; (8003578 <vTaskStartScheduler+0x64>)
 8003526:	4815      	ldr	r0, [pc, #84]	; (800357c <vTaskStartScheduler+0x68>)
 8003528:	f7ff ff08 	bl	800333c <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800352c:	2801      	cmp	r0, #1
 800352e:	d00c      	beq.n	800354a <vTaskStartScheduler+0x36>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003530:	3001      	adds	r0, #1
 8003532:	d001      	beq.n	8003538 <vTaskStartScheduler+0x24>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003534:	b003      	add	sp, #12
 8003536:	bd30      	pop	{r4, r5, pc}
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	e7fe      	b.n	8003548 <vTaskStartScheduler+0x34>
 800354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800355a:	4909      	ldr	r1, [pc, #36]	; (8003580 <vTaskStartScheduler+0x6c>)
		xSchedulerRunning = pdTRUE;
 800355c:	4a09      	ldr	r2, [pc, #36]	; (8003584 <vTaskStartScheduler+0x70>)
		xTickCount = ( TickType_t ) 0U;
 800355e:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <vTaskStartScheduler+0x74>)
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003560:	f04f 35ff 	mov.w	r5, #4294967295
 8003564:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8003566:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8003568:	601c      	str	r4, [r3, #0]
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800356a:	b003      	add	sp, #12
 800356c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003570:	f7ff bd24 	b.w	8002fbc <xPortStartScheduler>
 8003574:	20000cd0 	.word	0x20000cd0
 8003578:	08004260 	.word	0x08004260
 800357c:	0800383d 	.word	0x0800383d
 8003580:	20000ccc 	.word	0x20000ccc
 8003584:	20000c04 	.word	0x20000c04
 8003588:	20000cd4 	.word	0x20000cd4

0800358c <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800358c:	4a02      	ldr	r2, [pc, #8]	; (8003598 <vTaskSuspendAll+0xc>)
 800358e:	6813      	ldr	r3, [r2, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	20000c08 	.word	0x20000c08

0800359c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800359c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035a0:	4b45      	ldr	r3, [pc, #276]	; (80036b8 <xTaskIncrementTick+0x11c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d152      	bne.n	800364e <xTaskIncrementTick+0xb2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80035a8:	4b44      	ldr	r3, [pc, #272]	; (80036bc <xTaskIncrementTick+0x120>)
 80035aa:	681d      	ldr	r5, [r3, #0]
 80035ac:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035ae:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80035b0:	2d00      	cmp	r5, #0
 80035b2:	d059      	beq.n	8003668 <xTaskIncrementTick+0xcc>
 80035b4:	f8df b124 	ldr.w	fp, [pc, #292]	; 80036dc <xTaskIncrementTick+0x140>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035b8:	f8db 2000 	ldr.w	r2, [fp]
 80035bc:	4f40      	ldr	r7, [pc, #256]	; (80036c0 <xTaskIncrementTick+0x124>)
 80035be:	4e41      	ldr	r6, [pc, #260]	; (80036c4 <xTaskIncrementTick+0x128>)
 80035c0:	4295      	cmp	r5, r2
 80035c2:	d35e      	bcc.n	8003682 <xTaskIncrementTick+0xe6>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035c4:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80036e0 <xTaskIncrementTick+0x144>
 80035c8:	2400      	movs	r4, #0
 80035ca:	e02d      	b.n	8003628 <xTaskIncrementTick+0x8c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035cc:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <xTaskIncrementTick+0x12c>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68d2      	ldr	r2, [r2, #12]
 80035d2:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035da:	f108 0a04 	add.w	sl, r8, #4
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );

					if( xConstTickCount < xItemValue )
 80035de:	428d      	cmp	r5, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035e0:	4650      	mov	r0, sl
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );

					if( xConstTickCount < xItemValue )
 80035e2:	d35f      	bcc.n	80036a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035e4:	f7ff fbe2 	bl	8002dac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035e8:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035ec:	f108 0018 	add.w	r0, r8, #24
					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035f0:	b109      	cbz	r1, 80035f6 <xTaskIncrementTick+0x5a>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035f2:	f7ff fbdb 	bl	8002dac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035f6:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 80035fa:	f8d9 3000 	ldr.w	r3, [r9]
 80035fe:	2201      	movs	r2, #1
 8003600:	fa02 fc00 	lsl.w	ip, r2, r0
 8003604:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003608:	4651      	mov	r1, sl
 800360a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800360e:	ea4c 0303 	orr.w	r3, ip, r3
 8003612:	f8c9 3000 	str.w	r3, [r9]
 8003616:	f7ff fb9f 	bl	8002d58 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800361a:	6830      	ldr	r0, [r6, #0]
 800361c:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8003620:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
						{
							xSwitchRequired = pdTRUE;
 8003622:	4291      	cmp	r1, r2
 8003624:	bf28      	it	cs
 8003626:	2401      	movcs	r4, #1
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003628:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <xTaskIncrementTick+0x12c>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	2a00      	cmp	r2, #0
 8003630:	d1cc      	bne.n	80035cc <xTaskIncrementTick+0x30>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003632:	f04f 32ff 	mov.w	r2, #4294967295
 8003636:	f8cb 2000 	str.w	r2, [fp]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800363a:	6833      	ldr	r3, [r6, #0]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003642:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
 8003646:	2b02      	cmp	r3, #2
 8003648:	bf28      	it	cs
 800364a:	2401      	movcs	r4, #1
 800364c:	e004      	b.n	8003658 <xTaskIncrementTick+0xbc>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800364e:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <xTaskIncrementTick+0x130>)
 8003650:	6813      	ldr	r3, [r2, #0]
 8003652:	3301      	adds	r3, #1
 8003654:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003656:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003658:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <xTaskIncrementTick+0x134>)
 800365a:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf18      	it	ne
 8003660:	2401      	movne	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8003662:	4620      	mov	r0, r4
 8003664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;

		if( xConstTickCount == ( TickType_t ) 0U )
		{
			taskSWITCH_DELAYED_LISTS();
 8003668:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <xTaskIncrementTick+0x12c>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	b152      	cbz	r2, 8003686 <xTaskIncrementTick+0xea>
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	e7fe      	b.n	8003680 <xTaskIncrementTick+0xe4>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003682:	2400      	movs	r4, #0
 8003684:	e7d9      	b.n	800363a <xTaskIncrementTick+0x9e>
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;

		if( xConstTickCount == ( TickType_t ) 0U )
		{
			taskSWITCH_DELAYED_LISTS();
 8003686:	4a13      	ldr	r2, [pc, #76]	; (80036d4 <xTaskIncrementTick+0x138>)
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	4913      	ldr	r1, [pc, #76]	; (80036d8 <xTaskIncrementTick+0x13c>)
 800368c:	6814      	ldr	r4, [r2, #0]
 800368e:	601c      	str	r4, [r3, #0]
 8003690:	6010      	str	r0, [r2, #0]
 8003692:	680a      	ldr	r2, [r1, #0]
 8003694:	3201      	adds	r2, #1
 8003696:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	b12b      	cbz	r3, 80036aa <xTaskIncrementTick+0x10e>
 800369e:	f7ff fdf9 	bl	8003294 <prvResetNextTaskUnblockTime.part.1>
 80036a2:	e787      	b.n	80035b4 <xTaskIncrementTick+0x18>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80036a4:	f8cb 1000 	str.w	r1, [fp]
						break;
 80036a8:	e7c7      	b.n	800363a <xTaskIncrementTick+0x9e>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80036aa:	f8df b030 	ldr.w	fp, [pc, #48]	; 80036dc <xTaskIncrementTick+0x140>
 80036ae:	f04f 32ff 	mov.w	r2, #4294967295
 80036b2:	f8cb 2000 	str.w	r2, [fp]
 80036b6:	e77f      	b.n	80035b8 <xTaskIncrementTick+0x1c>
 80036b8:	20000c08 	.word	0x20000c08
 80036bc:	20000cd4 	.word	0x20000cd4
 80036c0:	20000c24 	.word	0x20000c24
 80036c4:	20000cc8 	.word	0x20000cc8
 80036c8:	20000c00 	.word	0x20000c00
 80036cc:	20000c20 	.word	0x20000c20
 80036d0:	20000d24 	.word	0x20000d24
 80036d4:	20000cd8 	.word	0x20000cd8
 80036d8:	20000bfc 	.word	0x20000bfc
 80036dc:	20000ccc 	.word	0x20000ccc
 80036e0:	20000d20 	.word	0x20000d20

080036e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036e8:	4c36      	ldr	r4, [pc, #216]	; (80037c4 <xTaskResumeAll+0xe0>)
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	b943      	cbnz	r3, 8003700 <xTaskResumeAll+0x1c>
 80036ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	e7fe      	b.n	80036fe <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003700:	f7ff fbc8 	bl	8002e94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	3b01      	subs	r3, #1
 8003708:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800370a:	6824      	ldr	r4, [r4, #0]
 800370c:	2c00      	cmp	r4, #0
 800370e:	d150      	bne.n	80037b2 <xTaskResumeAll+0xce>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003710:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <xTaskResumeAll+0xe4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d04c      	beq.n	80037b2 <xTaskResumeAll+0xce>
 8003718:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80037e8 <xTaskResumeAll+0x104>
 800371c:	4d2b      	ldr	r5, [pc, #172]	; (80037cc <xTaskResumeAll+0xe8>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 800371e:	4e2c      	ldr	r6, [pc, #176]	; (80037d0 <xTaskResumeAll+0xec>)
 8003720:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80037ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003724:	46d3      	mov	fp, sl
 8003726:	e01f      	b.n	8003768 <xTaskResumeAll+0x84>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003728:	f8db 300c 	ldr.w	r3, [fp, #12]
 800372c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800372e:	f104 0804 	add.w	r8, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003732:	f104 0018 	add.w	r0, r4, #24
 8003736:	f7ff fb39 	bl	8002dac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800373a:	4640      	mov	r0, r8
 800373c:	f7ff fb36 	bl	8002dac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003740:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003742:	6833      	ldr	r3, [r6, #0]
 8003744:	fa07 f200 	lsl.w	r2, r7, r0
 8003748:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800374c:	4313      	orrs	r3, r2
 800374e:	4641      	mov	r1, r8
 8003750:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8003754:	6033      	str	r3, [r6, #0]
 8003756:	f7ff faff 	bl	8002d58 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800375a:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <xTaskResumeAll+0xf0>)
 800375c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	429a      	cmp	r2, r3
					{
						xYieldPending = pdTRUE;
 8003764:	bf28      	it	cs
 8003766:	602f      	strcs	r7, [r5, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003768:	f8da 3000 	ldr.w	r3, [sl]
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
 800376c:	2701      	movs	r7, #1
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1da      	bne.n	8003728 <xTaskResumeAll+0x44>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003772:	b13c      	cbz	r4, 8003784 <xTaskResumeAll+0xa0>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003774:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <xTaskResumeAll+0xf4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	bb03      	cbnz	r3, 80037be <xTaskResumeAll+0xda>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800377c:	4b17      	ldr	r3, [pc, #92]	; (80037dc <xTaskResumeAll+0xf8>)
 800377e:	f04f 32ff 	mov.w	r2, #4294967295
 8003782:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003784:	4e16      	ldr	r6, [pc, #88]	; (80037e0 <xTaskResumeAll+0xfc>)
 8003786:	6834      	ldr	r4, [r6, #0]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003788:	b13c      	cbz	r4, 800379a <xTaskResumeAll+0xb6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
 800378a:	2701      	movs	r7, #1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800378c:	f7ff ff06 	bl	800359c <xTaskIncrementTick>
 8003790:	b100      	cbz	r0, 8003794 <xTaskResumeAll+0xb0>
							{
								xYieldPending = pdTRUE;
 8003792:	602f      	str	r7, [r5, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003794:	3c01      	subs	r4, #1
 8003796:	d1f9      	bne.n	800378c <xTaskResumeAll+0xa8>

						uxPendedTicks = 0;
 8003798:	6034      	str	r4, [r6, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800379a:	682b      	ldr	r3, [r5, #0]
 800379c:	b14b      	cbz	r3, 80037b2 <xTaskResumeAll+0xce>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800379e:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <xTaskResumeAll+0x100>)
 80037a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037ae:	2401      	movs	r4, #1
 80037b0:	e000      	b.n	80037b4 <xTaskResumeAll+0xd0>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
 80037b2:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037b4:	f7ff fb90 	bl	8002ed8 <vPortExitCritical>

	return xAlreadyYielded;
}
 80037b8:	4620      	mov	r0, r4
 80037ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037be:	f7ff fd69 	bl	8003294 <prvResetNextTaskUnblockTime.part.1>
 80037c2:	e7df      	b.n	8003784 <xTaskResumeAll+0xa0>
 80037c4:	20000c08 	.word	0x20000c08
 80037c8:	20000cf4 	.word	0x20000cf4
 80037cc:	20000d24 	.word	0x20000d24
 80037d0:	20000d20 	.word	0x20000d20
 80037d4:	20000cc8 	.word	0x20000cc8
 80037d8:	20000c00 	.word	0x20000c00
 80037dc:	20000ccc 	.word	0x20000ccc
 80037e0:	20000c20 	.word	0x20000c20
 80037e4:	e000ed04 	.word	0xe000ed04
 80037e8:	20000cdc 	.word	0x20000cdc
 80037ec:	20000c24 	.word	0x20000c24

080037f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037f0:	b508      	push	{r3, lr}
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037f2:	b158      	cbz	r0, 800380c <vTaskDelay+0x1c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <vTaskDelay+0x44>)
 80037f6:	6819      	ldr	r1, [r3, #0]
 80037f8:	b189      	cbz	r1, 800381e <vTaskDelay+0x2e>
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	e7fe      	b.n	800380a <vTaskDelay+0x1a>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <vTaskDelay+0x48>)
 800380e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	bd08      	pop	{r3, pc}
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	3201      	adds	r2, #1
 8003822:	601a      	str	r2, [r3, #0]
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003824:	f7ff fd42 	bl	80032ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003828:	f7ff ff5c 	bl	80036e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800382c:	2800      	cmp	r0, #0
 800382e:	d0ed      	beq.n	800380c <vTaskDelay+0x1c>
 8003830:	bd08      	pop	{r3, pc}
 8003832:	bf00      	nop
 8003834:	20000c08 	.word	0x20000c08
 8003838:	e000ed04 	.word	0xe000ed04

0800383c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800383c:	4e1f      	ldr	r6, [pc, #124]	; (80038bc <prvIdleTask+0x80>)
 800383e:	4d20      	ldr	r5, [pc, #128]	; (80038c0 <prvIdleTask+0x84>)
 8003840:	4c20      	ldr	r4, [pc, #128]	; (80038c4 <prvIdleTask+0x88>)
 8003842:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80038cc <prvIdleTask+0x90>
 8003846:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80038d0 <prvIdleTask+0x94>
 800384a:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800384e:	46b2      	mov	sl, r6
 8003850:	e006      	b.n	8003860 <prvIdleTask+0x24>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003852:	6823      	ldr	r3, [r4, #0]
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003854:	6837      	ldr	r7, [r6, #0]
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003856:	3301      	adds	r3, #1
 8003858:	6023      	str	r3, [r4, #0]
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
 800385a:	f7ff ff43 	bl	80036e4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800385e:	b97f      	cbnz	r7, 8003880 <prvIdleTask+0x44>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f5      	bne.n	8003852 <prvIdleTask+0x16>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003866:	f8d9 3000 	ldr.w	r3, [r9]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d9f8      	bls.n	8003860 <prvIdleTask+0x24>
			{
				taskYIELD();
 800386e:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <prvIdleTask+0x8c>)
 8003870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	e7ef      	b.n	8003860 <prvIdleTask+0x24>

			if( xListIsEmpty == pdFALSE )
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8003880:	f7ff fb08 	bl	8002e94 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003884:	f8da 300c 	ldr.w	r3, [sl, #12]
 8003888:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800388c:	f10b 0004 	add.w	r0, fp, #4
 8003890:	f7ff fa8c 	bl	8002dac <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003894:	f8d8 3000 	ldr.w	r3, [r8]
					--uxDeletedTasksWaitingCleanUp;
 8003898:	4a09      	ldr	r2, [pc, #36]	; (80038c0 <prvIdleTask+0x84>)

				taskENTER_CRITICAL();
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					--uxCurrentNumberOfTasks;
 800389a:	3b01      	subs	r3, #1
 800389c:	f8c8 3000 	str.w	r3, [r8]
					--uxDeletedTasksWaitingCleanUp;
 80038a0:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <prvIdleTask+0x84>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80038a8:	f7ff fb16 	bl	8002ed8 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80038ac:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 80038b0:	f7ff fcb8 	bl	8003224 <vPortFree>
			vPortFree( pxTCB );
 80038b4:	4658      	mov	r0, fp
 80038b6:	f7ff fcb5 	bl	8003224 <vPortFree>
 80038ba:	e7d1      	b.n	8003860 <prvIdleTask+0x24>
 80038bc:	20000cb0 	.word	0x20000cb0
 80038c0:	20000cc4 	.word	0x20000cc4
 80038c4:	20000c08 	.word	0x20000c08
 80038c8:	e000ed04 	.word	0xe000ed04
 80038cc:	20000cf4 	.word	0x20000cf4
 80038d0:	20000c24 	.word	0x20000c24

080038d4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038d4:	4b16      	ldr	r3, [pc, #88]	; (8003930 <vTaskSwitchContext+0x5c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	bb33      	cbnz	r3, 8003928 <vTaskSwitchContext+0x54>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 80038da:	4916      	ldr	r1, [pc, #88]	; (8003934 <vTaskSwitchContext+0x60>)
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038dc:	4a16      	ldr	r2, [pc, #88]	; (8003938 <vTaskSwitchContext+0x64>)
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 80038de:	600b      	str	r3, [r1, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038e0:	6813      	ldr	r3, [r2, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f1c3 031f 	rsb	r3, r3, #31
 80038ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4812      	ldr	r0, [pc, #72]	; (800393c <vTaskSwitchContext+0x68>)
 80038f4:	58c2      	ldr	r2, [r0, r3]
 80038f6:	18c1      	adds	r1, r0, r3
 80038f8:	b942      	cbnz	r2, 800390c <vTaskSwitchContext+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	e7fe      	b.n	800390a <vTaskSwitchContext+0x36>
 800390c:	684a      	ldr	r2, [r1, #4]
 800390e:	3308      	adds	r3, #8
 8003910:	6852      	ldr	r2, [r2, #4]
 8003912:	604a      	str	r2, [r1, #4]
 8003914:	4403      	add	r3, r0
 8003916:	429a      	cmp	r2, r3
 8003918:	bf08      	it	eq
 800391a:	6852      	ldreq	r2, [r2, #4]
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <vTaskSwitchContext+0x6c>)
 800391e:	bf08      	it	eq
 8003920:	604a      	streq	r2, [r1, #4]
 8003922:	68d2      	ldr	r2, [r2, #12]
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	4770      	bx	lr
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003928:	4b02      	ldr	r3, [pc, #8]	; (8003934 <vTaskSwitchContext+0x60>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	4770      	bx	lr
 8003930:	20000c08 	.word	0x20000c08
 8003934:	20000d24 	.word	0x20000d24
 8003938:	20000d20 	.word	0x20000d20
 800393c:	20000c24 	.word	0x20000c24
 8003940:	20000cc8 	.word	0x20000cc8

08003944 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <xTaskGetSchedulerState+0x18>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	b133      	cbz	r3, 8003958 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <xTaskGetSchedulerState+0x1c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003950:	bf0c      	ite	eq
 8003952:	2002      	moveq	r0, #2
 8003954:	2000      	movne	r0, #0
 8003956:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003958:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 800395a:	4770      	bx	lr
 800395c:	20000c04 	.word	0x20000c04
 8003960:	20000c08 	.word	0x20000c08

08003964 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8003964:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003968:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80039f8 <StartDefaultTask+0x94>
 800396c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80039fc <StartDefaultTask+0x98>
	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);

	for (int j = 0; j <= 5000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
 8003970:	4f1f      	ldr	r7, [pc, #124]	; (80039f0 <StartDefaultTask+0x8c>)
  /* USER CODE BEGIN 5 */

	// index for each phase (120 degrees apart)
	int i = 0;
	int v = 84;
	int s = 168;
 8003972:	26a8      	movs	r6, #168	; 0xa8

  /* USER CODE BEGIN 5 */

	// index for each phase (120 degrees apart)
	int i = 0;
	int v = 84;
 8003974:	2554      	movs	r5, #84	; 0x54
{

  /* USER CODE BEGIN 5 */

	// index for each phase (120 degrees apart)
	int i = 0;
 8003976:	2400      	movs	r4, #0
	int s = 168;

	/* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003978:	2001      	movs	r0, #1
 800397a:	f7ff f9cb 	bl	8002d14 <osDelay>



	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 800397e:	2108      	movs	r1, #8
 8003980:	481c      	ldr	r0, [pc, #112]	; (80039f4 <StartDefaultTask+0x90>)
 8003982:	f7fd f857 	bl	8000a34 <HAL_GPIO_TogglePin>
 8003986:	f241 3389 	movw	r3, #5001	; 0x1389

	for (int j = 0; j <= 5000; j++) {
 800398a:	3b01      	subs	r3, #1
 800398c:	d1fd      	bne.n	800398a <StartDefaultTask+0x26>
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
 800398e:	f838 a016 	ldrh.w	sl, [r8, r6, lsl #1]
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
 8003992:	f838 c015 	ldrh.w	ip, [r8, r5, lsl #1]
	htim2.Instance->CCR3 = PWMdata2[i] / 37;
 8003996:	f838 e014 	ldrh.w	lr, [r8, r4, lsl #1]
	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);

	for (int j = 0; j <= 5000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
 800399a:	f8d9 0000 	ldr.w	r0, [r9]
 800399e:	fba7 310a 	umull	r3, r1, r7, sl
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
 80039a2:	fba7 320c 	umull	r3, r2, r7, ip
	htim2.Instance->CCR3 = PWMdata2[i] / 37;

	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWMdata[s]);
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWMdata[v]);
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWMdata[i]);
	i++;
 80039a6:	3401      	adds	r4, #1
	for (int j = 0; j <= 5000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
	htim2.Instance->CCR3 = PWMdata2[i] / 37;
 80039a8:	fba7 b30e 	umull	fp, r3, r7, lr

	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWMdata[s]);
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWMdata[v]);
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWMdata[i]);
	i++;
	v++;
 80039ac:	3501      	adds	r5, #1
	s++;
	if (i == 251) {
		i = 0;
 80039ae:	2cfb      	cmp	r4, #251	; 0xfb
	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);

	for (int j = 0; j <= 5000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
 80039b0:	ebc1 0a0a 	rsb	sl, r1, sl
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
 80039b4:	ebc2 0c0c 	rsb	ip, r2, ip
	htim2.Instance->CCR3 = PWMdata2[i] / 37;
 80039b8:	ebc3 0e0e 	rsb	lr, r3, lr
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, PWMdata[s]);
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, PWMdata[v]);
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWMdata[i]);
	i++;
	v++;
	s++;
 80039bc:	f106 0601 	add.w	r6, r6, #1
	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);

	for (int j = 0; j <= 5000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
 80039c0:	eb01 015a 	add.w	r1, r1, sl, lsr #1
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
 80039c4:	eb02 025c 	add.w	r2, r2, ip, lsr #1
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, PWMdata[i]);
	i++;
	v++;
	s++;
	if (i == 251) {
		i = 0;
 80039c8:	bf08      	it	eq
 80039ca:	2400      	moveq	r4, #0
	for (int j = 0; j <= 5000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
	htim2.Instance->CCR3 = PWMdata2[i] / 37;
 80039cc:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	s++;
	if (i == 251) {
		i = 0;
	}
	if (v == 251) {
		v = 0;
 80039d0:	2dfb      	cmp	r5, #251	; 0xfb
	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);

	for (int j = 0; j <= 5000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
 80039d2:	f3c1 114f 	ubfx	r1, r1, #5, #16
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
 80039d6:	f3c2 124f 	ubfx	r2, r2, #5, #16
	s++;
	if (i == 251) {
		i = 0;
	}
	if (v == 251) {
		v = 0;
 80039da:	bf08      	it	eq
 80039dc:	2500      	moveq	r5, #0
	for (int j = 0; j <= 5000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
	htim2.Instance->CCR3 = PWMdata2[i] / 37;
 80039de:	f3c3 134f 	ubfx	r3, r3, #5, #16
	}
	if (v == 251) {
		v = 0;
	}
	if (s == 251) {
		s = 0;
 80039e2:	2efb      	cmp	r6, #251	; 0xfb
	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);

	for (int j = 0; j <= 5000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
 80039e4:	6401      	str	r1, [r0, #64]	; 0x40
	}
	if (v == 251) {
		v = 0;
	}
	if (s == 251) {
		s = 0;
 80039e6:	bf08      	it	eq
 80039e8:	2600      	moveq	r6, #0

	for (int j = 0; j <= 5000; j++) {
	}

	htim2.Instance->CCR4 = PWMdata2[s] / 37;
	htim2.Instance->CCR2 = PWMdata2[v] / 37;
 80039ea:	6382      	str	r2, [r0, #56]	; 0x38
	htim2.Instance->CCR3 = PWMdata2[i] / 37;
 80039ec:	63c3      	str	r3, [r0, #60]	; 0x3c
 80039ee:	e7c3      	b.n	8003978 <StartDefaultTask+0x14>
 80039f0:	bacf914d 	.word	0xbacf914d
 80039f4:	48000400 	.word	0x48000400
 80039f8:	200012a4 	.word	0x200012a4
 80039fc:	08004288 	.word	0x08004288

08003a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a02:	b0ad      	sub	sp, #180	; 0xb4
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a04:	2302      	movs	r3, #2
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003a06:	2401      	movs	r4, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003a08:	2710      	movs	r7, #16
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003a0a:	2600      	movs	r6, #0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003a0c:	2560      	movs	r5, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003a0e:	2128      	movs	r1, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003a10:	2207      	movs	r2, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a12:	a806      	add	r0, sp, #24
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003a14:	9706      	str	r7, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003a16:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003a18:	9411      	str	r4, [sp, #68]	; 0x44

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003a1a:	960d      	str	r6, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003a1c:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a1e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003a20:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003a22:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003a24:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003a26:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a28:	f7fd f910 	bl	8000c4c <HAL_RCC_OscConfig>
 8003a2c:	b100      	cbz	r0, 8003a30 <SystemClock_Config+0x30>
 8003a2e:	e7fe      	b.n	8003a2e <SystemClock_Config+0x2e>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003a30:	2104      	movs	r1, #4
 8003a32:	4603      	mov	r3, r0

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a34:	2203      	movs	r2, #3
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a36:	250f      	movs	r5, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003a38:	eb0d 0001 	add.w	r0, sp, r1
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a3c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a3e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a40:	9305      	str	r3, [sp, #20]
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a42:	9501      	str	r5, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a44:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003a46:	f7fd fbb1 	bl	80011ac <HAL_RCC_ClockConfig>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	b100      	cbz	r0, 8003a50 <SystemClock_Config+0x50>
 8003a4e:	e7fe      	b.n	8003a4e <SystemClock_Config+0x4e>
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a50:	a817      	add	r0, sp, #92	; 0x5c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a52:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a54:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a56:	f7fd fd19 	bl	800148c <HAL_RCCEx_PeriphCLKConfig>
 8003a5a:	b100      	cbz	r0, 8003a5e <SystemClock_Config+0x5e>
 8003a5c:	e7fe      	b.n	8003a5c <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003a5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003a62:	f7fc fff3 	bl	8000a4c <HAL_PWREx_ControlVoltageScaling>
 8003a66:	4604      	mov	r4, r0
 8003a68:	b100      	cbz	r0, 8003a6c <SystemClock_Config+0x6c>
 8003a6a:	e7fe      	b.n	8003a6a <SystemClock_Config+0x6a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003a6c:	f7fd fc54 	bl	8001318 <HAL_RCC_GetHCLKFreq>
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <SystemClock_Config+0x94>)
 8003a72:	fba3 3000 	umull	r3, r0, r3, r0
 8003a76:	0980      	lsrs	r0, r0, #6
 8003a78:	f7fc fdbc 	bl	80005f4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003a7c:	2004      	movs	r0, #4
 8003a7e:	f7fc fdd3 	bl	8000628 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003a82:	4622      	mov	r2, r4
 8003a84:	4629      	mov	r1, r5
 8003a86:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8a:	f7fc fd6f 	bl	800056c <HAL_NVIC_SetPriority>
}
 8003a8e:	b02d      	add	sp, #180	; 0xb4
 8003a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a92:	bf00      	nop
 8003a94:	10624dd3 	.word	0x10624dd3

08003a98 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8003a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9c:	4e8e      	ldr	r6, [pc, #568]	; (8003cd8 <main+0x240>)

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 8003a9e:	4c8f      	ldr	r4, [pc, #572]	; (8003cdc <main+0x244>)
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8003aa0:	b093      	sub	sp, #76	; 0x4c
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003aa2:	f7fc fd37 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003aa6:	f7ff ffab 	bl	8003a00 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aaa:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	64f3      	str	r3, [r6, #76]	; 0x4c
 8003ab2:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003abc:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8003abe:	f043 0302 	orr.w	r3, r3, #2
 8003ac2:	64f3      	str	r3, [r6, #76]	; 0x4c
 8003ac4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003acc:	2200      	movs	r2, #0
 8003ace:	2110      	movs	r1, #16
 8003ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad4:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003ad6:	f7fc ffa7 	bl	8000a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8003ada:	2200      	movs	r2, #0
 8003adc:	2148      	movs	r1, #72	; 0x48
 8003ade:	4880      	ldr	r0, [pc, #512]	; (8003ce0 <main+0x248>)
 8003ae0:	f7fc ffa2 	bl	8000a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae4:	2500      	movs	r5, #0
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae6:	2701      	movs	r7, #1

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8003ae8:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8003aea:	a90b      	add	r1, sp, #44	; 0x2c
 8003aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8003af0:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af2:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af4:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af6:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8003af8:	f7fc fec2 	bl	8000880 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin PB6 */
  GPIO_InitStruct.Pin = LED1_Pin|GPIO_PIN_6;
 8003afc:	2348      	movs	r3, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afe:	a90b      	add	r1, sp, #44	; 0x2c
 8003b00:	4877      	ldr	r0, [pc, #476]	; (8003ce0 <main+0x248>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LED1_Pin PB6 */
  GPIO_InitStruct.Pin = LED1_Pin|GPIO_PIN_6;
 8003b02:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b04:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b06:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b08:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0a:	f7fc feb9 	bl	8000880 <HAL_GPIO_Init>
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b0e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8003b10:	433b      	orrs	r3, r7
 8003b12:	64b3      	str	r3, [r6, #72]	; 0x48
 8003b14:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8003b16:	403b      	ands	r3, r7

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8003b18:	462a      	mov	r2, r5
 8003b1a:	2105      	movs	r1, #5
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b1c:	9300      	str	r3, [sp, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8003b1e:	200c      	movs	r0, #12
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b20:	9b00      	ldr	r3, [sp, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8003b22:	f7fc fd23 	bl	800056c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003b26:	200c      	movs	r0, #12
 8003b28:	f7fc fd58 	bl	80005dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8003b2c:	462a      	mov	r2, r5
 8003b2e:	2105      	movs	r1, #5
 8003b30:	200e      	movs	r0, #14
 8003b32:	f7fc fd1b 	bl	800056c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003b36:	200e      	movs	r0, #14
 8003b38:	f7fc fd50 	bl	80005dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8003b3c:	462a      	mov	r2, r5
 8003b3e:	2105      	movs	r1, #5
 8003b40:	200f      	movs	r0, #15
 8003b42:	f7fc fd13 	bl	800056c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003b46:	200f      	movs	r0, #15
 8003b48:	f7fc fd48 	bl	80005dc <HAL_NVIC_EnableIRQ>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 8003b4c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8003b50:	2240      	movs	r2, #64	; 0x40
  htim2.Init.Period = 11248;
 8003b52:	f642 33f0 	movw	r3, #11248	; 0x2bf0
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b56:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
 8003b58:	6065      	str	r5, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
  htim2.Init.Period = 11248;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b5a:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b5c:	61a5      	str	r5, [r4, #24]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 8003b5e:	6021      	str	r1, [r4, #0]
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8003b60:	60a2      	str	r2, [r4, #8]
  htim2.Init.Period = 11248;
 8003b62:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b64:	f7fe fb68 	bl	8002238 <HAL_TIM_Base_Init>
 8003b68:	b100      	cbz	r0, 8003b6c <main+0xd4>
 8003b6a:	e7fe      	b.n	8003b6a <main+0xd2>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b6c:	ae12      	add	r6, sp, #72	; 0x48
 8003b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b72:	f846 3d30 	str.w	r3, [r6, #-48]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b76:	4620      	mov	r0, r4
 8003b78:	4631      	mov	r1, r6
 8003b7a:	f7fe fa41 	bl	8002000 <HAL_TIM_ConfigClockSource>
 8003b7e:	b100      	cbz	r0, 8003b82 <main+0xea>
 8003b80:	e7fe      	b.n	8003b80 <main+0xe8>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003b82:	4620      	mov	r0, r4
 8003b84:	f7fe fb74 	bl	8002270 <HAL_TIM_PWM_Init>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	b100      	cbz	r0, 8003b8e <main+0xf6>
 8003b8c:	e7fe      	b.n	8003b8c <main+0xf4>
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b8e:	a903      	add	r1, sp, #12
 8003b90:	4620      	mov	r0, r4
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b92:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b94:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b96:	f7fe fc55 	bl	8002444 <HAL_TIMEx_MasterConfigSynchronization>
 8003b9a:	b100      	cbz	r0, 8003b9e <main+0x106>
 8003b9c:	e7fe      	b.n	8003b9c <main+0x104>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003b9e:	f04f 0804 	mov.w	r8, #4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ba2:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8003ba4:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ba6:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ba8:	4642      	mov	r2, r8
 8003baa:	a90b      	add	r1, sp, #44	; 0x2c
 8003bac:	4620      	mov	r0, r4
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003bae:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bb2:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003bb4:	f7fe fbb2 	bl	800231c <HAL_TIM_PWM_ConfigChannel>
 8003bb8:	b100      	cbz	r0, 8003bbc <main+0x124>
 8003bba:	e7fe      	b.n	8003bba <main+0x122>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003bbc:	2208      	movs	r2, #8
 8003bbe:	a90b      	add	r1, sp, #44	; 0x2c
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f7fe fbab 	bl	800231c <HAL_TIM_PWM_ConfigChannel>
 8003bc6:	b100      	cbz	r0, 8003bca <main+0x132>
 8003bc8:	e7fe      	b.n	8003bc8 <main+0x130>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003bca:	220c      	movs	r2, #12
 8003bcc:	a90b      	add	r1, sp, #44	; 0x2c
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f7fe fba4 	bl	800231c <HAL_TIM_PWM_ConfigChannel>
 8003bd4:	4605      	mov	r5, r0
 8003bd6:	b100      	cbz	r0, 8003bda <main+0x142>
 8003bd8:	e7fe      	b.n	8003bd8 <main+0x140>

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8003bda:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8003d04 <main+0x26c>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_TIM_MspPostInit(&htim2);
 8003bde:	4620      	mov	r0, r4
 8003be0:	f000 f9ce 	bl	8003f80 <HAL_TIM_MspPostInit>

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8003be4:	493f      	ldr	r1, [pc, #252]	; (8003ce4 <main+0x24c>)
  huart1.Init.BaudRate = 57600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003be6:	f8c9 5008 	str.w	r5, [r9, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bea:	f04f 0b0c 	mov.w	fp, #12
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 57600;
 8003bee:	f44f 4261 	mov.w	r2, #57600	; 0xe100
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bf2:	4648      	mov	r0, r9
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 57600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003bf4:	f8c9 500c 	str.w	r5, [r9, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bf8:	f8c9 5010 	str.w	r5, [r9, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bfc:	f8c9 5018 	str.w	r5, [r9, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c00:	f8c9 501c 	str.w	r5, [r9, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c04:	f8c9 5020 	str.w	r5, [r9, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c08:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 57600;
 8003c0c:	e889 0006 	stmia.w	r9, {r1, r2}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c10:	f8c9 b014 	str.w	fp, [r9, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c14:	f7ff f828 	bl	8002c68 <HAL_UART_Init>
 8003c18:	b100      	cbz	r0, 8003c1c <main+0x184>
 8003c1a:	e7fe      	b.n	8003c1a <main+0x182>
/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003c1c:	4d32      	ldr	r5, [pc, #200]	; (8003ce8 <main+0x250>)
 8003c1e:	4933      	ldr	r1, [pc, #204]	; (8003cec <main+0x254>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c20:	60a8      	str	r0, [r5, #8]
static void MX_SPI1_Init(void)
{

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c22:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_12BIT;
 8003c26:	f44f 6330 	mov.w	r3, #2816	; 0xb00
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c2a:	6128      	str	r0, [r5, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c2c:	6168      	str	r0, [r5, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c2e:	6228      	str	r0, [r5, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c30:	6268      	str	r0, [r5, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c32:	62a8      	str	r0, [r5, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003c34:	6328      	str	r0, [r5, #48]	; 0x30
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_12BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c36:	f44f 7700 	mov.w	r7, #512	; 0x200
/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003c3a:	6029      	str	r1, [r5, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c3c:	606a      	str	r2, [r5, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_12BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003c3e:	2138      	movs	r1, #56	; 0x38
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8003c40:	2207      	movs	r2, #7
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c42:	4628      	mov	r0, r5
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c44:	f04f 0a08 	mov.w	sl, #8
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_12BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c48:	61af      	str	r7, [r5, #24]

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_12BIT;
 8003c4a:	60eb      	str	r3, [r5, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003c4c:	61e9      	str	r1, [r5, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8003c4e:	62ea      	str	r2, [r5, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003c50:	f8c5 a034 	str.w	sl, [r5, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c54:	f7fd ff06 	bl	8001a64 <HAL_SPI_Init>
 8003c58:	4607      	mov	r7, r0
 8003c5a:	b100      	cbz	r0, 8003c5e <main+0x1c6>
 8003c5c:	e7fe      	b.n	8003c5c <main+0x1c4>
  MX_DMA_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, DMA_RX_UART1_BUFFER, UART_BUFFER);
 8003c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c62:	4923      	ldr	r1, [pc, #140]	; (8003cf0 <main+0x258>)
 8003c64:	4648      	mov	r0, r9
 8003c66:	f7fe fc51 	bl	800250c <HAL_UART_Receive_DMA>
  HAL_SPI_Receive_DMA(&hspi1, DMA_RX_SPI1_BUFFER, SPI_BUFFER);
 8003c6a:	f44f 7284 	mov.w	r2, #264	; 0x108
 8003c6e:	4921      	ldr	r1, [pc, #132]	; (8003cf4 <main+0x25c>)
 8003c70:	4628      	mov	r0, r5
 8003c72:	f7fd ff65 	bl	8001b40 <HAL_SPI_Receive_DMA>

  HAL_TIM_Base_Start(&htim2);
 8003c76:	4620      	mov	r0, r4
 8003c78:	f7fe f988 	bl	8001f8c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	4620      	mov	r0, r4
 8003c80:	f7fe f996 	bl	8001fb0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003c84:	4641      	mov	r1, r8
 8003c86:	4620      	mov	r0, r4
 8003c88:	f7fe f992 	bl	8001fb0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003c8c:	4651      	mov	r1, sl
 8003c8e:	4620      	mov	r0, r4
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003c90:	4c19      	ldr	r4, [pc, #100]	; (8003cf8 <main+0x260>)
  HAL_SPI_Receive_DMA(&hspi1, DMA_RX_SPI1_BUFFER, SPI_BUFFER);

  HAL_TIM_Base_Start(&htim2);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003c92:	f7fe f98d 	bl	8001fb0 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8003c96:	463a      	mov	r2, r7
 8003c98:	2110      	movs	r1, #16
 8003c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c9e:	f7fc fec3 	bl	8000a28 <HAL_GPIO_WritePin>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ca4:	4635      	mov	r5, r6
 8003ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ca8:	f854 3b04 	ldr.w	r3, [r4], #4
 8003cac:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003cae:	4639      	mov	r1, r7
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	f7ff f817 	bl	8002ce4 <osThreadCreate>
 8003cb6:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <main+0x264>)
 8003cb8:	6018      	str	r0, [r3, #0]

  /* definition and creation of comunication */
  osThreadDef(comunication, StartTask02, osPriorityIdle, 0, 128);
 8003cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cbc:	ad0b      	add	r5, sp, #44	; 0x2c
 8003cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	602b      	str	r3, [r5, #0]
  comunicationHandle = osThreadCreate(osThread(comunication), NULL);
 8003cc4:	4639      	mov	r1, r7
 8003cc6:	a80b      	add	r0, sp, #44	; 0x2c
 8003cc8:	f7ff f80c 	bl	8002ce4 <osThreadCreate>
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <main+0x268>)
 8003cce:	6018      	str	r0, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8003cd0:	f7ff f802 	bl	8002cd8 <osKernelStart>
 8003cd4:	e7fe      	b.n	8003cd4 <main+0x23c>
 8003cd6:	bf00      	nop
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	200012a4 	.word	0x200012a4
 8003ce0:	48000400 	.word	0x48000400
 8003ce4:	40013800 	.word	0x40013800
 8003ce8:	20001240 	.word	0x20001240
 8003cec:	40013000 	.word	0x40013000
 8003cf0:	20000d2c 	.word	0x20000d2c
 8003cf4:	20001038 	.word	0x20001038
 8003cf8:	0800421c 	.word	0x0800421c
 8003cfc:	20000e2c 	.word	0x20000e2c
 8003d00:	2000132c 	.word	0x2000132c
 8003d04:	20000fc0 	.word	0x20000fc0

08003d08 <TransmitOnUart>:
}

/* USER CODE BEGIN 4 */

void TransmitOnUart(uint8_t *message,uint8_t lenght )
{
 8003d08:	b4f0      	push	{r4, r5, r6, r7}
	for (int i = 0; i < lenght;i++){
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	b1a1      	cbz	r1, 8003d38 <TransmitOnUart+0x30>
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <TransmitOnUart+0x34>)
 8003d10:	1e42      	subs	r2, r0, #1
 8003d12:	1c5d      	adds	r5, r3, #1
 8003d14:	1858      	adds	r0, r3, r1
		DMA_TX_UART1_BUFFER[i] = message[i];
 8003d16:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8003d1a:	f803 1f01 	strb.w	r1, [r3, #1]!

/* USER CODE BEGIN 4 */

void TransmitOnUart(uint8_t *message,uint8_t lenght )
{
	for (int i = 0; i < lenght;i++){
 8003d1e:	4283      	cmp	r3, r0
 8003d20:	d1f9      	bne.n	8003d16 <TransmitOnUart+0xe>
		DMA_TX_UART1_BUFFER[i] = message[i];
	}
	DMA_TX_UART1_BUFFER[lenght] = 0x0d;
	DMA_TX_UART1_BUFFER[lenght+1] = 0x0a;
 8003d22:	192b      	adds	r3, r5, r4
void TransmitOnUart(uint8_t *message,uint8_t lenght )
{
	for (int i = 0; i < lenght;i++){
		DMA_TX_UART1_BUFFER[i] = message[i];
	}
	DMA_TX_UART1_BUFFER[lenght] = 0x0d;
 8003d24:	270d      	movs	r7, #13
	DMA_TX_UART1_BUFFER[lenght+1] = 0x0a;
 8003d26:	260a      	movs	r6, #10
void TransmitOnUart(uint8_t *message,uint8_t lenght )
{
	for (int i = 0; i < lenght;i++){
		DMA_TX_UART1_BUFFER[i] = message[i];
	}
	DMA_TX_UART1_BUFFER[lenght] = 0x0d;
 8003d28:	552f      	strb	r7, [r5, r4]
	DMA_TX_UART1_BUFFER[lenght+1] = 0x0a;
 8003d2a:	705e      	strb	r6, [r3, #1]
	HAL_UART_Transmit_DMA(&huart1,DMA_TX_UART1_BUFFER, lenght+2);
 8003d2c:	1ca2      	adds	r2, r4, #2
 8003d2e:	4904      	ldr	r1, [pc, #16]	; (8003d40 <TransmitOnUart+0x38>)
 8003d30:	4804      	ldr	r0, [pc, #16]	; (8003d44 <TransmitOnUart+0x3c>)
}
 8003d32:	bcf0      	pop	{r4, r5, r6, r7}
	for (int i = 0; i < lenght;i++){
		DMA_TX_UART1_BUFFER[i] = message[i];
	}
	DMA_TX_UART1_BUFFER[lenght] = 0x0d;
	DMA_TX_UART1_BUFFER[lenght+1] = 0x0a;
	HAL_UART_Transmit_DMA(&huart1,DMA_TX_UART1_BUFFER, lenght+2);
 8003d34:	f7fe bbac 	b.w	8002490 <HAL_UART_Transmit_DMA>
 8003d38:	4d01      	ldr	r5, [pc, #4]	; (8003d40 <TransmitOnUart+0x38>)
 8003d3a:	e7f2      	b.n	8003d22 <TransmitOnUart+0x1a>
 8003d3c:	2000113f 	.word	0x2000113f
 8003d40:	20001140 	.word	0x20001140
 8003d44:	20000fc0 	.word	0x20000fc0

08003d48 <StartTask02>:
  /* USER CODE END 5 */ 
}

/* StartTask02 function */
void StartTask02(void const * argument)
{
 8003d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d4c:	4d30      	ldr	r5, [pc, #192]	; (8003e10 <StartTask02+0xc8>)
 8003d4e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8003e18 <StartTask02+0xd0>

    //HAL_SPI_Transmit(&hspi1,(uint8_t*)xy,4,1000);


    // Check if there is any new data received on uart
    bytesRx = DMA1_Channel5->CNDTR;
 8003d52:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8003e28 <StartTask02+0xe0>
  /* USER CODE END 5 */ 
}

/* StartTask02 function */
void StartTask02(void const * argument)
{
 8003d56:	b083      	sub	sp, #12
  /* USER CODE BEGIN StartTask02 */
	uint16_t bytesRx;
	uint16_t offsetByte = 0;
 8003d58:	2400      	movs	r4, #0
    //HAL_SPI_Transmit(&hspi1,(uint8_t*)xy,4,1000);


    // Check if there is any new data received on uart
    bytesRx = DMA1_Channel5->CNDTR;
	if (DMA_RX_UART1_BUFFER[UART_BUFFER - bytesRx - 1] == 0x0D
 8003d5a:	462e      	mov	r6, r5

		if (lastByteRx < bytesRx) {
			for (int i = 0; i <= UART_BUFFER - offsetByte; i++) {
				uart_command[i] = DMA_RX_UART1_BUFFER[offsetByte + i];
			}
			offsetByte = 0;
 8003d5c:	4627      	mov	r7, r4
 8003d5e:	46ea      	mov	sl, sp
 8003d60:	e001      	b.n	8003d66 <StartTask02+0x1e>
	if (!strncmp((const char *) uart_command, "hey", 3)) {
		uint8_t message[5] = "hello";
		uint8_t lenght = sizeof(message)/sizeof(message[0]);
		TransmitOnUart(message, lenght);
	}
	uart_command[uart_command_length] = 0;
 8003d62:	f889 7000 	strb.w	r7, [r9]

	uint8_t xy[4] = {0x23,0x45,0x7A,0xE6};
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003d66:	2001      	movs	r0, #1
 8003d68:	f7fe ffd4 	bl	8002d14 <osDelay>

    //HAL_SPI_Transmit(&hspi1,(uint8_t*)xy,4,1000);


    // Check if there is any new data received on uart
    bytesRx = DMA1_Channel5->CNDTR;
 8003d6c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003d70:	b292      	uxth	r2, r2
	if (DMA_RX_UART1_BUFFER[UART_BUFFER - bytesRx - 1] == 0x0D
 8003d72:	f1c2 03ff 	rsb	r3, r2, #255	; 0xff
 8003d76:	f5c2 7b80 	rsb	fp, r2, #256	; 0x100
 8003d7a:	5ceb      	ldrb	r3, [r5, r3]
 8003d7c:	2b0d      	cmp	r3, #13
 8003d7e:	d023      	beq.n	8003dc8 <StartTask02+0x80>
			|| DMA_RX_UART1_BUFFER[UART_BUFFER - bytesRx] == 0x0D
 8003d80:	f816 100b 	ldrb.w	r1, [r6, fp]
 8003d84:	290d      	cmp	r1, #13
 8003d86:	d01f      	beq.n	8003dc8 <StartTask02+0x80>
			|| DMA_RX_UART1_BUFFER[UART_BUFFER - 1] == 0x0D) {
 8003d88:	f896 10ff 	ldrb.w	r1, [r6, #255]	; 0xff
 8003d8c:	290d      	cmp	r1, #13
 8003d8e:	d01b      	beq.n	8003dc8 <StartTask02+0x80>
		for (int i = 0; i < UART_BUFFER - bytesRx; i++) {
			uart_command[i] = DMA_RX_UART1_BUFFER[offsetByte + i];
		}
	}

	memset(DMA_RX_UART1_BUFFER, '\0', UART_BUFFER);
 8003d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d94:	2100      	movs	r1, #0
 8003d96:	481e      	ldr	r0, [pc, #120]	; (8003e10 <StartTask02+0xc8>)
 8003d98:	f000 fa16 	bl	80041c8 <memset>
	offsetByte = UART_BUFFER - bytesRx;


	if (!strncmp((const char *) uart_command, "hey", 3)) {
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	491d      	ldr	r1, [pc, #116]	; (8003e14 <StartTask02+0xcc>)
 8003da0:	481d      	ldr	r0, [pc, #116]	; (8003e18 <StartTask02+0xd0>)
			uart_command[i] = DMA_RX_UART1_BUFFER[offsetByte + i];
		}
	}

	memset(DMA_RX_UART1_BUFFER, '\0', UART_BUFFER);
	offsetByte = UART_BUFFER - bytesRx;
 8003da2:	fa1f f48b 	uxth.w	r4, fp


	if (!strncmp((const char *) uart_command, "hey", 3)) {
 8003da6:	f000 fa17 	bl	80041d8 <strncmp>
 8003daa:	2800      	cmp	r0, #0
 8003dac:	d1d9      	bne.n	8003d62 <StartTask02+0x1a>
		uint8_t message[5] = "hello";
 8003dae:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <StartTask02+0xd4>)
 8003db0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003db4:	f8ca 0000 	str.w	r0, [sl]
 8003db8:	f88d 1004 	strb.w	r1, [sp, #4]
		uint8_t lenght = sizeof(message)/sizeof(message[0]);
		TransmitOnUart(message, lenght);
 8003dbc:	4668      	mov	r0, sp
 8003dbe:	2105      	movs	r1, #5
 8003dc0:	46ea      	mov	sl, sp
 8003dc2:	f7ff ffa1 	bl	8003d08 <TransmitOnUart>
 8003dc6:	e7cc      	b.n	8003d62 <StartTask02+0x1a>
    bytesRx = DMA1_Channel5->CNDTR;
	if (DMA_RX_UART1_BUFFER[UART_BUFFER - bytesRx - 1] == 0x0D
			|| DMA_RX_UART1_BUFFER[UART_BUFFER - bytesRx] == 0x0D
			|| DMA_RX_UART1_BUFFER[UART_BUFFER - 1] == 0x0D) {

		if (lastByteRx < bytesRx) {
 8003dc8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003dcc:	d90e      	bls.n	8003dec <StartTask02+0xa4>
			for (int i = 0; i <= UART_BUFFER - offsetByte; i++) {
 8003dce:	f5c4 7280 	rsb	r2, r4, #256	; 0x100
 8003dd2:	2a00      	cmp	r2, #0
 8003dd4:	db09      	blt.n	8003dea <StartTask02+0xa2>
 8003dd6:	1e62      	subs	r2, r4, #1
 8003dd8:	4911      	ldr	r1, [pc, #68]	; (8003e20 <StartTask02+0xd8>)
 8003dda:	4c12      	ldr	r4, [pc, #72]	; (8003e24 <StartTask02+0xdc>)
 8003ddc:	442a      	add	r2, r5
				uart_command[i] = DMA_RX_UART1_BUFFER[offsetByte + i];
 8003dde:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8003de2:	f801 0f01 	strb.w	r0, [r1, #1]!
	if (DMA_RX_UART1_BUFFER[UART_BUFFER - bytesRx - 1] == 0x0D
			|| DMA_RX_UART1_BUFFER[UART_BUFFER - bytesRx] == 0x0D
			|| DMA_RX_UART1_BUFFER[UART_BUFFER - 1] == 0x0D) {

		if (lastByteRx < bytesRx) {
			for (int i = 0; i <= UART_BUFFER - offsetByte; i++) {
 8003de6:	42a2      	cmp	r2, r4
 8003de8:	d1f9      	bne.n	8003dde <StartTask02+0x96>
				uart_command[i] = DMA_RX_UART1_BUFFER[offsetByte + i];
			}
			offsetByte = 0;
 8003dea:	2400      	movs	r4, #0
		}
		for (int i = 0; i < UART_BUFFER - bytesRx; i++) {
 8003dec:	f1bb 0f00 	cmp.w	fp, #0
 8003df0:	ddce      	ble.n	8003d90 <StartTask02+0x48>
 8003df2:	f10b 30ff 	add.w	r0, fp, #4294967295
 8003df6:	1e62      	subs	r2, r4, #1
 8003df8:	4420      	add	r0, r4
 8003dfa:	4909      	ldr	r1, [pc, #36]	; (8003e20 <StartTask02+0xd8>)
 8003dfc:	182c      	adds	r4, r5, r0
 8003dfe:	442a      	add	r2, r5
			uart_command[i] = DMA_RX_UART1_BUFFER[offsetByte + i];
 8003e00:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8003e04:	f801 0f01 	strb.w	r0, [r1, #1]!
			for (int i = 0; i <= UART_BUFFER - offsetByte; i++) {
				uart_command[i] = DMA_RX_UART1_BUFFER[offsetByte + i];
			}
			offsetByte = 0;
		}
		for (int i = 0; i < UART_BUFFER - bytesRx; i++) {
 8003e08:	42a2      	cmp	r2, r4
 8003e0a:	d1f9      	bne.n	8003e00 <StartTask02+0xb8>
 8003e0c:	e7c0      	b.n	8003d90 <StartTask02+0x48>
 8003e0e:	bf00      	nop
 8003e10:	20000d2c 	.word	0x20000d2c
 8003e14:	08004268 	.word	0x08004268
 8003e18:	20000e30 	.word	0x20000e30
 8003e1c:	08004244 	.word	0x08004244
 8003e20:	20000e2f 	.word	0x20000e2f
 8003e24:	20000e2c 	.word	0x20000e2c
 8003e28:	40020058 	.word	0x40020058

08003e2c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003e2c:	e7fe      	b.n	8003e2c <_Error_Handler>
 8003e2e:	bf00      	nop

08003e30 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e30:	4b22      	ldr	r3, [pc, #136]	; (8003ebc <HAL_MspInit+0x8c>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e32:	b500      	push	{lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	661a      	str	r2, [r3, #96]	; 0x60
 8003e3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e3e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e40:	f002 0201 	and.w	r2, r2, #1
 8003e44:	9200      	str	r2, [sp, #0]
 8003e46:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e4e:	659a      	str	r2, [r3, #88]	; 0x58
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e58:	2003      	movs	r0, #3
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e5a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e5c:	f7fc fb74 	bl	8000548 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003e60:	2200      	movs	r2, #0
 8003e62:	4611      	mov	r1, r2
 8003e64:	f06f 000b 	mvn.w	r0, #11
 8003e68:	f7fc fb80 	bl	800056c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	4611      	mov	r1, r2
 8003e70:	f06f 000a 	mvn.w	r0, #10
 8003e74:	f7fc fb7a 	bl	800056c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	f06f 0009 	mvn.w	r0, #9
 8003e80:	f7fc fb74 	bl	800056c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003e84:	2200      	movs	r2, #0
 8003e86:	4611      	mov	r1, r2
 8003e88:	f06f 0004 	mvn.w	r0, #4
 8003e8c:	f7fc fb6e 	bl	800056c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003e90:	2200      	movs	r2, #0
 8003e92:	4611      	mov	r1, r2
 8003e94:	f06f 0003 	mvn.w	r0, #3
 8003e98:	f7fc fb68 	bl	800056c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	210f      	movs	r1, #15
 8003ea0:	f06f 0001 	mvn.w	r0, #1
 8003ea4:	f7fc fb62 	bl	800056c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	210f      	movs	r1, #15
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb0:	f7fc fb5c 	bl	800056c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eb4:	b003      	add	sp, #12
 8003eb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000

08003ec0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8003ec0:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <HAL_SPI_MspInit+0x88>)
 8003ec2:	6802      	ldr	r2, [r0, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d000      	beq.n	8003eca <HAL_SPI_MspInit+0xa>
 8003ec8:	4770      	bx	lr
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003eca:	f503 4360 	add.w	r3, r3, #57344	; 0xe000

  /* USER CODE END MspInit 1 */
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ece:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ed0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8003ed2:	4d1e      	ldr	r5, [pc, #120]	; (8003f4c <HAL_SPI_MspInit+0x8c>)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ed4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ed8:	661a      	str	r2, [r3, #96]	; 0x60
 8003eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* USER CODE END MspInit 1 */
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003edc:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ee2:	4604      	mov	r4, r0
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003ee4:	20e0      	movs	r0, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee6:	2600      	movs	r6, #0
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ee8:	9300      	str	r3, [sp, #0]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eea:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003eec:	2305      	movs	r3, #5
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eee:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef0:	a901      	add	r1, sp, #4
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003ef2:	9001      	str	r0, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ef8:	f8dd e000 	ldr.w	lr, [sp]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efc:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efe:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f00:	9305      	str	r3, [sp, #20]
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f02:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f04:	f7fc fcbc 	bl	8000880 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8003f08:	4811      	ldr	r0, [pc, #68]	; (8003f50 <HAL_SPI_MspInit+0x90>)
 8003f0a:	6028      	str	r0, [r5, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8003f0c:	f04f 0e01 	mov.w	lr, #1
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f10:	2780      	movs	r7, #128	; 0x80
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f12:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f16:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8003f1a:	2320      	movs	r3, #32
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003f1c:	4628      	mov	r0, r5

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f1e:	60ae      	str	r6, [r5, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f20:	60ee      	str	r6, [r5, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f22:	622e      	str	r6, [r5, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8003f24:	f8c5 e004 	str.w	lr, [r5, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f28:	612f      	str	r7, [r5, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f2a:	6169      	str	r1, [r5, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f2c:	61aa      	str	r2, [r5, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8003f2e:	61eb      	str	r3, [r5, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003f30:	f7fc fb86 	bl	8000640 <HAL_DMA_Init>
 8003f34:	b918      	cbnz	r0, 8003f3e <HAL_SPI_MspInit+0x7e>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003f36:	65a5      	str	r5, [r4, #88]	; 0x58
 8003f38:	62ac      	str	r4, [r5, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f3a:	b007      	add	sp, #28
 8003f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
 8003f3e:	2186      	movs	r1, #134	; 0x86
 8003f40:	4804      	ldr	r0, [pc, #16]	; (8003f54 <HAL_SPI_MspInit+0x94>)
 8003f42:	f7ff ff73 	bl	8003e2c <_Error_Handler>
 8003f46:	e7f6      	b.n	8003f36 <HAL_SPI_MspInit+0x76>
 8003f48:	40013000 	.word	0x40013000
 8003f4c:	200012e4 	.word	0x200012e4
 8003f50:	4002001c 	.word	0x4002001c
 8003f54:	08004488 	.word	0x08004488

08003f58 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8003f58:	6803      	ldr	r3, [r0, #0]
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5e:	d000      	beq.n	8003f62 <HAL_TIM_Base_MspInit+0xa>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003f60:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f62:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f66:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	659a      	str	r2, [r3, #88]	; 0x58
 8003f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003f7a:	b002      	add	sp, #8
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop

08003f80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 8003f80:	6803      	ldr	r3, [r0, #0]
 8003f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f86:	d000      	beq.n	8003f8a <HAL_TIM_MspPostInit+0xa>
 8003f88:	4770      	bx	lr
  }

}

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f8a:	b530      	push	{r4, r5, lr}
 8003f8c:	b087      	sub	sp, #28
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8e:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f90:	2201      	movs	r2, #1
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003f92:	250e      	movs	r5, #14
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f94:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f96:	a901      	add	r1, sp, #4
 8003f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003f9c:	9501      	str	r5, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9e:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fa4:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa6:	f7fc fc6b 	bl	8000880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003faa:	b007      	add	sp, #28
 8003fac:	bd30      	pop	{r4, r5, pc}
 8003fae:	bf00      	nop

08003fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003fb0:	4b30      	ldr	r3, [pc, #192]	; (8004074 <HAL_UART_MspInit+0xc4>)
 8003fb2:	6802      	ldr	r2, [r0, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d000      	beq.n	8003fba <HAL_UART_MspInit+0xa>
 8003fb8:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fba:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003fc2:	4e2d      	ldr	r6, [pc, #180]	; (8004078 <HAL_UART_MspInit+0xc8>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fc8:	661a      	str	r2, [r3, #96]	; 0x60
 8003fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fcc:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd2:	4604      	mov	r4, r0
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003fd4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd8:	2500      	movs	r5, #0
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fda:	9300      	str	r3, [sp, #0]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fdc:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fde:	2307      	movs	r3, #7
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe0:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe2:	a901      	add	r1, sp, #4
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003fe4:	9001      	str	r0, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fea:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fec:	9305      	str	r3, [sp, #20]
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fee:	f8dd e000 	ldr.w	lr, [sp]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff4:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff6:	f7fc fc43 	bl	8000880 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003ffa:	4920      	ldr	r1, [pc, #128]	; (800407c <HAL_UART_MspInit+0xcc>)
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8003ffc:	6077      	str	r7, [r6, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ffe:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004000:	2320      	movs	r3, #32
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004002:	4630      	mov	r0, r6

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004004:	60b5      	str	r5, [r6, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004006:	60f5      	str	r5, [r6, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004008:	6175      	str	r5, [r6, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800400a:	61b5      	str	r5, [r6, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800400c:	6235      	str	r5, [r6, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800400e:	6031      	str	r1, [r6, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004010:	6132      	str	r2, [r6, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004012:	61f3      	str	r3, [r6, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004014:	f7fc fb14 	bl	8000640 <HAL_DMA_Init>
 8004018:	bb00      	cbnz	r0, 800405c <HAL_UART_MspInit+0xac>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800401a:	4d19      	ldr	r5, [pc, #100]	; (8004080 <HAL_UART_MspInit+0xd0>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800401c:	66e6      	str	r6, [r4, #108]	; 0x6c

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800401e:	2300      	movs	r3, #0
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004020:	4f18      	ldr	r7, [pc, #96]	; (8004084 <HAL_UART_MspInit+0xd4>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004022:	62b4      	str	r4, [r6, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004024:	2110      	movs	r1, #16

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8004026:	2602      	movs	r6, #2
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004028:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800402a:	4628      	mov	r0, r5
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800402c:	602f      	str	r7, [r5, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 800402e:	606e      	str	r6, [r5, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004030:	60a9      	str	r1, [r5, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004032:	612a      	str	r2, [r5, #16]

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004034:	60eb      	str	r3, [r5, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004036:	616b      	str	r3, [r5, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004038:	61ab      	str	r3, [r5, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800403a:	61eb      	str	r3, [r5, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800403c:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800403e:	f7fc faff 	bl	8000640 <HAL_DMA_Init>
 8004042:	b988      	cbnz	r0, 8004068 <HAL_UART_MspInit+0xb8>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004044:	2200      	movs	r2, #0
 8004046:	2105      	movs	r1, #5
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004048:	66a5      	str	r5, [r4, #104]	; 0x68

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800404a:	2025      	movs	r0, #37	; 0x25
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800404c:	62ac      	str	r4, [r5, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800404e:	f7fc fa8d 	bl	800056c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004052:	2025      	movs	r0, #37	; 0x25
 8004054:	f7fc fac2 	bl	80005dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004058:	b007      	add	sp, #28
 800405a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
 800405c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004060:	4809      	ldr	r0, [pc, #36]	; (8004088 <HAL_UART_MspInit+0xd8>)
 8004062:	f7ff fee3 	bl	8003e2c <_Error_Handler>
 8004066:	e7d8      	b.n	800401a <HAL_UART_MspInit+0x6a>
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
    {
      _Error_Handler(__FILE__, __LINE__);
 8004068:	f240 1121 	movw	r1, #289	; 0x121
 800406c:	4806      	ldr	r0, [pc, #24]	; (8004088 <HAL_UART_MspInit+0xd8>)
 800406e:	f7ff fedd 	bl	8003e2c <_Error_Handler>
 8004072:	e7e7      	b.n	8004044 <HAL_UART_MspInit+0x94>
 8004074:	40013800 	.word	0x40013800
 8004078:	20000f78 	.word	0x20000f78
 800407c:	40020058 	.word	0x40020058
 8004080:	20000f30 	.word	0x20000f30
 8004084:	40020044 	.word	0x40020044
 8004088:	08004488 	.word	0x08004488

0800408c <NMI_Handler>:
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop

08004090 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004090:	e7fe      	b.n	8004090 <HardFault_Handler>
 8004092:	bf00      	nop

08004094 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004094:	e7fe      	b.n	8004094 <MemManage_Handler>
 8004096:	bf00      	nop

08004098 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8004098:	e7fe      	b.n	8004098 <BusFault_Handler>
 800409a:	bf00      	nop

0800409c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800409c:	e7fe      	b.n	800409c <UsageFault_Handler>
 800409e:	bf00      	nop

080040a0 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop

080040a4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80040a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040a6:	f7fc fa41 	bl	800052c <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  osSystickHandler();
 80040ae:	f7fe be39 	b.w	8002d24 <osSystickHandler>
 80040b2:	bf00      	nop

080040b4 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80040b4:	4801      	ldr	r0, [pc, #4]	; (80040bc <DMA1_Channel2_IRQHandler+0x8>)
 80040b6:	f7fc bb97 	b.w	80007e8 <HAL_DMA_IRQHandler>
 80040ba:	bf00      	nop
 80040bc:	200012e4 	.word	0x200012e4

080040c0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80040c0:	4801      	ldr	r0, [pc, #4]	; (80040c8 <DMA1_Channel4_IRQHandler+0x8>)
 80040c2:	f7fc bb91 	b.w	80007e8 <HAL_DMA_IRQHandler>
 80040c6:	bf00      	nop
 80040c8:	20000f30 	.word	0x20000f30

080040cc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80040cc:	4801      	ldr	r0, [pc, #4]	; (80040d4 <DMA1_Channel5_IRQHandler+0x8>)
 80040ce:	f7fc bb8b 	b.w	80007e8 <HAL_DMA_IRQHandler>
 80040d2:	bf00      	nop
 80040d4:	20000f78 	.word	0x20000f78

080040d8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80040d8:	4801      	ldr	r0, [pc, #4]	; (80040e0 <USART1_IRQHandler+0x8>)
 80040da:	f7fe bad5 	b.w	8002688 <HAL_UART_IRQHandler>
 80040de:	bf00      	nop
 80040e0:	20000fc0 	.word	0x20000fc0

080040e4 <SystemInit>:
  //  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  //#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80040e4:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <SystemInit+0x3c>)

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040e6:	480f      	ldr	r0, [pc, #60]	; (8004124 <SystemInit+0x40>)
  //  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  //#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80040e8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80040ea:	2100      	movs	r1, #0
  //  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  //#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80040ec:	f042 0201 	orr.w	r2, r2, #1
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80040f0:	b410      	push	{r4}
  //  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  //#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80040f2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80040f4:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80040fc:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004100:	f44f 5480 	mov.w	r4, #4096	; 0x1000

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004104:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004106:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004108:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800410a:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800410e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004112:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004114:	6199      	str	r1, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004116:	6084      	str	r4, [r0, #8]
#endif
}
 8004118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000
 8004124:	e000ed00 	.word	0xe000ed00

08004128 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004160 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800412c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800412e:	e003      	b.n	8004138 <LoopCopyDataInit>

08004130 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004130:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004132:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004134:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004136:	3104      	adds	r1, #4

08004138 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004138:	480b      	ldr	r0, [pc, #44]	; (8004168 <LoopForever+0xa>)
	ldr	r3, =_edata
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <LoopForever+0xe>)
	adds	r2, r0, r1
 800413c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800413e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004140:	d3f6      	bcc.n	8004130 <CopyDataInit>
	ldr	r2, =_sbss
 8004142:	4a0b      	ldr	r2, [pc, #44]	; (8004170 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004144:	e002      	b.n	800414c <LoopFillZerobss>

08004146 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004146:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004148:	f842 3b04 	str.w	r3, [r2], #4

0800414c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <LoopForever+0x16>)
	cmp	r2, r3
 800414e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004150:	d3f9      	bcc.n	8004146 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004152:	f7ff ffc7 	bl	80040e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004156:	f000 f811 	bl	800417c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800415a:	f7ff fc9d 	bl	8003a98 <main>

0800415e <LoopForever>:

LoopForever:
    b LoopForever
 800415e:	e7fe      	b.n	800415e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004160:	20010000 	.word	0x20010000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8004164:	080044fc 	.word	0x080044fc
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004168:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800416c:	20000008 	.word	0x20000008
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8004170:	20000008 	.word	0x20000008
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8004174:	20001330 	.word	0x20001330

08004178 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004178:	e7fe      	b.n	8004178 <ADC1_IRQHandler>
	...

0800417c <__libc_init_array>:
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <__libc_init_array+0x3c>)
 8004180:	4c0e      	ldr	r4, [pc, #56]	; (80041bc <__libc_init_array+0x40>)
 8004182:	1ae4      	subs	r4, r4, r3
 8004184:	10a4      	asrs	r4, r4, #2
 8004186:	2500      	movs	r5, #0
 8004188:	461e      	mov	r6, r3
 800418a:	42a5      	cmp	r5, r4
 800418c:	d004      	beq.n	8004198 <__libc_init_array+0x1c>
 800418e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004192:	4798      	blx	r3
 8004194:	3501      	adds	r5, #1
 8004196:	e7f8      	b.n	800418a <__libc_init_array+0xe>
 8004198:	f000 f834 	bl	8004204 <_init>
 800419c:	4c08      	ldr	r4, [pc, #32]	; (80041c0 <__libc_init_array+0x44>)
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <__libc_init_array+0x48>)
 80041a0:	1ae4      	subs	r4, r4, r3
 80041a2:	10a4      	asrs	r4, r4, #2
 80041a4:	2500      	movs	r5, #0
 80041a6:	461e      	mov	r6, r3
 80041a8:	42a5      	cmp	r5, r4
 80041aa:	d004      	beq.n	80041b6 <__libc_init_array+0x3a>
 80041ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041b0:	4798      	blx	r3
 80041b2:	3501      	adds	r5, #1
 80041b4:	e7f8      	b.n	80041a8 <__libc_init_array+0x2c>
 80041b6:	bd70      	pop	{r4, r5, r6, pc}
 80041b8:	080044f4 	.word	0x080044f4
 80041bc:	080044f4 	.word	0x080044f4
 80041c0:	080044f8 	.word	0x080044f8
 80041c4:	080044f4 	.word	0x080044f4

080041c8 <memset>:
 80041c8:	4402      	add	r2, r0
 80041ca:	4603      	mov	r3, r0
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d002      	beq.n	80041d6 <memset+0xe>
 80041d0:	f803 1b01 	strb.w	r1, [r3], #1
 80041d4:	e7fa      	b.n	80041cc <memset+0x4>
 80041d6:	4770      	bx	lr

080041d8 <strncmp>:
 80041d8:	b530      	push	{r4, r5, lr}
 80041da:	b182      	cbz	r2, 80041fe <strncmp+0x26>
 80041dc:	1e45      	subs	r5, r0, #1
 80041de:	3901      	subs	r1, #1
 80041e0:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80041e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80041e8:	42a3      	cmp	r3, r4
 80041ea:	d106      	bne.n	80041fa <strncmp+0x22>
 80041ec:	43ec      	mvns	r4, r5
 80041ee:	4414      	add	r4, r2
 80041f0:	42e0      	cmn	r0, r4
 80041f2:	d001      	beq.n	80041f8 <strncmp+0x20>
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f3      	bne.n	80041e0 <strncmp+0x8>
 80041f8:	461c      	mov	r4, r3
 80041fa:	1b18      	subs	r0, r3, r4
 80041fc:	bd30      	pop	{r4, r5, pc}
 80041fe:	4610      	mov	r0, r2
 8004200:	bd30      	pop	{r4, r5, pc}
	...

08004204 <_init>:
 8004204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004206:	bf00      	nop
 8004208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420a:	bc08      	pop	{r3}
 800420c:	469e      	mov	lr, r3
 800420e:	4770      	bx	lr

08004210 <_fini>:
 8004210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004212:	bf00      	nop
 8004214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004216:	bc08      	pop	{r3}
 8004218:	469e      	mov	lr, r3
 800421a:	4770      	bx	lr
